1
00:00:00,000 --> 00:00:00,100
 

2
00:00:00,100 --> 00:00:00,380
OK.

3
00:00:00,380 --> 00:00:01,963
Let's talk about
another type of index

4
00:00:01,963 --> 00:00:03,930
that can be very useful
when dealing with text.

5
00:00:03,930 --> 00:00:06,510
And it's called a
full-text search index

6
00:00:06,510 --> 00:00:08,160
Full-text search
was first introduced

7
00:00:08,160 --> 00:00:11,450
on an experimental
basis in MongoDB 2.4.

8
00:00:11,450 --> 00:00:13,790
And now it's available and
for general availability

9
00:00:13,790 --> 00:00:16,090
in MongoDB 2.6.

10
00:00:16,090 --> 00:00:18,610
So why would you use it, and
what would you use it for?

11
00:00:18,610 --> 00:00:21,230
Well, let's say you had a
very large piece of text

12
00:00:21,230 --> 00:00:23,470
that was in a document,
something like the US

13
00:00:23,470 --> 00:00:26,410
Constitution, which starts out
"We the people of the United

14
00:00:26,410 --> 00:00:29,340
States, in order to form
a more perfect union."

15
00:00:29,340 --> 00:00:32,580
Let's say you had that
document right here in a key

16
00:00:32,580 --> 00:00:34,150
called "mytext."

17
00:00:34,150 --> 00:00:36,475
And you had the entire
preamble to the US Constitution

18
00:00:36,475 --> 00:00:38,590
in this key, mytext.

19
00:00:38,590 --> 00:00:40,280
And you wanted to search it.

20
00:00:40,280 --> 00:00:43,450
Well, if you search
just on any given word,

21
00:00:43,450 --> 00:00:45,240
then you wouldn't
get anything back,

22
00:00:45,240 --> 00:00:47,450
because MongoDB, when
you search on strings,

23
00:00:47,450 --> 00:00:49,332
the entire string
needs to be there.

24
00:00:49,332 --> 00:00:51,540
So as an alternative, you
could put every single word

25
00:00:51,540 --> 00:00:55,380
into an array, and then use
the Set Notation operators

26
00:00:55,380 --> 00:00:58,442
to push things into it, and
then search for whether or not

27
00:00:58,442 --> 00:00:59,400
the words are included.

28
00:00:59,400 --> 00:01:01,222
But that's pretty tedious.

29
00:01:01,222 --> 00:01:03,680
And there are certain other
features that would be missing.

30
00:01:03,680 --> 00:01:06,270
So instead, what we
have is something

31
00:01:06,270 --> 00:01:08,510
called a full-text
search index, which

32
00:01:08,510 --> 00:01:12,410
is abbreviated "text," which
will index this entire document

33
00:01:12,410 --> 00:01:14,190
and every word, much
in the way an array

34
00:01:14,190 --> 00:01:17,790
is indexed, to allow you to
do queries into the text,

35
00:01:17,790 --> 00:01:19,950
basically applying
the OR operator,

36
00:01:19,950 --> 00:01:23,240
and looking for one
of several words.

37
00:01:23,240 --> 00:01:25,590
So let's go look at
now a specific case

38
00:01:25,590 --> 00:01:27,350
and see how it would work.

39
00:01:27,350 --> 00:01:27,850
All right.

40
00:01:27,850 --> 00:01:29,780
We've created a collection
called Sentences.

41
00:01:29,780 --> 00:01:33,110
And this collection has got a
bunch of mostly just randomly

42
00:01:33,110 --> 00:01:36,380
inserted words into a Words key.

43
00:01:36,380 --> 00:01:38,080
Now, if I wanted to
search-- and there

44
00:01:38,080 --> 00:01:40,100
is no tech search index
on this right now.

45
00:01:40,100 --> 00:01:41,470
This is a regular collection.

46
00:01:41,470 --> 00:01:45,030
If I wanted to search for,
let's say, dog, shrub, Ruby,

47
00:01:45,030 --> 00:01:45,670
I could do it.

48
00:01:45,670 --> 00:01:47,660
I could do-- all right.

49
00:01:47,660 --> 00:01:48,820
There we go.

50
00:01:48,820 --> 00:01:50,730
So I searched for
dog, shrub, Ruby.

51
00:01:50,730 --> 00:01:54,120
And I found this document
with words dog, shrub, Ruby.

52
00:01:54,120 --> 00:01:55,390
But it's very particular.

53
00:01:55,390 --> 00:01:58,010
If I leave off the
period, doesn't find it.

54
00:01:58,010 --> 00:02:01,720
If I just do dog,
Ruby, doesn't find it.

55
00:02:01,720 --> 00:02:04,660
And if I just do dog,
it doesn't find it.

56
00:02:04,660 --> 00:02:06,620
That's not going to
work too well for me

57
00:02:06,620 --> 00:02:09,770
to search on these
different words.

58
00:02:09,770 --> 00:02:12,480
So now, let's add a text index--
so db.sentences.ensureindex.

59
00:02:12,480 --> 00:02:15,440
 

60
00:02:15,440 --> 00:02:20,500
And now I want to put an
index on words of type Text.

61
00:02:20,500 --> 00:02:21,380
There we go.

62
00:02:21,380 --> 00:02:24,480
And now when I search
it-- dog, shrub,

63
00:02:24,480 --> 00:02:26,240
Ruby-- it's going to
work a lot better.

64
00:02:26,240 --> 00:02:27,910
So let's do that.

65
00:02:27,910 --> 00:02:29,630
So let's first
look at the syntax

66
00:02:29,630 --> 00:02:31,560
for searching a full-text index.

67
00:02:31,560 --> 00:02:34,130
The way it works is,
I have to say $text,

68
00:02:34,130 --> 00:02:39,350
and then give a document--
we had $search-- and then

69
00:02:39,350 --> 00:02:40,350
what I'm looking for.

70
00:02:40,350 --> 00:02:43,170
So we saw that, for instance,
dog did not work before.

71
00:02:43,170 --> 00:02:46,420
Let's just look for dog
now, and see if that works.

72
00:02:46,420 --> 00:02:47,130
There we go.

73
00:02:47,130 --> 00:02:47,680
OK.

74
00:02:47,680 --> 00:02:49,650
So now I searched for
just the word "dog,"

75
00:02:49,650 --> 00:02:52,510
and I was able to get all of
these back that have dog, moss,

76
00:02:52,510 --> 00:02:54,010
Ruby, dog, shrub, Ruby.

77
00:02:54,010 --> 00:02:56,390
And then just to show
you again, when I just

78
00:02:56,390 --> 00:02:59,750
search for dog using a
regular search of words,

79
00:02:59,750 --> 00:03:01,580
I don't get anything.

80
00:03:01,580 --> 00:03:03,684
But if I search using
a text index-- I'm

81
00:03:03,684 --> 00:03:05,100
going to show you
the syntax right

82
00:03:05,100 --> 00:03:07,700
here-- I search
using a text index

83
00:03:07,700 --> 00:03:10,860
by specifying $text
and then $search,

84
00:03:10,860 --> 00:03:13,811
and then what I'm looking for--
dog-- I do get documents back.

85
00:03:13,811 --> 00:03:15,810
I get all these documents
back, because they all

86
00:03:15,810 --> 00:03:17,080
have a dog in them.

87
00:03:17,080 --> 00:03:22,425
And if I also say moss, I get
all of these back as well.

88
00:03:22,425 --> 00:03:25,750
And if I say moss, Ruby, I'm
going to get all of these back.

89
00:03:25,750 --> 00:03:27,810
And it's quite flexible.

90
00:03:27,810 --> 00:03:30,470
Putting in a period
makes no difference.

91
00:03:30,470 --> 00:03:32,620
Capitalization
makes no difference.

92
00:03:32,620 --> 00:03:36,330
So it's going to also ignore
certain stop words that are not

93
00:03:36,330 --> 00:03:38,780
considered to be significant,
like "a" and "the"

94
00:03:38,780 --> 00:03:40,240
in the English language.

95
00:03:40,240 --> 00:03:42,150
So that's really
very useful if I

96
00:03:42,150 --> 00:03:44,590
want to search for a
bunch of different words,

97
00:03:44,590 --> 00:03:47,650
and essentially apply
a logical OR operator.

98
00:03:47,650 --> 00:03:49,770
Now there's one other
thing I wanted to show you,

99
00:03:49,770 --> 00:03:52,720
which is how you can get
back these in an order that

100
00:03:52,720 --> 00:03:56,240
indicates how good a match
MongoDB believes there is.

101
00:03:56,240 --> 00:03:58,040
So let's look for one of these.

102
00:03:58,040 --> 00:04:00,830
So I'm going to show
you the syntax for this.

103
00:04:00,830 --> 00:04:01,400
All right.

104
00:04:01,400 --> 00:04:04,120
So let's look for
dog, tree, obsidian.

105
00:04:04,120 --> 00:04:05,100
OK.

106
00:04:05,100 --> 00:04:06,210
Dog, tree, obsidian.

107
00:04:06,210 --> 00:04:07,901
Let me go back and change this.

108
00:04:07,901 --> 00:04:09,650
And we can see the
document right up there

109
00:04:09,650 --> 00:04:11,210
with dog, tree, obsidian.

110
00:04:11,210 --> 00:04:13,330
I mean the best match
for dog, tree, obsidian

111
00:04:13,330 --> 00:04:15,157
should be dog, tree,
obsidian document.

112
00:04:15,157 --> 00:04:16,990
But we're going to do
something special now.

113
00:04:16,990 --> 00:04:19,769
We're going to
project a Score field.

114
00:04:19,769 --> 00:04:22,240
And we're going to use a
special $meta operator,

115
00:04:22,240 --> 00:04:24,760
and then take the tech score,
which is something that's

116
00:04:24,760 --> 00:04:27,420
internally computed as it
runs through this tech search.

117
00:04:27,420 --> 00:04:29,360
And we're going to get
that text score out.

118
00:04:29,360 --> 00:04:31,574
And then, we're going to
sort by that tech score.

119
00:04:31,574 --> 00:04:33,490
And we're not going to
test you on the syntax,

120
00:04:33,490 --> 00:04:35,680
but I want you know it
exists if you ever need it.

121
00:04:35,680 --> 00:04:38,680
And if you do that,
you'll see that now it's

122
00:04:38,680 --> 00:04:42,920
ranking the documents in
order of their tech score.

123
00:04:42,920 --> 00:04:45,380
And that if you're
searching for dog,

124
00:04:45,380 --> 00:04:49,160
tree, obsidian, the one with
the highest score, a score of 2,

125
00:04:49,160 --> 00:04:51,680
is a document with dog, tree,
obsidian-- all three words

126
00:04:51,680 --> 00:04:52,430
in it.

127
00:04:52,430 --> 00:04:57,240
Very useful if you want to
find the best match for, let's

128
00:04:57,240 --> 00:05:00,030
say, a document that
contains all the words.

129
00:05:00,030 --> 00:05:00,530
All right.

130
00:05:00,530 --> 00:05:03,490
So now it's time for a quiz.

131
00:05:03,490 --> 00:05:05,070
Let's say you
create a text index

132
00:05:05,070 --> 00:05:07,800
on the title field of
the movies' collection.

133
00:05:07,800 --> 00:05:09,630
You imagine having a
movies' collection.

134
00:05:09,630 --> 00:05:13,310
And then perform the following
text search-- db.movies.find,

135
00:05:13,310 --> 00:05:16,276
$text, $search, "Big Lebowski."

136
00:05:16,276 --> 00:05:17,650
Which of these
documents might be

137
00:05:17,650 --> 00:05:20,990
returned if all these documents
are in the collection?

