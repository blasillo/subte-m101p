1
00:00:00,000 --> 00:00:00,170

2
00:00:00,170 --> 00:00:01,910
Now let's go over mongostat.

3
00:00:01,910 --> 00:00:05,330
Now, mongostat was named
after iostat, again

4
00:00:05,330 --> 00:00:06,740
from the Unix world.

5
00:00:06,740 --> 00:00:09,220
And in the Windows world,
there's a PerfMon program that

6
00:00:09,220 --> 00:00:10,940
you can play with that
does these things

7
00:00:10,940 --> 00:00:12,070
at the system level.

8
00:00:12,070 --> 00:00:14,610
And again, all this performance
stuff, certainly

9
00:00:14,610 --> 00:00:17,780
in a large running system, you
probably have a dedicated

10
00:00:17,780 --> 00:00:20,110
database administrator or DevOps
person that's going to

11
00:00:20,110 --> 00:00:21,650
be worrying about this stuff.

12
00:00:21,650 --> 00:00:24,230
But as a developer, I always
like to be able to just take a

13
00:00:24,230 --> 00:00:25,440
quick look at things.

14
00:00:25,440 --> 00:00:28,100
I work on the small problems, if
not the big ones, just so I

15
00:00:28,100 --> 00:00:30,410
make sure that my code
isn't the problem.

16
00:00:30,410 --> 00:00:32,960
So mongostat is going to
give us a bunch of more

17
00:00:32,960 --> 00:00:34,760
system-level information.

18
00:00:34,760 --> 00:00:37,190
And I'm going to show
you that real fast.

19
00:00:37,190 --> 00:00:38,830
Now, that's going to be a little
hard to show it on the

20
00:00:38,830 --> 00:00:42,360
screen because the fonts
are set very large.

21
00:00:42,360 --> 00:00:44,220
This is wrapped, so
bear with me.

22
00:00:44,220 --> 00:00:48,740
But it's showing you a bunch of
information about how many

23
00:00:48,740 --> 00:00:51,810
queries there are per second,
updates per second, and

24
00:00:51,810 --> 00:00:53,220
flushes per second.

25
00:00:53,220 --> 00:00:57,550
The one that most people are
most interested in or find

26
00:00:57,550 --> 00:01:01,330
most interesting about this
report is this idx miss

27
00:01:01,330 --> 00:01:03,620
percentage.

28
00:01:03,620 --> 00:01:08,250
And idx miss percentage, this
is actually the miss rate to

29
00:01:08,250 --> 00:01:09,730
the index in memory.

30
00:01:09,730 --> 00:01:12,180
So it isn't whether or not
you're using an index.

31
00:01:12,180 --> 00:01:15,590
It's when an index is accessed,
whether or not it

32
00:01:15,590 --> 00:01:18,380
hits memory or not or it
has to go to disk.

33
00:01:18,380 --> 00:01:21,050
Because as we discussed earlier,
having your index in

34
00:01:21,050 --> 00:01:23,080
memory is going to be
critical in terms of

35
00:01:23,080 --> 00:01:24,530
performance in Mongo.

36
00:01:24,530 --> 00:01:28,460
So if you can't get your index
into memory, then you're going

37
00:01:28,460 --> 00:01:29,330
to have a big problem.

38
00:01:29,330 --> 00:01:31,940
So this is telling you whether
your index is in memory.

39
00:01:31,940 --> 00:01:34,090
And a lot of folks will look at
this to figure out whether

40
00:01:34,090 --> 00:01:36,170
or not they're getting good
performance at a high level.

41
00:01:36,170 --> 00:01:37,330
But you have to be a little bit

42
00:01:37,330 --> 00:01:39,910
careful about this because--

43
00:01:39,910 --> 00:01:41,540
let me show you--

44
00:01:41,540 --> 00:01:45,700
in the case where we had these
two programs, PerfMon and that

45
00:01:45,700 --> 00:01:47,690
students.py which was missing
the right indexes.

46
00:01:47,690 --> 00:01:50,550
This thing is dirt slow.

47
00:01:50,550 --> 00:01:55,820
And we'll run mongostat, and
let me show you this here.

48
00:01:55,820 --> 00:01:59,520
It says locked db index miss
percentage right here.

49
00:01:59,520 --> 00:02:00,350
This is the second line.

50
00:02:00,350 --> 00:02:02,450
This is a 0.

51
00:02:02,450 --> 00:02:04,270
We're not missing the index.

52
00:02:04,270 --> 00:02:05,585
Whoa, we're not missing
the index?

53
00:02:05,585 --> 00:02:07,530
That doesn't make any sense.

54
00:02:07,530 --> 00:02:09,150
And the reason we're not missing
the index, of course-

55
00:02:09,150 --> 00:02:10,270
it's true--

56
00:02:10,270 --> 00:02:12,310
is that this program is
not using an index.

57
00:02:12,310 --> 00:02:15,130
This program is just scanning
the collection

58
00:02:15,130 --> 00:02:16,320
over and over again.

59
00:02:16,320 --> 00:02:19,150
So we're not missing an index.

60
00:02:19,150 --> 00:02:22,360
So mongostat, which is very
interesting in large running

61
00:02:22,360 --> 00:02:25,190
systems because usually you
will run out of memory for

62
00:02:25,190 --> 00:02:28,880
your indexes, but this program
doesn't even use an index.

63
00:02:28,880 --> 00:02:31,240
So therefore, this doesn't tell
you anything interesting.

64
00:02:31,240 --> 00:02:32,840
What's more interesting, of
course, is that there were

65
00:02:32,840 --> 00:02:35,900
slow queries and that all the
time in the database was spent

66
00:02:35,900 --> 00:02:37,180
in that one collection.

67
00:02:37,180 --> 00:02:39,230
Now let's run the other program
which we know performs

68
00:02:39,230 --> 00:02:43,080
well and see what it tells us.

69
00:02:43,080 --> 00:02:45,350
That's flying by.

70
00:02:45,350 --> 00:02:50,940
Now let's run mongostat there
and see what it says.

71
00:02:50,940 --> 00:02:52,550
And here--

72
00:02:52,550 --> 00:02:53,620
again, it's wrapped.

73
00:02:53,620 --> 00:02:55,700
But this is the line
right here--

74
00:02:55,700 --> 00:03:02,020
it says idx miss, we are
not missing the index.

75
00:03:02,020 --> 00:03:02,990
I don't understand.

76
00:03:02,990 --> 00:03:04,680
How could you not be
missing the index?

77
00:03:04,680 --> 00:03:05,860
Well the reason is
this program is

78
00:03:05,860 --> 00:03:06,640
not missing the index.

79
00:03:06,640 --> 00:03:09,970
This program has an
index that is--

80
00:03:09,970 --> 00:03:12,330
we learned how to get
the index size.

81
00:03:12,330 --> 00:03:14,540
I think it's a gig or two.

82
00:03:14,540 --> 00:03:15,800
If you can look at the activity
monitor to see how

83
00:03:15,800 --> 00:03:18,090
big Mongo is right now,
let's do that.

84
00:03:18,090 --> 00:03:21,360
It says that it's 2.85 gigs.

85
00:03:21,360 --> 00:03:22,740
And mongostat will
also tell you.

86
00:03:22,740 --> 00:03:25,050
See, mongostat tells you
that there's 2.85

87
00:03:25,050 --> 00:03:27,290
gigs of data resident.

88
00:03:27,290 --> 00:03:29,570
And this is a Mac that has
12 gigs of memory,

89
00:03:29,570 --> 00:03:31,850
so it's not a problem.

90
00:03:31,850 --> 00:03:35,360
So this won't point us to any
place where we could improve

91
00:03:35,360 --> 00:03:36,450
that program.

92
00:03:36,450 --> 00:03:38,830
Now the reality is I don't
know how to improve that

93
00:03:38,830 --> 00:03:40,750
program except for do something
algorithmically

94
00:03:40,750 --> 00:03:43,390
smarter because it is hitting
the index every time.

95
00:03:43,390 --> 00:03:46,910
But it'll be difficult for me
to show you a program that's

96
00:03:46,910 --> 00:03:50,150
going to miss the index in my
12 gigabyte machine unless I

97
00:03:50,150 --> 00:03:52,770
deliberately create something
that's humongous and

98
00:03:52,770 --> 00:03:53,920
deliberately going to miss it.

99
00:03:53,920 --> 00:03:56,330
If you go into documentation,
you can see some snapshots of

100
00:03:56,330 --> 00:03:59,180
large running systems that
do miss in their index.

101
00:03:59,180 --> 00:04:01,220
But I just wanted to make you
aware of this mongostat

102
00:04:01,220 --> 00:04:03,950
command which can be used at
the highest level of your

103
00:04:03,950 --> 00:04:07,430
system to look at the overall
performance of your Mongo

104
00:04:07,430 --> 00:04:08,680
installation.