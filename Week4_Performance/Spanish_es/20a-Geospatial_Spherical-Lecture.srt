1
00:00:00,000 --> 00:00:00,100
 

2
00:00:00,100 --> 00:00:02,190
Muy bien, ahora que hemos
hablado acerca de cómo

3
00:00:02,190 --> 00:00:05,230
buscar ubicaciones
usando un índice 2D,

4
00:00:05,230 --> 00:00:07,820
quiero abarcar un tipo
de indexación geospacial

5
00:00:07,820 --> 00:00:11,590
más sofisticado-- una
indexación esférica geoespacial

6
00:00:11,590 --> 00:00:14,290
que también está
soportada en MongoDB.

7
00:00:14,290 --> 00:00:17,530
Ahora, para empezar, antes de
poder hablar acerca de buscar cosas

8
00:00:17,530 --> 00:00:20,530
en 3D, tienes que hablar
acerca de cómo describes

9
00:00:20,530 --> 00:00:22,970
la ubicación en algo en 3D.

10
00:00:22,970 --> 00:00:24,980
El mundo en realidad es un globo,

11
00:00:24,980 --> 00:00:27,990
ésta es mi pobre
representación del globo,

12
00:00:27,990 --> 00:00:30,700
y las ubicaciones en el
globo son representadas

13
00:00:30,700 --> 00:00:33,610
por longitud y latitud.

14
00:00:33,610 --> 00:00:39,250
Entonces, si recuerdas, latitud
es qué tan lejos del ecuador

15
00:00:39,250 --> 00:00:40,180
está el objeto.

16
00:00:40,180 --> 00:00:44,060
Por ejemplo, el ecuador está
en una latitud de cero grados,

17
00:00:44,060 --> 00:00:48,940
y puedes ir por todo el camino
desde -90 grados a 90 grados.

18
00:00:48,940 --> 00:00:51,050
Y esas son tus líneas de latitud.

19
00:00:51,050 --> 00:00:53,220
Y luego tenemos la longitud.

20
00:00:53,220 --> 00:00:56,100
Y la longitud-- esto es un
montón de longitudes aquí.

21
00:00:56,100 --> 00:00:58,790
Esto describe una línea
que va desde el norte

22
00:00:58,790 --> 00:01:00,320
hasta el polo sur.

23
00:01:00,320 --> 00:01:01,870
Por lo que para poder
describir la ubicación

24
00:01:01,870 --> 00:01:03,800
de cualquier objeto en
particular en la tierra,

25
00:01:03,800 --> 00:01:06,720
necesitas su latitud
y su longitud.

26
00:01:06,720 --> 00:01:08,310
Ahora, adicionalmente,
vamos a necesitar

27
00:01:08,310 --> 00:01:11,510
una manera de indexar
estos documentos que

28
00:01:11,510 --> 00:01:13,489
tienen latitudes y longitudes.

29
00:01:13,489 --> 00:01:15,030
Y la manera en que
vamos a hacer eso es

30
00:01:15,030 --> 00:01:17,910
con un nuevo tipo especial
de índice llamado "2dsphere".

31
00:01:17,910 --> 00:01:20,100
Entonces hablemos de cómo
vamos a hacer esto.

32
00:01:20,100 --> 00:01:22,990
Y creo que la manera más fácil de
entenderlo es a través de un ejemplo.

33
00:01:22,990 --> 00:01:26,550
Veamos un ejemplo de
unas ubicaciones que

34
00:01:26,550 --> 00:01:28,130
han sido puestos en
documentos de MongoDB.

35
00:01:28,130 --> 00:01:29,671
Vamos a buscar cerca
de una ubicación

36
00:01:29,671 --> 00:01:31,320
para encontrar
ubicaciones más cercanas.

37
00:01:31,320 --> 00:01:33,890
Y vamos a usar un índice
"2dsphere" para hacerlo.

38
00:01:33,890 --> 00:01:36,060
Empecemos con las ubicaciones.

39
00:01:36,060 --> 00:01:37,280
Aquí está Palo Alto.

40
00:01:37,280 --> 00:01:40,870
Y en Palo Alto tenemos cuatro
ubicaciones que están cerca

41
00:01:40,870 --> 00:01:42,194
y me son muy queridas.

42
00:01:42,194 --> 00:01:43,610
Tenemos Fry's
Electronics, donde

43
00:01:43,610 --> 00:01:46,040
solía comprar pequeños componentes
electrónicos antes que la gente

44
00:01:46,040 --> 00:01:48,460
dejara de construir todo,
a fines de los 90.

45
00:01:48,460 --> 00:01:49,860
Y Península Creamery, donde

46
00:01:49,860 --> 00:01:52,160
puedes conseguir un gran batido
de leche y una hamburguesa;

47
00:01:52,160 --> 00:01:54,800
El Apple store, donde puedes
gastar un montón de dinero;

48
00:01:54,800 --> 00:01:57,910
y Hoover Tower, que es un
monumento a la derecha

49
00:01:57,910 --> 00:01:59,644
en el centro del
campus de Stanford.

50
00:01:59,644 --> 00:02:01,060
Y luego hay una ubicación más

51
00:02:01,060 --> 00:02:06,090
que puse en mi pequeño mapa
que es el Mount Tamalpais State

52
00:02:06,090 --> 00:02:08,150
Park-- en la cima del
Mount Tam donde

53
00:02:08,150 --> 00:02:11,330
me comprometí, así también es un
lugar cercano y muy querido por mi,

54
00:02:11,330 --> 00:02:13,220
un poco más lejos de Stanford.

55
00:02:13,220 --> 00:02:15,180
Y vamos a poner
documentos en MongoDB

56
00:02:15,180 --> 00:02:17,135
que representan estas ubicaciones.

57
00:02:17,135 --> 00:02:19,010
Muy bien, lo primero
que quiero mostrarte

58
00:02:19,010 --> 00:02:22,630
es que Google Maps es muy
conveniente para encontrar

59
00:02:22,630 --> 00:02:25,110
la latitud y longitud
para ubicaciones.

60
00:02:25,110 --> 00:02:27,100
Así que busquemos
Times Square, que

61
00:02:27,100 --> 00:02:28,840
es donde ahora mismo estamos.

62
00:02:28,840 --> 00:02:33,040
Verás que lo que Google Maps
hará es, en la URL del navegador,

63
00:02:33,040 --> 00:02:35,440
te mostrará en realidad-- y estamos

64
00:02:35,440 --> 00:02:36,860
por aquí en alguna parte.

65
00:02:36,860 --> 00:02:39,840
Te mostrará la
latitud y la longitud.

66
00:02:39,840 --> 00:02:43,940
Ahora, esto te lo muestra en
latitud, coma, longitud.

67
00:02:43,940 --> 00:02:48,480
Así que la latitud es 40.75
aquí, y la longitud

68
00:02:48,480 --> 00:02:50,400
es -73.98.

69
00:02:50,400 --> 00:02:51,900
Esto está en el orden
opuesto al que

70
00:02:51,900 --> 00:02:54,310
vas a necesitar cuando
lo especifiques en MongoDB.

71
00:02:54,310 --> 00:02:57,334
MongoDB toma una
longitud, coma, latitud.

72
00:02:57,334 --> 00:02:58,875
Muy bien, ¿cómo vamos a

73
00:02:58,875 --> 00:03:01,290
especificar sus ubicaciones?

74
00:03:01,290 --> 00:03:05,940
Bueno, usamos una especificación
para ubicaciones llamada GeoJSON.

75
00:03:05,940 --> 00:03:08,480
Y vamos a mostrártelo
ahora mismo.

76
00:03:08,480 --> 00:03:11,590
Esto es una página web
sobre GeoJSON, geojson.org.

77
00:03:11,590 --> 00:03:14,410
Implementamos sólo una pequeña
parte de la especificación

78
00:03:14,410 --> 00:03:15,862
en GeoJSON.

79
00:03:15,862 --> 00:03:17,320
Pero si deseas, puedes
echarle un vistazo

80
00:03:17,320 --> 00:03:18,890
y ver la especificación completa.

81
00:03:18,890 --> 00:03:20,560
En concreto, las partes
en las que vamos

82
00:03:20,560 --> 00:03:22,710
a estar más interesados
son aquellas

83
00:03:22,710 --> 00:03:25,920
que especifican puntos
y geometrías.

84
00:03:25,920 --> 00:03:28,150
Puedes ver que hay
coordenadas y listas

85
00:03:28,150 --> 00:03:29,060
de coordenadas.

86
00:03:29,060 --> 00:03:31,880
Es una cosa algo complicada
cuando empiezas, especialmente

87
00:03:31,880 --> 00:03:33,585
si deseas describir un polígono.

88
00:03:33,585 --> 00:03:36,210
Vamos a hacer solamente una
lección introductoria aquí

89
00:03:36,210 --> 00:03:36,800
ahora mismo.

90
00:03:36,800 --> 00:03:38,425
Y luego vas a poder
profundizar si

91
00:03:38,425 --> 00:03:40,920
quieres ver cuáles son todas
las distintas posibilidades.

92
00:03:40,920 --> 00:03:43,130
MongoDB sólo soporta un
subconjunto de estos,

93
00:03:43,130 --> 00:03:45,860
como puntos y polígonos.

94
00:03:45,860 --> 00:03:49,660
Y no soportamos algunas de las
más complejas estructuras.

95
00:03:49,660 --> 00:03:52,770
Muy bien, vayamos
a MongoDB ahora

96
00:03:52,770 --> 00:03:54,490
y veamos nuestros documentos.

97
00:03:54,490 --> 00:03:57,280
Los he puesto en una
colección llamada "places"

98
00:03:57,280 --> 00:03:58,760
Aquí vamos.

99
00:03:58,760 --> 00:04:00,700
Voy a imprimirlos
elegantemente.

100
00:04:00,700 --> 00:04:04,130
Veamos el formato
GeoJSON en acción.

101
00:04:04,130 --> 00:04:07,120
Aquí tenemos el Apple store.

102
00:04:07,120 --> 00:04:10,290
Decidí especificar
la ciudad de Palo Alto.

103
00:04:10,290 --> 00:04:13,670
Decidí poner mi información
de ubicación GeoJSON

104
00:04:13,670 --> 00:04:15,029
en una clave llamada "location".

105
00:04:15,029 --> 00:04:16,029
Esta es decisión mía.

106
00:04:16,029 --> 00:04:17,190
Es arbitraria.

107
00:04:17,190 --> 00:04:18,950
Puedes llamarla de la
manera que desees.

108
00:04:18,950 --> 00:04:20,240
Pero la llamé "location".

109
00:04:20,240 --> 00:04:21,779
Y luego todo lo que está
después de este paréntesis

110
00:04:21,779 --> 00:04:24,830
y antes de este otro,
es un documento GeoJSON.

111
00:04:24,830 --> 00:04:27,770
En este caso, he decidido
describirlo usando un punto.

112
00:04:27,770 --> 00:04:29,520
Podrías también describirlo
usando un polígono

113
00:04:29,520 --> 00:04:31,000
si deseas darle algún área,

114
00:04:31,000 --> 00:04:33,330
pero decidí usar un punto.

115
00:04:33,330 --> 00:04:35,600
El "type" es una palabra
reservada, y "coordinates"

116
00:04:35,600 --> 00:04:36,450
también lo es.

117
00:04:36,450 --> 00:04:38,040
"Point" es una palabra reservada.

118
00:04:38,040 --> 00:04:40,520
Y aquí están las coordenadas
en longitud, coma,

119
00:04:40,520 --> 00:04:42,960
latitud, que es lo
que obtuve de Google Maps.

120
00:04:42,960 --> 00:04:45,370
Decidí poner esto
como una tienda "Retail"

121
00:04:45,370 --> 00:04:46,571
en la colección.

122
00:04:46,571 --> 00:04:48,570
Una vez más, tengo cuatro
objetos en la colección.

123
00:04:48,570 --> 00:04:52,870
Tenemos este Apple store,
Península Creamery,

124
00:04:52,870 --> 00:04:55,040
y Fry's Electronics.

125
00:04:55,040 --> 00:04:58,630
Y luego finalmente, Mount
Tamalpais State Park.

126
00:04:58,630 --> 00:05:00,470
De acuerdo, para poder
consultar esto, vamos

127
00:05:00,470 --> 00:05:04,660
a necesitar un índice
en los documentos GeoJSON.

128
00:05:04,660 --> 00:05:08,770
Hagamos eso--
"db.places.ensureIndex".

129
00:05:08,770 --> 00:05:11,370
Y va a ser en "location".

130
00:05:11,370 --> 00:05:14,350
Y será de tipo "2dsphere".

131
00:05:14,350 --> 00:05:16,560
Nunca entendí por qué
esto se llama "2dsphere".

132
00:05:16,560 --> 00:05:18,840
Me parece que si tienes
una esfera de dos dimensiones,

133
00:05:18,840 --> 00:05:20,940
eso sería un círculo.

134
00:05:20,940 --> 00:05:23,280
Pero lo que creo que está
intentando expresar aquí

135
00:05:23,280 --> 00:05:26,180
es que aunque
es un modelo 3D--

136
00:05:26,180 --> 00:05:28,150
es un modelo esférico--
que sólo va a

137
00:05:28,150 --> 00:05:30,580
buscar puntos en la
superficie de la esfera

138
00:05:30,580 --> 00:05:32,050
en lugar que en el aire.

139
00:05:32,050 --> 00:05:34,150
Así que ese es el motivo por
el cual se llama "2dsphere".

140
00:05:34,150 --> 00:05:35,430
Vamos a añadirlo.

141
00:05:35,430 --> 00:05:38,300
Y ahora hay dos
índices en la colección,

142
00:05:38,300 --> 00:05:39,240
así que está todo bien.

143
00:05:39,240 --> 00:05:40,612
Previamente, había uno.

144
00:05:40,612 --> 00:05:41,820
Podría mostrarte los índices.

145
00:05:41,820 --> 00:05:43,870
Espera, "getIndexes".

146
00:05:43,870 --> 00:05:47,760
Los índices son, este índice en "_id",
que siempre viene en toda colección,

147
00:05:47,760 --> 00:05:50,760
y luego este índice en "location".

148
00:05:50,760 --> 00:05:53,050
Pues ¿qué consulta
podríamos ejecutar?

149
00:05:53,050 --> 00:05:55,330
Bueno, quiero conocer
lo que está más cerca a mí,

150
00:05:55,330 --> 00:05:58,260
y estoy en Hoover Tower,
en mi imaginación.

151
00:05:58,260 --> 00:06:00,537
Vayamos a hacer eso.

152
00:06:00,537 --> 00:06:02,120
Voy a salir del shell aquí.

153
00:06:02,120 --> 00:06:05,200
Y tengo una consulta
que ha sido escrita y que

154
00:06:05,200 --> 00:06:07,410
ya es un poco más
fácil de seguir.

155
00:06:07,410 --> 00:06:10,780
Esta consulta va a buscar
en la colección "places",

156
00:06:10,780 --> 00:06:12,620
justo aquí y hacer un "find".

157
00:06:12,620 --> 00:06:15,590
Vamos a encontrar
documentos por "location",

158
00:06:15,590 --> 00:06:17,500
que es el campo que
creamos para mantener

159
00:06:17,500 --> 00:06:19,890
las ubicaciones de
varias tiendas.

160
00:06:19,890 --> 00:06:22,520
Y vamos a usar el
operador "$near".

161
00:06:22,520 --> 00:06:26,190
Ahora, el operador
"$near" va a buscar

162
00:06:26,190 --> 00:06:30,470
por todo lo cercano a
un punto, en este caso.

163
00:06:30,470 --> 00:06:33,490
Ahora, este "$geometry"
es un operador necesario

164
00:06:33,490 --> 00:06:35,860
y puedes también dar
"$maxDistance", que es

165
00:06:35,860 --> 00:06:38,020
la distancia máxima en metros.

166
00:06:38,020 --> 00:06:39,490
Le digo 2000 metros.

167
00:06:39,490 --> 00:06:44,410
Búscame todo lo que está más
cerca a estas coordenadas--

168
00:06:44,410 --> 00:06:51,210
-122.166641 grados de longitud
y 37.427 grados

169
00:06:51,210 --> 00:06:52,745
blablablá, de latitud.

170
00:06:52,745 --> 00:06:54,620
Y esas son las coordenadas
de Hoover Tower

171
00:06:54,620 --> 00:06:56,380
que obtuve de Google Maps.

172
00:06:56,380 --> 00:07:00,010
Otra vez, veamos sólo el
formato de esto, hicimos un "find".

173
00:07:00,010 --> 00:07:02,690
Especificamos que estamos
buscando en el campo "location".

174
00:07:02,690 --> 00:07:04,880
Estamos aplicando
el operador "$near".

175
00:07:04,880 --> 00:07:07,680
Y entonces, tenemos
un documento GeoJSON

176
00:07:07,680 --> 00:07:11,230
que especifica el
"$geometry" de tipo "Point"

177
00:07:11,230 --> 00:07:12,650
con estas coordenadas.

178
00:07:12,650 --> 00:07:13,760
Y eso es.

179
00:07:13,760 --> 00:07:15,660
Así que veamos lo que
obtenemos al hacer esto.

180
00:07:15,660 --> 00:07:18,820
mongo-- voy a redirigir

181
00:07:18,820 --> 00:07:22,210
desde este archivo para
ejecutar una consulta.

182
00:07:22,210 --> 00:07:27,210
Y parece que obtenemos
dos documentos.

183
00:07:27,210 --> 00:07:29,830
Y estos van a ser ordenados
desde el más cercano

184
00:07:29,830 --> 00:07:32,792
hasta el más lejano, que es una
característica del operador "$near".

185
00:07:32,792 --> 00:07:34,500
El primero es
Península Creamery--

186
00:07:34,500 --> 00:07:37,400
y es, de hecho, el más cercano
a Hoover Tower-- y luego

187
00:07:37,400 --> 00:07:40,620
Apple store, que también está
entre los 2000 metros de Hoover

188
00:07:40,620 --> 00:07:41,500
Tower.

189
00:07:41,500 --> 00:07:43,240
Date cuenta que ni
consideró Fry's, ni

190
00:07:43,240 --> 00:07:48,100
Mount Tamalpais por estar
fuera de los 2000 metros.

191
00:07:48,100 --> 00:07:50,230
Y revisemos esto
contigo para mostrarte

192
00:07:50,230 --> 00:07:53,050
el mapa una vez más para ver que
esta es la respuesta correcta.

193
00:07:53,050 --> 00:07:55,650
Recuerda, estamos buscando
lo más cercano a Hover Tower.

194
00:07:55,650 --> 00:07:57,920
Y quiere decir a 2000 metros,

195
00:07:57,920 --> 00:08:00,500
has obtenido la Península Creamery
como la ubicación más cercana,

196
00:08:00,500 --> 00:08:02,360
y Apple store, la
siguiente más cercana.

197
00:08:02,360 --> 00:08:05,542
Fry's y Mount Tamalpais
están fuera de la pantalla.

198
00:08:05,542 --> 00:08:07,750
Fry's está en la pantalla,
pero fuera del radio de búsqueda.

199
00:08:07,750 --> 00:08:10,500
Y Mount Tam está completamente
fuera de la pantalla.

200
00:08:10,500 --> 00:08:12,050
Y eso es en realidad cómo

201
00:08:12,050 --> 00:08:14,630
buscaría algo usando
el operador "$near".

202
00:08:14,630 --> 00:08:16,550
De nuevo, los secretos son que

203
00:08:16,550 --> 00:08:19,090
necesitas saber la latitud y
longitud de tus documentos.

204
00:08:19,090 --> 00:08:23,590
También necesitas
crear un índice "2dsphere"

205
00:08:23,590 --> 00:08:25,850
si quieres usar el
operador "$near".

206
00:08:25,850 --> 00:08:27,750
Algunos de los
operadores no requieren

207
00:08:27,750 --> 00:08:30,560
tener un índice,
como por ejemplo,

208
00:08:30,560 --> 00:08:32,480
encontrar algo que está
dentro de una forma.

209
00:08:32,480 --> 00:08:34,059
Pero todos ellos
rendirán mejor si

210
00:08:34,059 --> 00:08:35,372
hay un índice en "location".

211
00:08:35,372 --> 00:08:37,580
Luego necesitas, por supuesto,
insertar las ubicaciones

212
00:08:37,580 --> 00:08:39,030
y realizar la consulta.

213
00:08:39,030 --> 00:08:42,084
OK, hagamos un cuestionario.

214
00:08:42,084 --> 00:08:44,000
¿Qué consultará una colección

215
00:08:44,000 --> 00:08:46,150
llamada "stores" para retornar
las tiendas que están dentro

216
00:08:46,150 --> 00:08:49,780
de un millón de metros desde
la ubicación en esta latitud

217
00:08:49,780 --> 00:08:53,700
y esta longitud?
Latitud 39, longitud -130.

218
00:08:53,700 --> 00:08:56,050
Escribe la consulta en la
caja de abajo y asume

219
00:08:56,050 --> 00:08:59,052
que la colección "stores"
ya tiene un índice en ella,

220
00:08:59,052 --> 00:09:01,210
en la clave "location".

221
00:09:01,210 --> 00:09:04,159
Y utiliza el operador "$near",
como lo hice en esta lección.

222
00:09:04,159 --> 00:09:06,200
Y si deseas ver cómo
se ven los documentos,

223
00:09:06,200 --> 00:09:08,180
este es un documento de ejemplo.

224
00:09:08,180 --> 00:09:12,220
Podría tener un "_id" que luce
así, con un "store_id" de 8

225
00:09:12,220 --> 00:09:15,920
y un "location" de tipo "Point",
y esas son las coordenadas.

226
00:09:15,920 --> 00:09:18,270
Tienes que escribir la
consulta justo aquí.

227
00:09:18,270 --> 00:09:20,104
Y luego presiona "Return" y
mira si esto es correcto.

228
00:09:20,104 --> 00:09:22,769
Tienes que ser muy cuidadoso
para asegurarte que sea exactamente

229
00:09:22,769 --> 00:09:25,340
lo mismo que vamos a
validar con el patrón. 
