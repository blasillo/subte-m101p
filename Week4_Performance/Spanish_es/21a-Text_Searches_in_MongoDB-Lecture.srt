1
00:00:00,000 --> 00:00:00,100

2
00:00:00,100 --> 00:00:00,380
Bien.

3
00:00:00,380 --> 00:00:01,963
Hablemos acerca de
otro tipo de índice

4
00:00:01,963 --> 00:00:03,930
que puede ser muy útil
cuando trabajas con texto.

5
00:00:03,930 --> 00:00:06,510
Se llama índice de búsqueda de
texto completo (full text search).

6
00:00:06,510 --> 00:00:08,160
La búsqueda de texto
completo fue introducida

7
00:00:08,160 --> 00:00:11,450
en MongoDB 2.4 de
manera experimental.

8
00:00:11,450 --> 00:00:13,790
Ahora está disponible
para su uso general

9
00:00:13,790 --> 00:00:16,090
en MongoDB 2.6.

10
00:00:16,090 --> 00:00:18,610
Entonces, ¿por qué
y para qué lo usarías?

11
00:00:18,610 --> 00:00:21,230
Bueno, supongamos que tuvieras
un texto bastante extenso

12
00:00:21,230 --> 00:00:23,470
que está en un documento, algo
como la Constitución de los EE.UU.,

13
00:00:23,470 --> 00:00:26,410
que empieza con:
"We the people of the United

14
00:00:26,410 --> 00:00:29,340
States, in order to form
a more perfect union".

15
00:00:29,340 --> 00:00:32,580
Supongamos que tuvieras ese
documento, justo aquí, en una

16
00:00:32,580 --> 00:00:34,150
clave llamada "mytext".

17
00:00:34,150 --> 00:00:36,475
Y que tuvieras el preámbulo completo
de la Constitución de EE.UU.

18
00:00:36,475 --> 00:00:38,590
en esta clave, "mytext".

19
00:00:38,590 --> 00:00:40,280
Supongamos que quisieras buscarlo.

20
00:00:40,280 --> 00:00:43,450
Bueno, si simplemente
buscas una palabra dada,

21
00:00:43,450 --> 00:00:45,240
entonces no obtendrías nada,

22
00:00:45,240 --> 00:00:47,450
porque MongoDB, cuando
buscas en cadenas,

23
00:00:47,450 --> 00:00:49,332
la cadena completa
necesita estar ahí.

24
00:00:49,332 --> 00:00:51,540
Así que como alternativa,
podrías poner cada palabra individual

25
00:00:51,540 --> 00:00:55,380
en un array, y a continuación usar
los operadores de conjuntos

26
00:00:55,380 --> 00:00:58,442
para añadirle cosas,
y luego buscar si las

27
00:00:58,442 --> 00:00:59,400
palabras están incluidas o no.

28
00:00:59,400 --> 00:01:01,222
Pero eso es muy laborioso.

29
00:01:01,222 --> 00:01:03,680
Y existen algunas otras características
que echaríamos en falta.

30
00:01:03,680 --> 00:01:06,270
Así que en lugar de esto,
lo que tenemos es algo

31
00:01:06,270 --> 00:01:08,510
llamado índice de búsqueda
de texto completo, abreviado

32
00:01:08,510 --> 00:01:12,410
como "text", que indexará
este documento entero y cada

33
00:01:12,410 --> 00:01:14,190
palabra, de la forma
en que se indexa un array,

34
00:01:14,190 --> 00:01:17,790
permitiendo hacer consultas
dentro del texto,

35
00:01:17,790 --> 00:01:19,950
básicamente aplicando
el operador "or",

36
00:01:19,950 --> 00:01:23,240
y buscando una palabra
entre muchas.

37
00:01:23,240 --> 00:01:25,590
Veamos ahora un caso específico

38
00:01:25,590 --> 00:01:27,350
para ver cómo funcionaría.

39
00:01:27,350 --> 00:01:27,850
Bien.

40
00:01:27,850 --> 00:01:29,780
Hemos creado una colección
llamada "sentences".

41
00:01:29,780 --> 00:01:33,110
Esta colección contiene un
montón de palabras insertadas

42
00:01:33,110 --> 00:01:36,380
aleatoriamente en una clave "words".

43
00:01:36,380 --> 00:01:38,080
Ahora, si quisiera
buscar -- no hay

44
00:01:38,080 --> 00:01:40,100
índice de búsqueda de texto
completo, por ahora.

45
00:01:40,100 --> 00:01:41,470
Esta es una colección normal.

46
00:01:41,470 --> 00:01:45,030
Si quisiera buscar, por
ejemplo, "dog shrub ruby.",

47
00:01:45,030 --> 00:01:45,670
podría hacerlo.

48
00:01:45,670 --> 00:01:47,660
Podría buscarlas. Bien.

49
00:01:47,660 --> 00:01:48,820
Allá vamos.

50
00:01:48,820 --> 00:01:50,730
Busqué "dog shrub ruby.",

51
00:01:50,730 --> 00:01:54,120
y encontré este documento con
las palabaras "dog", "shrub", "ruby".

52
00:01:54,120 --> 00:01:55,390
Pero es muy particular.

53
00:01:55,390 --> 00:01:58,010
Si elimino el punto,
no lo encuentra.

54
00:01:58,010 --> 00:02:01,720
Si simplemente pongo "dog ruby",
no lo encuentra.

55
00:02:01,720 --> 00:02:04,660
Y si sólo pongo "dog",
no lo encuentra.

56
00:02:04,660 --> 00:02:06,620
Esto no va a funcionar
muy bien para buscar

57
00:02:06,620 --> 00:02:09,770
estas palabras distintas.

58
00:02:09,770 --> 00:02:12,480
Ahora, añadamos un índice "text",
"db.sentences.ensureIndex".

59
00:02:12,480 --> 00:02:15,440


60
00:02:15,440 --> 00:02:20,500
Quiero crear un índice
de tipo "text" sobre "words".

61
00:02:20,500 --> 00:02:21,380
Allá vamos.

62
00:02:21,380 --> 00:02:24,480
Ahora, cuando hago la búsqueda
-- "dog shrub ruby" --

63
00:02:24,480 --> 00:02:26,240
va a funcionar mucho mejor.

64
00:02:26,240 --> 00:02:27,910
Hagamos eso.

65
00:02:27,910 --> 00:02:29,630
Veamos primero la sintaxis

66
00:02:29,630 --> 00:02:31,560
para buscar en un índice
de búsqueda de texto completo.

67
00:02:31,560 --> 00:02:34,130
La forma en que funciona es,
tengo que poner "$text",

68
00:02:34,130 --> 00:02:39,350
y luego pasar un documento
-- teníamos "$search" -- y luego

69
00:02:39,350 --> 00:02:40,350
lo que estamos buscando.

70
00:02:40,350 --> 00:02:43,170
Vimos que, por ejemplo,
"dog" no funcionó antes.

71
00:02:43,170 --> 00:02:46,420
Busquemos ahora sólo "dog"
y veamos si funciona.

72
00:02:46,420 --> 00:02:47,130
Allá vamos.

73
00:02:47,130 --> 00:02:47,680
OK.

74
00:02:47,680 --> 00:02:49,650
Ahora busqué sólo
la palabra "dog"

75
00:02:49,650 --> 00:02:52,510
y pude recuperar todos estos
documentos que contienen

76
00:02:52,510 --> 00:02:54,010
"dog moss ruby",
"dog shrub ruby".

77
00:02:54,010 --> 00:02:56,390
A continuación, sólo para que lo
veas de nuevo, cuando busco

78
00:02:56,390 --> 00:02:59,750
"dog" usando una búsqueda
normal sobre "words",

79
00:02:59,750 --> 00:03:01,580
no obtengo nada.

80
00:03:01,580 --> 00:03:03,684
Pero si busco usando
un índice "text" -- voy

81
00:03:03,684 --> 00:03:05,100
a enseñarte la
sintaxis justo aquí --

82
00:03:05,100 --> 00:03:07,700
busco usando un índice "text"

83
00:03:07,700 --> 00:03:10,860
especificando "$text" y
luego "$search", y a continuación

84
00:03:10,860 --> 00:03:13,811
lo que estoy buscando -- "dog" --
y obtengo los documentos.

85
00:03:13,811 --> 00:03:15,810
Obtengo todos estos documentos,
porque todos ellos contienen

86
00:03:15,810 --> 00:03:17,080
"dog".

87
00:03:17,080 --> 00:03:22,425
Y si además pongo "moss", también
obtengo todos estos documentos.

88
00:03:22,425 --> 00:03:25,750
Y si pongo "moss ruby", voy
a obtener todos estos documentos.

89
00:03:25,750 --> 00:03:27,810
Es bastante flexible.

90
00:03:27,810 --> 00:03:30,470
Incluir un punto no
cambia el comportamiento.

91
00:03:30,470 --> 00:03:32,620
La capitalización
tampoco afecta.

92
00:03:32,620 --> 00:03:36,330
Así que también va a ignorar
ciertas palabras de parada que no

93
00:03:36,330 --> 00:03:38,780
son consideradas significantes,
como "a" y "the"

94
00:03:38,780 --> 00:03:40,240
en inglés.

95
00:03:40,240 --> 00:03:42,150
Estos es realmente
muy útil si quiero

96
00:03:42,150 --> 00:03:44,590
buscar un montón de
palabras diferentes

97
00:03:44,590 --> 00:03:47,650
y esencialmente aplicar
un operador lógico "or".

98
00:03:47,650 --> 00:03:49,770
Hay otra cosa más que
quería enseñarte,

99
00:03:49,770 --> 00:03:52,720
y es cómo puedes obtener
todo esto en un orden que

100
00:03:52,720 --> 00:03:56,240
indique cómo de buena cree
MongoDB que es la coincidencia.

101
00:03:56,240 --> 00:03:58,040
Busquemos uno de estos.

102
00:03:58,040 --> 00:04:00,830
Voy a enseñarte la
sintaxis de este.

103
00:04:00,830 --> 00:04:01,400
Bien.

104
00:04:01,400 --> 00:04:04,120
Busquemos "dog tree obsidian".

105
00:04:04,120 --> 00:04:05,100
OK.

106
00:04:05,100 --> 00:04:06,210
"dog tree obsidian".

107
00:04:06,210 --> 00:04:07,901
Permíteme que vuelva a cambiar esto.

108
00:04:07,901 --> 00:04:09,650
Podemos ver el
documento justo aquí

109
00:04:09,650 --> 00:04:11,210
con "dog tree obsidian".

110
00:04:11,210 --> 00:04:13,330
Quiero decir que la mejor coincidencia
para "dog tree obsidian"

111
00:04:13,330 --> 00:04:15,157
debería ser el documento con
"dog tree obsidian".

112
00:04:15,157 --> 00:04:16,990
Pero ahora vamos
a hacer algo especial.

113
00:04:16,990 --> 00:04:19,769
Vamos a proyectar
el campo "score".

114
00:04:19,769 --> 00:04:22,240
Y vamos a usar un
operador especial, "$meta",

115
00:04:22,240 --> 00:04:24,760
y luego tomaremos el "textScore",
que es algo que se calcula

116
00:04:24,760 --> 00:04:27,420
internamente a medida que se ejecuta
la búsqueda de texto completo.

117
00:04:27,420 --> 00:04:29,360
Y vamos a recuperar
ese campo "textScore".

118
00:04:29,360 --> 00:04:31,574
Luego, vamos a ordenar
por ese "textScore".

119
00:04:31,574 --> 00:04:33,490
Y no vamos a preguntarte
sobre la sintaxis,

120
00:04:33,490 --> 00:04:35,680
pero quiero que sepas que existe,
por si alguna vez lo necesitas.

121
00:04:35,680 --> 00:04:38,680
Si haces eso,
verás ahora que

122
00:04:38,680 --> 00:04:42,920
está ordenando los documentos
según su campo "textScore".

123
00:04:42,920 --> 00:04:45,380
Y si estás buscando

124
00:04:45,380 --> 00:04:49,160
"dog tree obsidian", el documento
con mayor "score", 2, es un

125
00:04:49,160 --> 00:04:51,680
documento con "dog tree
obsidian" -- contiene las

126
00:04:51,680 --> 00:04:52,430
tres palabras.

127
00:04:52,430 --> 00:04:57,240
Muy útil si quieres encontrar
la mejor coincidencia para,

128
00:04:57,240 --> 00:05:00,030
por ejemplo, un documento que
contenga todas las palabras.

129
00:05:00,030 --> 00:05:00,530
Bien.

130
00:05:00,530 --> 00:05:03,490
Hora de hacer un cuestionario.

131
00:05:03,490 --> 00:05:05,070
Supongamos que
creas un índice "text"

132
00:05:05,070 --> 00:05:07,800
sobre el campo "title" de
la colección "movies".

133
00:05:07,800 --> 00:05:09,630
Imagina que tienes una
colección "movies".

134
00:05:09,630 --> 00:05:13,310
Luego realiza la siguiente
búsqueda de texto

135
00:05:13,310 --> 00:05:16,276
"db.movies.find({$text:
{$search: 'Big Lebowski'}})".

136
00:05:16,276 --> 00:05:17,650
¿Cuáles de estos documentos
podrían ser recuperados si

137
00:05:17,650 --> 00:05:20,990
todos ellos están en la colección?
