1
00:00:00,000 --> 00:00:00,500

2
00:00:00,500 --> 00:00:02,560
OK. Te hemos mostrado cómo
crear índices únicos y

3
00:00:02,560 --> 00:00:05,270
ahora quiero hablarte sobre

4
00:00:05,270 --> 00:00:07,480
índices dispersos, los
cuales pueden ser usados

5
00:00:07,480 --> 00:00:10,400
para crear índices únicos cuando
la clave indexada no está

6
00:00:10,400 --> 00:00:11,760
presente en el documento.

7
00:00:11,760 --> 00:00:13,520
Veamos estos cuatro documentos,

8
00:00:13,520 --> 00:00:15,300
éstos cuatro. El primero

9
00:00:15,300 --> 00:00:19,290
tiene las claves "A", "B" y "C",
el segundo tiene "A", "B" y "C",

10
00:00:19,290 --> 00:00:22,950
el tercero sólo tiene "A" y "B",
y el cuarto sólo tiene "A" y "B".

11
00:00:22,950 --> 00:00:24,985
Si queremos crear un
índice único sobre "A",

12
00:00:24,985 --> 00:00:27,600
eso funcionaría bien
porque "A" tiene un

13
00:00:27,600 --> 00:00:29,470
valor diferente para
cada documento y

14
00:00:29,470 --> 00:00:31,100
"A" está incluida
en cada documento,

15
00:00:31,100 --> 00:00:32,340
así que funcionaría bien.

16
00:00:32,340 --> 00:00:35,816
Pero digamos que queremos crear
un índice único sobre "C",

17
00:00:35,816 --> 00:00:38,250
sobre la clave "C". Bueno,
el primer documento y el

18
00:00:38,250 --> 00:00:41,020
segundo documento tienen
ambos un valor para "C",

19
00:00:41,020 --> 00:00:42,750
así que funcionaría bien.

20
00:00:42,750 --> 00:00:46,250
Pero el tercero y el cuarto
no tienen valores para "C",

21
00:00:46,250 --> 00:00:47,915
entonces no funcionaría.

22
00:00:47,915 --> 00:00:50,540
La razón por la cual no vas a
poder crear un índice único

23
00:00:50,540 --> 00:00:53,740
sobre "C", sólo el índice único,
es porque se considera que estos

24
00:00:53,740 --> 00:00:57,950
dos documentos acá tienen
un valor "null" para "C".

25
00:00:57,950 --> 00:01:00,690
Y como un índice único
permite que un valor sólo

26
00:01:00,690 --> 00:01:04,180
aparezca una vez en el índice, vas
a ver un error de clave duplicada

27
00:01:04,180 --> 00:01:07,820
si tratas de crear un índice
sobre "C" para estos cuatro

28
00:01:07,820 --> 00:01:08,770
documentos.

29
00:01:08,770 --> 00:01:10,350
Entonces, ¿cuál es la solución?

30
00:01:10,350 --> 00:01:13,560
Bueno, puedes eliminar los
duplicados cuando creas el índice,

31
00:01:13,560 --> 00:01:15,900
pero el problema es
que eso eliminaría

32
00:01:15,900 --> 00:01:17,920
o este documento,
o ese documento,

33
00:01:17,920 --> 00:01:20,340
lo cual definitivamente
no es lo que quieres.

34
00:01:20,340 --> 00:01:23,800
En su lugar, puedes crear lo que
llamamos un índice disperso y

35
00:01:23,800 --> 00:01:26,210
lo que un índice
disperso hará es

36
00:01:26,210 --> 00:01:29,160
crear entradas en el índice
para los documentos que

37
00:01:29,160 --> 00:01:31,630
contengan la clave indexada.

38
00:01:31,630 --> 00:01:35,920
Entonces si estamos
indexando "C", no habría

39
00:01:35,920 --> 00:01:37,630
una entrada en el
índice para esto

40
00:01:37,630 --> 00:01:39,660
ni una entrada en
el índice para esto.

41
00:01:39,660 --> 00:01:41,950
Así que hagamos todo esto
en el shell y veámoslo

42
00:01:41,950 --> 00:01:45,110
y veamos algunas de
las consecuencias de

43
00:01:45,110 --> 00:01:47,444
usar un índice disperso
y qué significado tienen.

44
00:01:47,444 --> 00:01:49,360
OK. Tengo una colección pequeña
de productos y voy a imprimirla

45
00:01:49,360 --> 00:01:53,110
elegantemente acá y podemos ver
que el primer documento es

46
00:01:53,110 --> 00:01:55,540
una camiseta con cuello y tiene
valor "medium" para "size",

47
00:01:55,540 --> 00:01:57,550
y el segundo documento
es de unos jeans con

48
00:01:57,550 --> 00:02:02,050
un "size" de "32x32", y
el tercer documento es una

49
00:02:02,050 --> 00:02:06,273
funda para iPhones y no tiene
"size", y el cuarto documento

50
00:02:06,273 --> 00:02:08,669
es un cable DVI a VGA
y no tiene un "size".

51
00:02:08,669 --> 00:02:11,527
Bueno, si quisiere crear un
índice único sobre "size",

52
00:02:11,527 --> 00:02:13,110
lo cual no tiene
mucho sentido.

53
00:02:13,110 --> 00:02:14,859
No sé por qué harías
eso, pero digamos que

54
00:02:14,859 --> 00:02:17,150
quieres hacerlo, así que
hagamos eso ejecutando

55
00:02:17,150 --> 00:02:22,300
"db.products.ensureIndex" sobre "size"

56
00:02:22,300 --> 00:02:26,164
de manera ascendente, y démosle
la opción "unique" igual a "true".

57
00:02:26,164 --> 00:02:28,080
Veamos qué ocurre cuando
tratamos de hacer eso.

58
00:02:28,080 --> 00:02:30,720
Y lo que ocurre es
que nos da un error.

59
00:02:30,720 --> 00:02:32,140
Nos da un error
porque hay dos

60
00:02:32,140 --> 00:02:34,340
documentos en esa
colección que no

61
00:02:34,340 --> 00:02:38,920
tienen "size" y ambos
mapean "size" a "null",

62
00:02:38,920 --> 00:02:41,360
lo cual va a ser una clave
duplicada porque no puedes

63
00:02:41,360 --> 00:02:44,240
tener "null" en la
colección más de una vez.

64
00:02:44,240 --> 00:02:46,470
Entonces, ¿cuáles
son mis opciones?

65
00:02:46,470 --> 00:02:49,320
Bueno, mis opciones son
que puedo, en su lugar,

66
00:02:49,320 --> 00:02:53,230
crear este índice con
"sparse" igual a "true".

67
00:02:53,230 --> 00:02:56,006
Y ahora va a estar bien.

68
00:02:56,006 --> 00:02:57,380
Ahora voy a poder
crear el índice.

69
00:02:57,380 --> 00:02:58,921
No había un índice
antes y ahora hay

70
00:02:58,921 --> 00:03:01,190
dos, ¿OK?

71
00:03:01,190 --> 00:03:03,480
Eso básicamente
funciona bien,

72
00:03:03,480 --> 00:03:05,490
pero hay ciertas cosas
que debemos considerar

73
00:03:05,490 --> 00:03:07,770
cuando creas un
índice disperso.

74
00:03:07,770 --> 00:03:10,230
En partícular, que
si usas ese índice

75
00:03:10,230 --> 00:03:12,730
y digamos, por ejemplo, ordenas
de acuerdo a ese índice,

76
00:03:12,730 --> 00:03:15,480
entonces puede que los resultados
no sean los que esperabas.

77
00:03:15,480 --> 00:03:17,210
Definitivamente esperaríamos

78
00:03:17,210 --> 00:03:20,870
que si ejecutamos "db.products.find"
obtendríamos todos los documentos

79
00:03:20,870 --> 00:03:23,990
y eso ocurre, eso
no es sorprendente.

80
00:03:23,990 --> 00:03:26,450
Pero digamos que ejecutamos
"db.products.find"

81
00:03:26,450 --> 00:03:28,440
y decimos que ordene de acuerdo
a "size" de manera ascendente.

82
00:03:28,440 --> 00:03:31,920
Si hacemos eso, entonces igual
obtenemos los cuatro documentos

83
00:03:31,920 --> 00:03:33,970
ordenados por tamaño.

84
00:03:33,970 --> 00:03:36,120
Eso es interesante.
Está bien, está bien.

85
00:03:36,120 --> 00:03:38,070
Pero veamos qué índice
está utilizando. Voy

86
00:03:38,070 --> 00:03:41,740
a utilizar un "explain"
para ver qué nos dice.

87
00:03:41,740 --> 00:03:46,790
Dice que está usando un
"BasicCursor" para el índice.

88
00:03:46,790 --> 00:03:50,450
Ésa es la razón por la cual
obtenemos todos los documentos.

89
00:03:50,450 --> 00:03:53,290
OK. ¿Qué ocurriría si
deliberadamente usamos

90
00:03:53,290 --> 00:03:56,860
un "hint" diciendo que utilice
el índice ascendente en "size"?

91
00:03:56,860 --> 00:04:01,980
Si hacemos eso, entonces
obtenemos sólo dos documentos.

92
00:04:01,980 --> 00:04:05,370
Hicimos un "find", donde esperaríamos
obtener todos los documentos, pero

93
00:04:05,370 --> 00:04:07,132
obtuvimos sólo dos.

94
00:04:07,132 --> 00:04:08,590
Y la razón por la cual
obtuvimos sólo dos,

95
00:04:08,590 --> 00:04:12,040
es porque estamos utilizando el índice
"size", y el índice "size" es disperso.

96
00:04:12,040 --> 00:04:14,365
Al índice sobre "size" le
faltan los dos documentos

97
00:04:14,365 --> 00:04:16,120
que no tienen tamaños y por
eso no se incluyen cuando la

98
00:04:16,120 --> 00:04:17,670
consulta retorna los resultados.

99
00:04:17,670 --> 00:04:21,310
Si ejecutas un "explain"
verás ahora que está

100
00:04:21,310 --> 00:04:23,220
utilizando este
índice sobre "size".

101
00:04:23,220 --> 00:04:25,940
Aquí está: "BtreeCursor", "size".

102
00:04:25,940 --> 00:04:29,360
Ejecutamos "explain" para que
nos diga el plan de la consulta

103
00:04:29,360 --> 00:04:32,519
y vemos que está utilizando este índice
sobre "size", omitiendo dos documentos.

104
00:04:32,519 --> 00:04:34,810
Bueno, ése fue un ejemplo
un poco extremo, el tener

105
00:04:34,810 --> 00:04:37,226
que hacer el "hint" para que
se utilice el índice "size"

106
00:04:37,226 --> 00:04:39,470
cuando la base de datos
no lo hace por defecto.

107
00:04:39,470 --> 00:04:41,350
Pero lo que es importante
recordar acá es que este

108
00:04:41,350 --> 00:04:45,590
comportamiento cambió cuando
pasamos de MongoDB 2.4 a

109
00:04:45,590 --> 00:04:48,260
MongoDB 2.6.

110
00:04:48,260 --> 00:04:48,970
¿OK?

111
00:04:48,970 --> 00:04:55,010
La versión 2.6 fue liberada en
abril de 2014 y en MongoDB 2.4,

112
00:04:55,010 --> 00:04:57,540
aun si no hubieses
utilizado el "hint",

113
00:04:57,540 --> 00:05:02,810
hubiese utilizado aquel índice,
ese índice sobre "size". Así es.

114
00:05:02,810 --> 00:05:07,060
En MongoDB 2.6, por defecto
no se utiliza aquel índice,

115
00:05:07,060 --> 00:05:09,850
y la razón por la cual no usa
ese índice por defecto es porque

116
00:05:09,850 --> 00:05:11,341
sabe que si lo hace,

117
00:05:11,341 --> 00:05:13,590
va a omitir documentos que
de otra forma hubiesen sido

118
00:05:13,590 --> 00:05:14,460
retornados.

119
00:05:14,460 --> 00:05:16,020
Entonces eso no va a
utilizar ese índice

120
00:05:16,020 --> 00:05:17,770
para la consulta con
el ordenamiento.

121
00:05:17,770 --> 00:05:20,670
Éste es un cambio de
comportamiento de MongoDB 2.4

122
00:05:20,670 --> 00:05:23,010
a MongoDB 2.6 y creo
que es mayormente una

123
00:05:23,010 --> 00:05:24,510
mejora en el comportamiento

124
00:05:24,510 --> 00:05:27,670
porque más o menos obtienes
los resultados que esperas.

125
00:05:27,670 --> 00:05:29,910
Pero si en verdad quieres
forzar el comportamiento antiguo,

126
00:05:29,910 --> 00:05:32,186
puedes hacerlo utilizando
el comando "hint"

127
00:05:32,186 --> 00:05:34,560
y sólo tienes que recordar
que podrías, en efecto, omitir

128
00:05:34,560 --> 00:05:36,240
documentos que de otra manera
hubiesen sido retornados por

129
00:05:36,240 --> 00:05:38,360
la consulta si es que haces
un ordenamiento con un índice

130
00:05:38,360 --> 00:05:40,470
disperso al cual le faltan
algunos documentos.

131
00:05:40,470 --> 00:05:43,500
OK. Entonces, pensando
en MongoDB 2.6, hagamos

132
00:05:43,500 --> 00:05:45,740
un cuestionario.

133
00:05:45,740 --> 00:05:46,990
Acá está el cuestionario.

134
00:05:46,990 --> 00:05:48,950
Digamos que tenemos los
siguientes documentos

135
00:05:48,950 --> 00:05:51,730
en una colección llamada "people"
con los siguientes documentos.

136
00:05:51,730 --> 00:05:54,480
Puedes ver que hay
tres documentos acá

137
00:05:54,480 --> 00:05:56,680
y de estos tres documentos,
el primero tiene un

138
00:05:56,680 --> 00:06:00,180
campo "name" con el valor "Andrew"
y el campo "title" con "Jester".

139
00:06:00,180 --> 00:06:01,680
El segundo tiene "name"
conteniendo "Dwight" y

140
00:06:01,680 --> 00:06:04,400
"title" con "CEO", y el
tercero tiene "name" con

141
00:06:04,400 --> 00:06:05,660
"John" pero sin título.

142
00:06:05,660 --> 00:06:08,930
Hay un índice en esta colección
sobre la clave "title" y es

143
00:06:08,930 --> 00:06:11,110
disperso.

144
00:06:11,110 --> 00:06:13,070
Si haces la siguiente consulta,

145
00:06:13,070 --> 00:06:15,050
¿qué obtienes y por qué?

146
00:06:15,050 --> 00:06:18,940
En MongoDB 2.6, si haces
la consulta y buscas por

147
00:06:18,940 --> 00:06:25,380
"title" igual a "null" con un "hint" para
indicar que se debería usar el índice "title",

148
00:06:25,380 --> 00:06:27,700
¿qué esperarías obtener?

149
00:06:27,700 --> 00:06:29,990
Y las respuestas son, bueno,
que no retorne ningún documento,

150
00:06:29,990 --> 00:06:31,365
porque la consulta
utiliza el índice

151
00:06:31,365 --> 00:06:33,860
y no hay documentos con "title"
igual a "null" en el índice.

152
00:06:33,860 --> 00:06:37,000
O, ningún documento porque
hacer consultas por "title"

153
00:06:37,000 --> 00:06:39,320
igual a "null" sólo busca documentos
que explícitamente tengan "title: null",

154
00:06:39,320 --> 00:06:40,819
sin importar el índice.

155
00:06:40,819 --> 00:06:43,360
El documento de John, porque la
consulta no va a utilizar el índice.

156
00:06:43,360 --> 00:06:44,950
Todos los documentos
en la colección,

157
00:06:44,950 --> 00:06:47,230
porque "title: null" coincide
con todos los documentos.

158
00:06:47,230 --> 00:06:49,850
O, el documento
de John, porque

159
00:06:49,850 --> 00:06:53,030
el comando "ensureIndex" no va
a surtir efecto en este caso.