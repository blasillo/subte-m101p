1
00:00:00,000 --> 00:00:00,120

2
00:00:00,120 --> 00:00:00,650
OK.

3
00:00:00,650 --> 00:00:02,230
Sigamos adelante con
el shell mongo.

4
00:00:02,230 --> 00:00:04,910
El shell mongo es un intérprete
interactivo de JavaScript que

5
00:00:04,910 --> 00:00:07,380
tiene funcionalidades integradas
para conectarse a y manipular

6
00:00:07,380 --> 00:00:08,970
datos en una base
de datos MongoDB.

7
00:00:08,970 --> 00:00:11,400
Asumiendo que ya tienes un
servidor mongod ejecutando

8
00:00:11,400 --> 00:00:14,000
en esta máquina, para conectarte
al mongod desde el shell, es

9
00:00:14,000 --> 00:00:15,680
suficiente ingresar "mongo".

10
00:00:15,680 --> 00:00:17,910
Cuando inicias el shell,
imprime un anuncio que

11
00:00:17,910 --> 00:00:20,440
incluye el número de versión
al igual que el nombre

12
00:00:20,440 --> 00:00:21,980
de la base de datos a la
que estás conectándote.

13
00:00:21,980 --> 00:00:24,060
Yo recomendaría que te acostumbres
a leer estos pedazos de

14
00:00:24,060 --> 00:00:24,970
información.

15
00:00:24,970 --> 00:00:28,370
Son útiles para detectar
conexiones inesperadas o

16
00:00:28,370 --> 00:00:30,600
diferencias de versiones
entre servidores y shells.

17
00:00:30,600 --> 00:00:33,630
Generalmente hablando, debería
de ser posible usar cualquier versión

18
00:00:33,630 --> 00:00:35,680
del shell con cualquier
versión del servidor, pero

19
00:00:35,680 --> 00:00:38,310
de vez en cuando agregamos nuevas
funcionalidades o al shell

20
00:00:38,310 --> 00:00:41,170
o al servidor, las cuales podrían
requerir que las versiones

21
00:00:41,170 --> 00:00:43,000
de ambos procesos sean la misma.

22
00:00:43,000 --> 00:00:44,430
Por eso la mejor
práctica es mantener

23
00:00:44,430 --> 00:00:45,710
estas versiones sincronizadas.

24
00:00:45,710 --> 00:00:47,700
Y con respecto al nombre de la
base de datos, es muy fácil

25
00:00:47,700 --> 00:00:50,440
escribir un nombre equivocado para la
base de datos o para el host  

26
00:00:50,440 --> 00:00:52,330
y en efecto conectarte a un lugar

27
00:00:52,330 --> 00:00:53,280
inesperado.

28
00:00:53,280 --> 00:00:55,200
Entonces, como comprobación
preliminar recomiendo que

29
00:00:55,200 --> 00:00:56,400
leas estos anuncios.

30
00:00:56,400 --> 00:00:58,630
Como mencioné, el shell mongo
es un intérprete interactivo

31
00:00:58,630 --> 00:01:00,200
de JavaScript.

32
00:01:00,200 --> 00:01:02,570
Esto significa que es posible
insertar fragmentos de JavaScript

33
00:01:02,570 --> 00:01:05,250
y que éstos sean interpretados
o evaluados inmediatamente.

34
00:01:05,250 --> 00:01:07,710
Por ejemplo, puedo escribir un
bucle simple y cuando presiono

35
00:01:07,710 --> 00:01:09,990
"Enter", este fragmento de
JavaScript va a ser enviado

36
00:01:09,990 --> 00:01:12,730
a un sistema de ejecución
JavaScript y su resultado

37
00:01:12,730 --> 00:01:13,850
será impreso en la pantalla.

38
00:01:13,850 --> 00:01:16,570
La decisión de utilizar JavaScript
como lenguaje de interacción fue hecha

39
00:01:16,570 --> 00:01:19,080
hace unos años y fue motivada
por el deseo de tener un

40
00:01:19,080 --> 00:01:21,280
idioma que sea suficientemente
fácil de utilizar y

41
00:01:21,280 --> 00:01:23,820
suficientemente común para que
exista material referencial 

42
00:01:23,820 --> 00:01:25,730
y sea relativamente conveniente
para propósitos simples

43
00:01:25,730 --> 00:01:26,940
de secuencias de comandos.

44
00:01:26,940 --> 00:01:29,780
Ahora, para hacernos la vida más
fácil, el shell tiene funciones que

45
00:01:29,780 --> 00:01:32,730
hacen el acceso a y la edición de
comandos previos relativamente

46
00:01:32,730 --> 00:01:33,470
sencillo.

47
00:01:33,470 --> 00:01:36,140
Por ejemplo, si quiero acceder
el comando previo, presiono

48
00:01:36,140 --> 00:01:38,730
la flecha hacia arriba y puedo
mover el cursor, por ejemplo, con

49
00:01:38,730 --> 00:01:42,100
las flechas y cambiar el comando
que ejecuté con el shell JavaScript

50
00:01:42,100 --> 00:01:43,450
para que sea un programa diferente.

51
00:01:43,450 --> 00:01:45,190
Acá, he producido diferentes
resultados a los de la

52
00:01:45,190 --> 00:01:46,360
la última vez.

53
00:01:46,360 --> 00:01:48,560
Las teclas de edición que el shell
soporta están diseñadas para

54
00:01:48,560 --> 00:01:50,740
ser similares a las de, digamos,
el shell Bash, el cual viene

55
00:01:50,740 --> 00:01:52,380
con muchas de las
distribuciones de Linux.

56
00:01:52,380 --> 00:01:54,520
Las combinaciones de teclas
disponibles han sido modeladas

57
00:01:54,520 --> 00:01:55,910
en base al editor Emacs.

58
00:01:55,910 --> 00:01:58,100
Entonces, por ejemplo, si presiono
la flecha hacia arriba para acceder un

59
00:01:58,100 --> 00:02:00,740
comando previo, puedo ir al
comienzo de la línea con

60
00:02:00,740 --> 00:02:03,590
Control-A, probablemente también
con las teclas Inicio y Fin, si las

61
00:02:03,590 --> 00:02:04,810
tienes en tu teclado.

62
00:02:04,810 --> 00:02:08,590
Puedo moverme o con
las flechas o con

63
00:02:08,590 --> 00:02:12,260
las teclas habituales de Bash o
Emacs, Control-F, Control-B. Puedo

64
00:02:12,260 --> 00:02:14,430
moverme al final de la línea con
Control-E, o de repente con la

65
00:02:14,430 --> 00:02:17,560
tecla Fin, y ahora he ingresado
un tercer programa para que

66
00:02:17,560 --> 00:02:18,470
sea ejecutado por el shell.

67
00:02:18,470 --> 00:02:20,270
Hasta ahora, por supuesto,
no me he conectado a la

68
00:02:20,270 --> 00:02:22,960
base de datos, simplemente he
evaluado fragmentos de JavaScript.

69
00:02:22,960 --> 00:02:25,140
Para este curso, nuestro uso
de JavaScript va a ser

70
00:02:25,140 --> 00:02:27,080
relativamente simple,
así que si no conoces el

71
00:02:27,080 --> 00:02:29,600
lenguaje muy bien, espero que
lo que te he mostrado hasta ahora

72
00:02:29,600 --> 00:02:30,590
sea por lo menos reconocible.

73
00:02:30,590 --> 00:02:32,690
La sintaxis de los lenguajes ha sido
modelada intencionalmente en base

74
00:02:32,690 --> 00:02:35,080
a lenguajes como C o Java,
y muchas personas perciben

75
00:02:35,080 --> 00:02:37,020
que JavaScript es relativamente
fácil de aprender.

76
00:02:37,020 --> 00:02:38,895
Si eres un experto
de JavaScript y 

77
00:02:38,895 --> 00:02:41,280
me ves haciendo cosas que no
son estilísticamente

78
00:02:41,280 --> 00:02:43,820
convenientes en JavaScript,
me disculpo por adelantado.

79
00:02:43,820 --> 00:02:45,880
Además de algunas de las funcionalidades
para editar comandos que

80
00:02:45,880 --> 00:02:48,760
el shell soporta, tenemos una
variedad de "helpers" integrados.

81
00:02:48,760 --> 00:02:52,330
Por ejemplo, si escribes "help",
vas a ver una lista de 

82
00:02:52,330 --> 00:02:53,730
temas que puedes visitar.

83
00:02:53,730 --> 00:02:56,860
Por ejemplo, puedo decir "help keys"
para ver alguna información

84
00:02:56,860 --> 00:02:58,890
sobre las combinaciones de
teclas disponibles.

85
00:02:58,890 --> 00:03:01,120
También podrías familiarizarte
con algunos de los otros temas

86
00:03:01,120 --> 00:03:01,860
de ayuda en tu tiempo libre.

87
00:03:01,860 --> 00:03:03,590
Adicionalmente, el shell
tiene la habilidad de

88
00:03:03,590 --> 00:03:04,930
completar las palabras-clave ingresadas.

89
00:03:04,930 --> 00:03:07,970
Por ejemplo, habiendo ingresado
el comienzo de este bucle, si

90
00:03:07,970 --> 00:03:10,930
quisiera que el shell complete
automáticamente una palabra-clave

91
00:03:10,930 --> 00:03:14,390
que comienza con P-R-I, puedo ingresar
"pri" y luego presionar "tab".

92
00:03:14,390 --> 00:03:17,350
El shell completa automáticamente
lo más que puede, a condición de que

93
00:03:17,350 --> 00:03:21,000
"pri" identifique únicamente
un prefijo de palabra-clave 

94
00:03:21,000 --> 00:03:22,940
que exista en el sistema de 
ejecución de JavaScript.

95
00:03:22,940 --> 00:03:26,380
A lo que me refiero es que si "pri"
no identifica una palabra-clave

96
00:03:26,380 --> 00:03:28,870
que esté definida en JavaScript,

97
00:03:28,870 --> 00:03:30,390
entonces, no se hubiese
completado nada.

98
00:03:30,390 --> 00:03:32,290
Sin embargo, yo sé que
existe una función llamada

99
00:03:32,290 --> 00:03:34,840
"print" en el sistema de ejecución
de JavaScript, entonces ingresando

100
00:03:34,840 --> 00:03:37,020
"pri" seguido de un
"tab", el shell completa 

101
00:03:37,020 --> 00:03:38,000
esa palabra-clave.

102
00:03:38,000 --> 00:03:39,630
Este tipo de cosas son
bastante convenientes al

103
00:03:39,630 --> 00:03:41,460
interactuar con el shell mongo.

104
00:03:41,460 --> 00:03:43,800
Ahora, en caso de que aún no
te hayas familiarizado con 

105
00:03:43,800 --> 00:03:46,330
JavaScript, quiero contarte
algunas cosas sobre

106
00:03:46,330 --> 00:03:47,860
la sintaxis que van
a ser relevantes.

107
00:03:47,860 --> 00:03:51,370
En JavaScript, las variables
son asignadas más o menos de la

108
00:03:51,370 --> 00:03:52,610
manera en que uno esperaría.

109
00:03:52,610 --> 00:03:55,280
x = 1 asigna la
variable "x" a "1".

110
00:03:55,280 --> 00:03:59,680
y = abc asigna la variable
"y" a la cadena "abc".

111
00:03:59,680 --> 00:04:06,580
Y z = corchetes, la letra a : 1
asigna la variable "z"

112
00:04:06,580 --> 00:04:10,120
a ser un objeto de JavaScript
que consiste de la

113
00:04:10,120 --> 00:04:13,630
propiedad llamada "a"
correspondiente al valor "1".

114
00:04:13,630 --> 00:04:16,364
Esto es análogo a construir
algo como un diccionario o

115
00:04:16,364 --> 00:04:19,480
una tabla hash o un mapa
en otros lenguajes.

116
00:04:19,480 --> 00:04:22,490
Puedo referirme a las propiedades
de una variable en JavaScript en

117
00:04:22,490 --> 00:04:23,750
dos diferentes formas.

118
00:04:23,750 --> 00:04:27,090
Si digo "z.a", accedo
la propiedad de la 

119
00:04:27,090 --> 00:04:30,340
variable z cuyo nombre es "a",
en este caso, "1".

120
00:04:30,340 --> 00:04:33,800
Alternativamente, puedo decir "z"
seguido de un paréntesis cuadrado

121
00:04:33,800 --> 00:04:36,120
seguido del nombre como cadena
de la propiedad que estoy 

122
00:04:36,120 --> 00:04:38,740
buscando, seguido de
un paréntesis cuadrado.

123
00:04:38,740 --> 00:04:41,490
Estas formas tiene propósitos
similares pero algunas

124
00:04:41,490 --> 00:04:42,510
diferencias también.

125
00:04:42,510 --> 00:04:46,520
En particular, la notación con el
punto, "z.a", no permite

126
00:04:46,520 --> 00:04:48,940
la búsqueda de una
propiedad variable.

127
00:04:48,940 --> 00:04:51,640
Aunque la "z" es tratada como
una variable, la "a" es tratada

128
00:04:51,640 --> 00:04:52,660
literalmente.

129
00:04:52,660 --> 00:04:56,560
Por lo contrario, si asigno que
la variable "w" sea la cadena "a",

130
00:04:56,560 --> 00:04:59,770
entonces puedo usar la sintaxis
con paréntesis cuadrado para

131
00:04:59,770 --> 00:05:02,880
buscar una propiedad dentro
del objeto "z" cuyo valor venga

132
00:05:02,880 --> 00:05:04,160
de una variable en
tiempo de ejecución.

133
00:05:04,160 --> 00:05:07,920
En este caso, busca la
propiedad de "z" cuyo nombre es

134
00:05:07,920 --> 00:05:09,760
el valor de la variable "w".

135
00:05:09,760 --> 00:05:12,370
Por ende, estas dos sintaxis, la
notación con punto y la notación 

136
00:05:12,370 --> 00:05:14,490
con paréntesis cuadrado, sirven
propósitos ligeramente diferentes

137
00:05:14,490 --> 00:05:15,350
en JavaScript.

138
00:05:15,350 --> 00:05:18,280
Superficialmente, la notación con
punto es típicamente considerada

139
00:05:18,280 --> 00:05:21,420
para buscar propiedas
o métodos o

140
00:05:21,420 --> 00:05:23,940
variables de instancia dentro de
un objeto, mientras que la notación

141
00:05:23,940 --> 00:05:26,390
de paréntesis cuadrado trata
al objeto más como un pedazo

142
00:05:26,390 --> 00:05:28,860
de datos, tipo un diccionario,
y busca asociaciones correspondientes

143
00:05:28,860 --> 00:05:30,910
entre claves y valores.

144
00:05:30,910 --> 00:05:32,550
Estrictamente hablando, ninguna
de estas cosas se refiere a

145
00:05:32,550 --> 00:05:34,750
cómo el lenguaje JavaScript
habla de sí mismo, pero son

146
00:05:34,750 --> 00:05:36,530
particularmente importantes
para nuestro propósito de

147
00:05:36,530 --> 00:05:37,730
llegar a entender bien el shell.

148
00:05:37,730 --> 00:05:40,060
De cualquier forma, ésta ha sido
una breve presentación del shell

149
00:05:40,060 --> 00:05:41,190
y el lenguaje JavaScript.

150
00:05:41,190 --> 00:05:42,920
Veremos más JavaScript
mientras procedamos con 

151
00:05:42,920 --> 00:05:44,140
el resto de la semana.

152
00:05:44,140 --> 00:05:44,570
OK.

153
00:05:44,570 --> 00:05:45,670
Hagamos un cuestionario.

154
00:05:45,670 --> 00:05:48,240
¿Qué hace el siguiente
fragmento de JavaScript?

155
00:05:48,240 --> 00:05:49,920
Hay cuatro líneas aquí.

156
00:05:49,920 --> 00:05:52,510
La primera asigna la variable
"x" a un objeto cuya

157
00:05:52,510 --> 00:05:54,890
propiedad "a" tiene el valor "1".

158
00:05:54,890 --> 00:05:58,000
La segunda asigna la
variable "y" al valor

159
00:05:58,000 --> 00:05:59,210
de la cadena, "a".

160
00:05:59,210 --> 00:06:02,110
Dado eso, ¿qué hacen estas
dos últimas líneas?

161
00:06:02,110 --> 00:06:03,650
Ingresa el resultado en
la caja de resultados.

162
00:06:03,650 --> 00:06:04,900