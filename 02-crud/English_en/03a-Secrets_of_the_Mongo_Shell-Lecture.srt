1
00:00:00,000 --> 00:00:00,120

2
00:00:00,120 --> 00:00:00,650
OK.

3
00:00:00,650 --> 00:00:02,230
Let's move on to the
Mongo shell.

4
00:00:02,230 --> 00:00:04,910
Mongo shell is an interactive
JavaScript interpreter that

5
00:00:04,910 --> 00:00:07,380
has built-in functionality for
connecting to and manipulating

6
00:00:07,380 --> 00:00:08,970
data in a MongoDB database.

7
00:00:08,970 --> 00:00:11,400
Assuming that you have a MongoD
server already running

8
00:00:11,400 --> 00:00:14,000
on this machine, to connect to
it from the shell, it suffices

9
00:00:14,000 --> 00:00:15,680
simply to say "Mongo".

10
00:00:15,680 --> 00:00:17,910
When the shell starts up, it
prints out a banner that

11
00:00:17,910 --> 00:00:20,440
includes the shell's version
number as well as the name of

12
00:00:20,440 --> 00:00:21,980
the database that you're
connected to.

13
00:00:21,980 --> 00:00:24,060
I recommend getting into the
habit of reading these pieces

14
00:00:24,060 --> 00:00:24,970
of information.

15
00:00:24,970 --> 00:00:28,370
They're useful for detecting
unexpected connections or

16
00:00:28,370 --> 00:00:30,600
version skew between
servers and shells.

17
00:00:30,600 --> 00:00:33,630
Generally speaking, it should be
possible to use any version

18
00:00:33,630 --> 00:00:35,680
of the shell with any version
of the server, but

19
00:00:35,680 --> 00:00:38,310
occasionally we add new features
either to the shell

20
00:00:38,310 --> 00:00:41,170
or to the server, which might
require the agreement

21
00:00:41,170 --> 00:00:43,000
inversions between
the two pieces.

22
00:00:43,000 --> 00:00:44,430
So it's a best practice
to try to keep

23
00:00:44,430 --> 00:00:45,710
these versions in sync.

24
00:00:45,710 --> 00:00:47,700
As for the name of the database,
it's all too easy to

25
00:00:47,700 --> 00:00:50,440
type the wrong database name in
or the wrong host name in,

26
00:00:50,440 --> 00:00:52,330
in fact, and connect
to someplace

27
00:00:52,330 --> 00:00:53,280
that you didn't expect.

28
00:00:53,280 --> 00:00:55,200
So, just as a sanity
check, I recommend

29
00:00:55,200 --> 00:00:56,400
reading these banners.

30
00:00:56,400 --> 00:00:58,630
As I mentioned, the Mongo
shell is an interactive

31
00:00:58,630 --> 00:01:00,200
JavaScript interpreter.

32
00:01:00,200 --> 00:01:02,570
This means that you can key in
fragments of JavaScript and

33
00:01:02,570 --> 00:01:05,250
have them interpreted or
evaluated immediately.

34
00:01:05,250 --> 00:01:07,710
For example, I can write a
simple loop, and when I press

35
00:01:07,710 --> 00:01:09,990
Enter, this fragmented
JavaScript will be submitted

36
00:01:09,990 --> 00:01:12,730
to a JavaScript runtime,
evaluated, and its output will

37
00:01:12,730 --> 00:01:13,850
be printed to the screen.

38
00:01:13,850 --> 00:01:16,570
The choice of JavaScript as an
interaction language was made

39
00:01:16,570 --> 00:01:19,080
some years ago, and it was
motivated by a desire to have

40
00:01:19,080 --> 00:01:21,280
a language that was easy enough
for people to use,

41
00:01:21,280 --> 00:01:23,820
common enough that there are
references for it out there,

42
00:01:23,820 --> 00:01:25,730
and relatively convenient
for simple sorts

43
00:01:25,730 --> 00:01:26,940
of scripting purposes.

44
00:01:26,940 --> 00:01:29,780
Now, to make life easy, the
shell has some functions that

45
00:01:29,780 --> 00:01:32,730
make retrieving and editing
previous input relatively

46
00:01:32,730 --> 00:01:33,470
straightforward.

47
00:01:33,470 --> 00:01:36,140
For example, if I want to get
the previous line of input, I

48
00:01:36,140 --> 00:01:38,730
can hit the Up arrow and I can
move around, for example, with

49
00:01:38,730 --> 00:01:42,100
the arrow keys and change the
input to the JavaScript shell

50
00:01:42,100 --> 00:01:43,450
to comprise a different
program.

51
00:01:43,450 --> 00:01:45,190
Here, I've produce different
output than the

52
00:01:45,190 --> 00:01:46,360
previous time around.

53
00:01:46,360 --> 00:01:48,560
The editing keys that the shell
supports are designed to

54
00:01:48,560 --> 00:01:50,740
be similar to those of say, the
Bash shell, which comes

55
00:01:50,740 --> 00:01:52,380
along with many Linux
distributions.

56
00:01:52,380 --> 00:01:54,520
The keystrokes that are
available there are modeled

57
00:01:54,520 --> 00:01:55,910
after the Emacs Editor.

58
00:01:55,910 --> 00:01:58,100
So, for example, if I hit the
Up arrow to get a previous

59
00:01:58,100 --> 00:02:00,740
line of input, I can go to the
beginning of the line with

60
00:02:00,740 --> 00:02:03,590
Control-A, probably also with
the Home and End keys, if you

61
00:02:03,590 --> 00:02:04,810
have those on your keyboard.

62
00:02:04,810 --> 00:02:08,590
I can move around with either
the arrow keys or with the

63
00:02:08,590 --> 00:02:12,260
Bash or Emacs customary keys,
Control-F, Control-B. I can

64
00:02:12,260 --> 00:02:14,430
move to the end of the line with
Control-E, or perhaps the

65
00:02:14,430 --> 00:02:17,560
End key, and now I've input yet
a third program for the

66
00:02:17,560 --> 00:02:18,470
shell to execute.

67
00:02:18,470 --> 00:02:20,270
So far, of course, I haven't
actually connected to the

68
00:02:20,270 --> 00:02:22,960
database, I'm just evaluating
fragments of JavaScript.

69
00:02:22,960 --> 00:02:25,140
Within this course, our use of
JavaScript is going to be

70
00:02:25,140 --> 00:02:27,080
relatively simple, so if you
happen not to know the

71
00:02:27,080 --> 00:02:29,600
language very well, I hope what
I've shown you so far is

72
00:02:29,600 --> 00:02:30,590
at least recognizable.

73
00:02:30,590 --> 00:02:32,690
The syntax of the languages is
intentionally modeled after

74
00:02:32,690 --> 00:02:35,080
languages such as C or Java,
and most people find

75
00:02:35,080 --> 00:02:37,020
JavaScript relatively
easy to pick up.

76
00:02:37,020 --> 00:02:38,895
If you happen to be a JavaScript
expert and you

77
00:02:38,895 --> 00:02:41,280
catch me doing things that
happen not to be stylistically

78
00:02:41,280 --> 00:02:43,820
desirable JavaScript, I
apologize in advance.

79
00:02:43,820 --> 00:02:45,880
In addition to some of the
command editing features that

80
00:02:45,880 --> 00:02:48,760
the shell has, we also have a
variety of built in helpers.

81
00:02:48,760 --> 00:02:52,330
For example, if you type in
"help", you can see a list of

82
00:02:52,330 --> 00:02:53,730
topics that you can visit.

83
00:02:53,730 --> 00:02:56,860
For example, I can say "help
keys" to see some information

84
00:02:56,860 --> 00:02:58,890
about the key bindings
that are available.

85
00:02:58,890 --> 00:03:01,120
You might familiarize yourself
with some of the other Help at

86
00:03:01,120 --> 00:03:01,860
your leisure.

87
00:03:01,860 --> 00:03:03,590
Further, the shell has
the ability to

88
00:03:03,590 --> 00:03:04,930
complete tokens of input.

89
00:03:04,930 --> 00:03:07,970
For instance, having typed in
the beginning of this loop, if

90
00:03:07,970 --> 00:03:10,930
I want to have the shell
automatically complete a token

91
00:03:10,930 --> 00:03:14,390
that starts with P-R-I, can
type "pri" and then a tab.

92
00:03:14,390 --> 00:03:17,350
And the shell complete out, as
far as it can, provided that

93
00:03:17,350 --> 00:03:21,000
pri uniquely identifies
[? sums ?] prefix of tokens

94
00:03:21,000 --> 00:03:22,940
that exist in the JavaScript
runtime.

95
00:03:22,940 --> 00:03:26,380
What I mean by that is that if
pri does not identify any

96
00:03:26,380 --> 00:03:28,870
token that happens to be defined
in JavaScript yet,

97
00:03:28,870 --> 00:03:30,390
then it won't have completed
anything.

98
00:03:30,390 --> 00:03:32,290
However, I happen to know that
there's a function called

99
00:03:32,290 --> 00:03:34,840
Print in the JavaScript runtime,
and so by typing

100
00:03:34,840 --> 00:03:37,020
"pri" followed by a Tab,
the shell will complete

101
00:03:37,020 --> 00:03:38,000
that token for me.

102
00:03:38,000 --> 00:03:39,630
These sorts of things are
fairly convenient for

103
00:03:39,630 --> 00:03:41,460
interacting with the
Mongo shell.

104
00:03:41,460 --> 00:03:43,800
Now, in case you haven't
familiarized yourself with

105
00:03:43,800 --> 00:03:46,330
JavaScript before, I want to
tell you a few things about

106
00:03:46,330 --> 00:03:47,860
the syntax that will
be relevant.

107
00:03:47,860 --> 00:03:51,370
In JavaScript, variables are
assigned more or less the way

108
00:03:51,370 --> 00:03:52,610
that you might expect.

109
00:03:52,610 --> 00:03:55,280
X = 1 assigns the variable
x to be "1".

110
00:03:55,280 --> 00:03:59,680
Y = abc assigns the variable
y to the string "abc".

111
00:03:59,680 --> 00:04:06,580
And z = left curly brace, the
letter a:1 assigns the

112
00:04:06,580 --> 00:04:10,120
variable z to be a JavaScript
object consisting of the

113
00:04:10,120 --> 00:04:13,630
property named "a" corresponding
value "1".

114
00:04:13,630 --> 00:04:16,364
This is analogous to building
something like a dictionary or

115
00:04:16,364 --> 00:04:19,480
a hash table or a map in
some other languages.

116
00:04:19,480 --> 00:04:22,490
I can refer to the properties of
a variable in JavaScript in

117
00:04:22,490 --> 00:04:23,750
one of two .

118
00:04:23,750 --> 00:04:27,090
If I say "z.a", I will retrieve
the property of the

119
00:04:27,090 --> 00:04:30,340
variable z whose name "a",
in this case, 1.

120
00:04:30,340 --> 00:04:33,800
Alternatively, I can say "z"
followed by a square bracket

121
00:04:33,800 --> 00:04:36,120
followed by the name of the
property that I seek as a

122
00:04:36,120 --> 00:04:38,740
string followed by a closing
square bracket.

123
00:04:38,740 --> 00:04:41,490
These two have similar purposes
but have some

124
00:04:41,490 --> 00:04:42,510
differences as well.

125
00:04:42,510 --> 00:04:46,520
In particular, the dot notation,
z.a, does not permit

126
00:04:46,520 --> 00:04:48,940
a variable property look up.

127
00:04:48,940 --> 00:04:51,640
The a is treated as a literal
even though the z is treated

128
00:04:51,640 --> 00:04:52,660
as a variable.

129
00:04:52,660 --> 00:04:56,560
By contrast, if I assigned the
variable w to be the string a,

130
00:04:56,560 --> 00:04:59,770
then I can look up using the
square bracket syntax a

131
00:04:59,770 --> 00:05:02,880
property inside the object z
whose value comes from a

132
00:05:02,880 --> 00:05:04,160
variable at run time.

133
00:05:04,160 --> 00:05:07,920
In this case, looking up the
property in z whose name is

134
00:05:07,920 --> 00:05:09,760
the value of the variable w.

135
00:05:09,760 --> 00:05:12,370
So these two syntaxes, the dot
notation and the square

136
00:05:12,370 --> 00:05:14,490
bracket notation, serve slightly
different purposes in

137
00:05:14,490 --> 00:05:15,350
JavaScript.

138
00:05:15,350 --> 00:05:18,280
Superficially, the dot notation
is typically thought

139
00:05:18,280 --> 00:05:21,420
of as being a look up properties
or methods or

140
00:05:21,420 --> 00:05:23,940
instance variables within an
object, whereas the square

141
00:05:23,940 --> 00:05:26,390
bracket notation treats the
object more as a piece of

142
00:05:26,390 --> 00:05:28,860
data, like a dictionary, and
looks up corresponding

143
00:05:28,860 --> 00:05:30,910
associations between
keys and values.

144
00:05:30,910 --> 00:05:32,550
None of these things are
strictly speaking how the

145
00:05:32,550 --> 00:05:34,750
JavaScript language talks
about itself, but that's

146
00:05:34,750 --> 00:05:36,530
particularly important
for the purposes of

147
00:05:36,530 --> 00:05:37,730
understanding the shell.

148
00:05:37,730 --> 00:05:40,060
In any case, this has been a
brief overview of the shell

149
00:05:40,060 --> 00:05:41,190
and the JavaScript language.

150
00:05:41,190 --> 00:05:42,920
We'll be seeing some more
JavaScript as we go through

151
00:05:42,920 --> 00:05:44,140
the rest of this week.

152
00:05:44,140 --> 00:05:44,570
OK.

153
00:05:44,570 --> 00:05:45,670
Let's have a quiz.

154
00:05:45,670 --> 00:05:48,240
What is the following fragment
of JavaScript output?

155
00:05:48,240 --> 00:05:49,920
There are four lines here.

156
00:05:49,920 --> 00:05:52,510
The first of them assigns the
variable x to the object whose

157
00:05:52,510 --> 00:05:54,890
property, a, has the value 1.

158
00:05:54,890 --> 00:05:58,000
The second one assigns the
variable y to the value that's

159
00:05:58,000 --> 00:05:59,210
the string, a.

160
00:05:59,210 --> 00:06:02,110
Given that, what do these
last two lines do?

161
00:06:02,110 --> 00:06:03,650
Place the output in
the Output box.

162
00:06:03,650 --> 00:06:04,900