1
00:00:00,000 --> 00:00:00,120

2
00:00:00,120 --> 00:00:00,600
OK.

3
00:00:00,600 --> 00:00:03,130
We've come a long way
in this unit.

4
00:00:03,130 --> 00:00:05,980
What's left is to talk a little
bit about inserting,

5
00:00:05,980 --> 00:00:09,100
updating, and removing data in
PyMongo, which is pretty

6
00:00:09,100 --> 00:00:11,190
similar to the way it works
in the Mongo shell.

7
00:00:11,190 --> 00:00:13,410
So we won't take that long,
although there are some

8
00:00:13,410 --> 00:00:15,320
subtleties to the insertion.

9
00:00:15,320 --> 00:00:18,190
And then we're going to talk a
little bit about the blog, and

10
00:00:18,190 --> 00:00:20,290
the work you're going to
do for that on the

11
00:00:20,290 --> 00:00:21,390
homework this week.

12
00:00:21,390 --> 00:00:23,100
And that's it.

13
00:00:23,100 --> 00:00:25,440
So let's get started talking
about insert.

14
00:00:25,440 --> 00:00:28,740
So I've written a small program
here in Python that's

15
00:00:28,740 --> 00:00:32,030
going to insert two documents
into the database.

16
00:00:32,030 --> 00:00:35,650
Now, in the first case, I've
named this document Richard.

17
00:00:35,650 --> 00:00:39,720
And you can see that it doesn't
have an underscore ID.

18
00:00:39,720 --> 00:00:42,990
And in the second case, I have
another document named Andrew,

19
00:00:42,990 --> 00:00:45,590
and it does have an
underscore ID.

20
00:00:45,590 --> 00:00:48,550
Now, if you recall from the
first unit, the PyMongo

21
00:00:48,550 --> 00:00:51,270
driver, and the drivers in
general, will set an

22
00:00:51,270 --> 00:00:54,790
underscore ID and create a BSON
object ID if there's none

23
00:00:54,790 --> 00:00:58,490
set in the data that comes
into the insert.

24
00:00:58,490 --> 00:01:02,410
So after we insert these, we're
going to look and we're

25
00:01:02,410 --> 00:01:05,239
going to print out, inside
Python, the value

26
00:01:05,239 --> 00:01:06,860
of these two records.

27
00:01:06,860 --> 00:01:08,620
And what I'll do is I'll just
print them in the same order

28
00:01:08,620 --> 00:01:10,820
that I'm inserting them.

29
00:01:10,820 --> 00:01:12,860
All right, so let's do that.

30
00:01:12,860 --> 00:01:16,535
So we're going to
run the program.

31
00:01:16,535 --> 00:01:19,200
And once we do that, we can
see that it prints out the

32
00:01:19,200 --> 00:01:22,710
first one, the one
for Richard.

33
00:01:22,710 --> 00:01:26,190
And in that case, the driver
added an underscore ID, and a

34
00:01:26,190 --> 00:01:28,510
BSON object ID.

35
00:01:28,510 --> 00:01:31,590
And in the second case, where
I already provided one--

36
00:01:31,590 --> 00:01:34,900
underscore ID is Erlichson,
it didn't add one.

37
00:01:34,900 --> 00:01:36,780
So that's interesting.

38
00:01:36,780 --> 00:01:39,620
Now what happens if we run
the program again?

39
00:01:39,620 --> 00:01:42,540
What would you expect
to happen?

40
00:01:42,540 --> 00:01:44,090
So let's do that.

41
00:01:44,090 --> 00:01:50,960
And the answer is that the first
insert succeeds with a

42
00:01:50,960 --> 00:01:53,720
new object ID.

43
00:01:53,720 --> 00:01:55,920
Different from the first,
because the driver just

44
00:01:55,920 --> 00:01:57,410
happily added a new one.

45
00:01:57,410 --> 00:02:00,760
But the second insert, where I
had specified the ID, that's

46
00:02:00,760 --> 00:02:01,510
going to fail.

47
00:02:01,510 --> 00:02:04,870
And we can confirm that by going
into Mongo, using the

48
00:02:04,870 --> 00:02:09,550
schools collection, and then
looking at that collection,

49
00:02:09,550 --> 00:02:11,880
people dot--

50
00:02:11,880 --> 00:02:13,910
I think it's school.

51
00:02:13,910 --> 00:02:17,370
And then looking at the
people collection.

52
00:02:17,370 --> 00:02:22,060
And when we do that, we can
see that, in fact, Richard

53
00:02:22,060 --> 00:02:24,330
appears twice right there.

54
00:02:24,330 --> 00:02:28,850
And I appear once, because that
was a duplicate key error

55
00:02:28,850 --> 00:02:31,570
when I tried to insert
that again.

56
00:02:31,570 --> 00:02:32,210
All right?

57
00:02:32,210 --> 00:02:37,380
So as an aside, the reason why
the driver is created the

58
00:02:37,380 --> 00:02:39,320
underscore ID and not
the database--

59
00:02:39,320 --> 00:02:40,540
it's kind of historical.

60
00:02:40,540 --> 00:02:44,160
But it was to allow a
very fast writes.

61
00:02:44,160 --> 00:02:46,650
You could send a write to the
database with a unique

62
00:02:46,650 --> 00:02:50,230
underscore ID, and then not
wait for the response.

63
00:02:50,230 --> 00:02:52,300
Now, we have safe mode set to
true, so we're waiting for a

64
00:02:52,300 --> 00:02:53,860
response anyway.

65
00:02:53,860 --> 00:02:55,090
So it doesn't really matter.

66
00:02:55,090 --> 00:02:58,090
And also, if you've been
following this, or if you're

67
00:02:58,090 --> 00:03:02,070
aware of the default mode being
safe mode equal false

68
00:03:02,070 --> 00:03:04,930
inside MondoDB, I just wanted
to let you know that in the

69
00:03:04,930 --> 00:03:09,050
coming weeks, one of the plans
for MongoDB is that safe mode

70
00:03:09,050 --> 00:03:11,110
is going to be set to
true by default.

71
00:03:11,110 --> 00:03:14,610
So that sort of obviates the
need for the object ID being

72
00:03:14,610 --> 00:03:17,120
set by the driver, but it always
has been that way.

73
00:03:17,120 --> 00:03:20,200
So I'm guessing it's going to
probably remain that way.

74
00:03:20,200 --> 00:03:23,670
But that was the original reason
why the drivers were

75
00:03:23,670 --> 00:03:25,060
creating the object ID.

76
00:03:25,060 --> 00:03:27,750
It was to allow you to send a
write to the database and not

77
00:03:27,750 --> 00:03:30,140
wait for a response, and know
what the ID was going to be

78
00:03:30,140 --> 00:03:31,310
when it succeeded.

79
00:03:31,310 --> 00:03:32,200
OK.

80
00:03:32,200 --> 00:03:34,190
So it's time for a quiz.

81
00:03:34,190 --> 00:03:35,820
So here's the quiz.

82
00:03:35,820 --> 00:03:39,640
In this code right here, which
looks similar to the code that

83
00:03:39,640 --> 00:03:43,880
we just went over, where we have
a document set to my name

84
00:03:43,880 --> 00:03:47,100
and some interests, if
I try to insert it--

85
00:03:47,100 --> 00:03:50,320
I have a first insert here,
and then the delete of the

86
00:03:50,320 --> 00:03:53,740
underscore ID here, and then
a second insert here--

87
00:03:53,740 --> 00:03:57,480
what do you expect to happen
with the second insert?

88
00:03:57,480 --> 00:03:58,120
All right?

89
00:03:58,120 --> 00:04:00,520
Do you expect to succeed,
and what is your

90
00:04:00,520 --> 00:04:01,980
explanation for that?

91
00:04:01,980 --> 00:04:04,430
And there is one answer to
this question right here.

92
00:04:04,430 --> 00:04:05,680
And here are the answers.

93
00:04:05,680 --> 00:04:06,510