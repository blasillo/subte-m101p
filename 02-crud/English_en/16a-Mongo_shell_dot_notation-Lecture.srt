1
00:00:00,000 --> 00:00:00,100

2
00:00:00,100 --> 00:00:00,440
OK.

3
00:00:00,440 --> 00:00:02,450
Now that we've learned about
arrays, let's look at some

4
00:00:02,450 --> 00:00:04,019
other ways that queries
can get inside of

5
00:00:04,019 --> 00:00:05,880
documents in MongoDB.

6
00:00:05,880 --> 00:00:09,090
So far, all of our example
documents have had strings and

7
00:00:09,090 --> 00:00:12,710
numbers, or arrays, for the
values of embedded fields.

8
00:00:12,710 --> 00:00:14,710
However, documents can nest.

9
00:00:14,710 --> 00:00:17,540
Let's create an example document
and look at that.

10
00:00:17,540 --> 00:00:20,020
Here, I've just inserted a
document with the name field

11
00:00:20,020 --> 00:00:24,010
"richard," that's me, and an
email field whose value is a

12
00:00:24,010 --> 00:00:27,110
nested document, having two
fields within it, work and

13
00:00:27,110 --> 00:00:29,970
personal, for a couple
of email addresses.

14
00:00:29,970 --> 00:00:32,290
And there's the example document
printed out a little

15
00:00:32,290 --> 00:00:33,800
bit more cleanly.

16
00:00:33,800 --> 00:00:36,320
Now, when you have a nested
document, there are a couple

17
00:00:36,320 --> 00:00:38,670
of things you might want to try
to do to find the document

18
00:00:38,670 --> 00:00:40,800
based on the embedded content.

19
00:00:40,800 --> 00:00:44,235
One possibility would be to
query for the exact match on

20
00:00:44,235 --> 00:00:45,760
the email field.

21
00:00:45,760 --> 00:00:50,200
If I key in db.users.find and
give it as an argument, a

22
00:00:50,200 --> 00:00:53,160
document with the top-level
field email whose value is an

23
00:00:53,160 --> 00:00:57,670
embedded document with fields
work, richard@10gen.com, and

24
00:00:57,670 --> 00:01:01,090
personal, kreuter@example.com,
I will indeed find the

25
00:01:01,090 --> 00:01:02,750
document that I inserted.

26
00:01:02,750 --> 00:01:05,459
Note that it's important that
the order of the fields in the

27
00:01:05,459 --> 00:01:07,530
embedded document
be preserved.

28
00:01:07,530 --> 00:01:10,730
If I reverse them, the database
will not find the

29
00:01:10,730 --> 00:01:12,400
document that I'm asking for.

30
00:01:12,400 --> 00:01:15,090
In effect, the stuff that's on
the right-hand side of the

31
00:01:15,090 --> 00:01:18,860
colon, if it does not contain
a $1 operator, a query

32
00:01:18,860 --> 00:01:23,110
operator in the find language,
compares exactly byte by byte

33
00:01:23,110 --> 00:01:25,140
the contents of the
two documents.

34
00:01:25,140 --> 00:01:27,480
If the field orders differ, then
the representations of

35
00:01:27,480 --> 00:01:29,990
these documents in BSON will
be different, and so the

36
00:01:29,990 --> 00:01:33,550
database will not consider the
embedded values to be equal.

37
00:01:33,550 --> 00:01:35,340
Therefore, it's important to
be consistent when you're

38
00:01:35,340 --> 00:01:36,550
storing data.

39
00:01:36,550 --> 00:01:39,120
However, the queries that I
have above, which we call

40
00:01:39,120 --> 00:01:41,470
query by example, are
somewhat limited.

41
00:01:41,470 --> 00:01:44,450
Perhaps I only know the work
address of the user and not

42
00:01:44,450 --> 00:01:45,740
the personal address.

43
00:01:45,740 --> 00:01:47,320
How could I query for that?

44
00:01:47,320 --> 00:01:49,750
Note that the following
will not work.

45
00:01:49,750 --> 00:01:52,370
What I have now at the bottom
of my terminal window is a

46
00:01:52,370 --> 00:01:55,630
query that will match only a
document whose email field is

47
00:01:55,630 --> 00:01:59,500
exactly the document work
colon richard@10gen.com,

48
00:01:59,500 --> 00:02:01,510
nothing more, nothing less.

49
00:02:01,510 --> 00:02:04,350
And indeed, the database returns
no results when I

50
00:02:04,350 --> 00:02:05,940
perform that query.

51
00:02:05,940 --> 00:02:09,130
However, MongoDB has a special
syntax that allows you to

52
00:02:09,130 --> 00:02:13,220
reach inside the email field for
a specific embedded field,

53
00:02:13,220 --> 00:02:16,200
regardless of what other fields
might exist around the

54
00:02:16,200 --> 00:02:17,920
embedded field that
I'm looking for.

55
00:02:17,920 --> 00:02:19,500
And we call this dot notation.

56
00:02:19,500 --> 00:02:21,280
Let me show you what
that looks like.

57
00:02:21,280 --> 00:02:24,850
If you submit a query and
specify for a field name, a

58
00:02:24,850 --> 00:02:28,030
dotted field, such as
email.work, then the query

59
00:02:28,030 --> 00:02:30,450
execution will take a look
at documents in the users

60
00:02:30,450 --> 00:02:33,930
collection looking for the email
field and then recurse

61
00:02:33,930 --> 00:02:36,560
into that email field looking
at the contents of the

62
00:02:36,560 --> 00:02:39,470
embedded document for any
field called work.

63
00:02:39,470 --> 00:02:42,030
If that embedded field called
work matches the specified

64
00:02:42,030 --> 00:02:44,180
string, then the document
matches.

65
00:02:44,180 --> 00:02:47,250
And it doesn't matter whether
the email field at the top

66
00:02:47,250 --> 00:02:50,220
level has any other embedded
fields, such as

67
00:02:50,220 --> 00:02:51,710
the personal field.

68
00:02:51,710 --> 00:02:53,930
And indeed, there's
my document.

69
00:02:53,930 --> 00:02:56,400
So the purpose of dot notation
is to allow you to reach

70
00:02:56,400 --> 00:03:00,220
inside of nested documents,
looking for a specific

71
00:03:00,220 --> 00:03:02,900
embedded piece of information
without any knowledge of any

72
00:03:02,900 --> 00:03:04,590
surrounding context.

73
00:03:04,590 --> 00:03:09,390
It's a little bit like a fixed
depth path expression into a

74
00:03:09,390 --> 00:03:10,860
BSON document.

75
00:03:10,860 --> 00:03:12,420
OK, let's have a quiz.

76
00:03:12,420 --> 00:03:15,030
Suppose you had a simple
e-commerce product catalog

77
00:03:15,030 --> 00:03:17,920
with a collection called catalog
whose documents look

78
00:03:17,920 --> 00:03:18,750
sort of like this.

79
00:03:18,750 --> 00:03:22,430
They have a product field, and
a price field, and a reviews

80
00:03:22,430 --> 00:03:25,750
field, whose corresponding
value is an array with

81
00:03:25,750 --> 00:03:28,220
embedded documents as the
elements of the array, and the

82
00:03:28,220 --> 00:03:31,580
embedded documents inside the
array each have a user, a

83
00:03:31,580 --> 00:03:33,510
comment, and a rating.

84
00:03:33,510 --> 00:03:36,620
How would you write a query that
finds all products in the

85
00:03:36,620 --> 00:03:39,780
catalog collection that cost
more than $10,000 and have a

86
00:03:39,780 --> 00:03:41,480
rating of five or better?

87
00:03:41,480 --> 00:03:44,230
So the price should be greater
than $10,000, and there should

88
00:03:44,230 --> 00:03:46,530
be at least one rating
of five or greater.

89
00:03:46,530 --> 00:03:47,780