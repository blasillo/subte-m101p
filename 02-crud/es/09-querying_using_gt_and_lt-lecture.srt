1
00:00:00,000 --> 00:00:00,160

2
00:00:00,160 --> 00:00:01,870
OK, entremos un poco más en
detalle respecto a las

3
00:00:01,870 --> 00:00:03,370
facultades de las consultas.

4
00:00:03,370 --> 00:00:05,710
Ya hemos visto cómo hacer consultas
usando los valores específicos de

5
00:00:05,710 --> 00:00:09,560
ciertos campos, como "student"
"19" y "type" "essay", pero

6
00:00:09,560 --> 00:00:11,810
necesitas poder hacer un poco más
para poder construir la mayoría

7
00:00:11,810 --> 00:00:13,200
de aplicaciones prácticas.

8
00:00:13,200 --> 00:00:16,050
Lo que hemos hecho hasta ahora
lo llamamos "hacer consultas por

9
00:00:16,050 --> 00:00:19,240
consultas ejemplares", donde 
usas un ejemplo de los campos

10
00:00:19,240 --> 00:00:20,355
que quieres ver en
los documentos

11
00:00:20,355 --> 00:00:21,820
que deseas recuperar.

12
00:00:21,820 --> 00:00:25,130
Por ejemplo, "student"
"19" y "type" "essay".

13
00:00:25,130 --> 00:00:27,550
Pero muchos tipos de consultas
necesitan algo más que

14
00:00:27,550 --> 00:00:29,050
valores constantes.

15
00:00:29,050 --> 00:00:31,480
Por ejemplo, si yo quiero recuperar
todas las consultas donde el

16
00:00:31,480 --> 00:00:36,140
"score" fue más que, digamos "95",
puedo hacerlo en MongoDB usando

17
00:00:36,140 --> 00:00:38,190
los operadores de consulta.

18
00:00:38,190 --> 00:00:40,370
Para hacer una consulta, una
vez más, empezamos con la misma

19
00:00:40,370 --> 00:00:41,730
sintaxis que hemos utilizado antes.

20
00:00:41,730 --> 00:00:44,210
El identificador de la base de datos,
punto, el nombre de la colección,

21
00:00:44,210 --> 00:00:45,920
punto, el método "find".

22
00:00:45,920 --> 00:00:47,400
El primer argumento de
"find", una vez más,

23
00:00:47,400 --> 00:00:48,910
es la cláusula WHERE.

24
00:00:48,910 --> 00:00:52,160
En este caso, si quiero pasarle
una comparación de desigualdad 

25
00:00:52,160 --> 00:00:55,070
para un campo en particular,
tipo "score", puedo hacerlo 

26
00:00:55,070 --> 00:00:58,500
especificando el nombre del
campo y el valor correspondiente

27
00:00:58,500 --> 00:01:02,030
en este primer argumento de "find"
va a ser un subdocumento conteniendo

28
00:01:02,030 --> 00:01:04,599
un operador como valor correspondiente.

29
00:01:04,599 --> 00:01:09,050
En este caso, dólar, "gt" y
algún argumento para el operador.

30
00:01:09,050 --> 00:01:12,380
Cerramos el documento y retornamos
para volver a leer esto.

31
00:01:12,380 --> 00:01:14,320
Lo que dice esto es
que el "score" debe

32
00:01:14,320 --> 00:01:16,020
ser mayor a 95.

33
00:01:16,020 --> 00:01:19,240
Ésta es nuestra primera experiencia
con consultas no usando valores

34
00:01:19,240 --> 00:01:20,810
constantes en campos tipo "score".

35
00:01:20,810 --> 00:01:23,180
En este caso, estamos haciendo una
comparación de desigualdad para el

36
00:01:23,180 --> 00:01:24,750
campo "score".

37
00:01:24,750 --> 00:01:27,280
Recibimos un número de
documentos y al parecer al

38
00:01:27,280 --> 00:01:29,800
lado derecho es como si
estos valores son todos

39
00:01:29,800 --> 00:01:30,880
mayores a "95".

40
00:01:30,880 --> 00:01:37,970
Veo un "96", un "98", un "97",
otro "97", "99", etcétera.

41
00:01:37,970 --> 00:01:40,550
Una vez más, la consulta se
parece a lo que tengo en mi

42
00:01:40,550 --> 00:01:41,650
ventana del terminal.

43
00:01:41,650 --> 00:01:44,720
El nombre del campo, tipo "score"
y de ahí un valor correspondiente

44
00:01:44,720 --> 00:01:47,860
que es un documento embebido
conteniendo un operador,

45
00:01:47,860 --> 00:01:50,930
en este caso dólar
"gt" y "95".

46
00:01:50,930 --> 00:01:53,840
Puedo ir más allá y agregar
otro campo a la consulta,

47
00:01:53,840 --> 00:01:58,820
por ejemplo, "score" "95" y
"type" "essay", en cuyo caso

48
00:01:58,820 --> 00:02:01,840
sólo recibiría resultados donde
"type" es "essay" y "score" es

49
00:02:01,840 --> 00:02:03,030
mayor a "95".

50
00:02:03,030 --> 00:02:04,630
Una vez más, veamos esto en
la parte inferior de mi

51
00:02:04,630 --> 00:02:06,750
terminal. Ahí está.

52
00:02:06,750 --> 00:02:10,009
Ahora, puedes poner múltiples
restricciones para el mismo campo.

53
00:02:10,009 --> 00:02:13,410
Por ejemplo, si quiero valores de
"score" que son mayores a "95" y

54
00:02:13,410 --> 00:02:15,720
menores o iguales a 98,

55
00:02:15,720 --> 00:02:18,200
lo especifico así como lo ves en
la parte inferior de mi pantalla. 

56
00:02:18,200 --> 00:02:22,050
Es decir, "score" tiene como
valor correspondiente dentro de

57
00:02:22,050 --> 00:02:25,890
este documento de consulta, un
documento embebido con los campos

58
00:02:25,890 --> 00:02:29,870
dólar "gt" y dólar "lte"
con los respectivos

59
00:02:29,870 --> 00:02:32,430
valores "95" y "98"

60
00:02:32,430 --> 00:02:35,390
El significado de esta
construcción peculiar es

61
00:02:35,390 --> 00:02:38,600
que "score" debe ser
estrictamente mayor a "95"

62
00:02:38,600 --> 00:02:40,620
y menor o igual a "98".

63
00:02:40,620 --> 00:02:42,960
Adicionalmente, "type"
debe ser "essay".

64
00:02:42,960 --> 00:02:43,930
Se ve bien.

65
00:02:43,930 --> 00:02:46,660
Los resultados en la pantalla,
por lo menos, sugieren que estoy

66
00:02:46,660 --> 00:02:49,320
viendo resultados desde
"96" hasta "98".

67
00:02:49,320 --> 00:02:52,570
Éste es nuestro primer ejemplo
de un operador de consulta en 

68
00:02:52,570 --> 00:02:53,690
el lenguaje de consulta de MongoDB.

69
00:02:53,690 --> 00:02:56,000
Bueno, supongo que los
primeros dos ejemplos,

70
00:02:56,000 --> 00:02:58,060
dólar "gt" y dólar "lte".

71
00:02:58,060 --> 00:03:01,680
No es sorpresa que tengamos el
operador dólar "gte", el cual 


72
00:03:01,680 --> 00:03:04,620
significa mayor o igual a, y
el operador dólar "lt", el cual

73
00:03:04,620 --> 00:03:06,570
significa estrictamente menor a.

74
00:03:06,570 --> 00:03:10,550
Una vez más, como recordatorio,
los dos campos "score" y "type"

75
00:03:10,550 --> 00:03:13,550
ocurren al nivel más alto de
este documento de consulta,

76
00:03:13,550 --> 00:03:17,160
lo que significa que tanto "score"
como "type" deben ser igualados

77
00:03:17,160 --> 00:03:19,360
por los resultados de acuerdo
a sus respectivos criterios.

78
00:03:19,360 --> 00:03:23,450
Entonces esto es equivalente al
resultado lógico de "score"

79
00:03:23,450 --> 00:03:26,910
estando en el rango desde "95"
hasta, pero excluyendo, "98".

80
00:03:26,910 --> 00:03:29,130
Y el tipo debe ser igual a "essay"

81
00:03:29,130 --> 00:03:30,890
Se ve bien.

82
00:03:30,890 --> 00:03:33,450
Hay un número de operadores de
consulta en el lenguaje de consulta

83
00:03:33,450 --> 00:03:36,990
de MongoDB, algunos de los cuales
iremos visitando mientras avanzamos.

84
00:03:36,990 --> 00:03:38,740
OK, hagamos un cuestionario.

85
00:03:38,740 --> 00:03:40,700
¿Cuál de éstos encuentra
documentos con un "score"

86
00:03:40,700 --> 00:03:43,630
entre "50" y "60", inclusive?