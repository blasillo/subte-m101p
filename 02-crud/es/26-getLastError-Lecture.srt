1
00:00:00,000 --> 00:00:00,190

2
00:00:00,190 --> 00:00:01,720
Esta sección sólo aplica

3
00:00:01,720 --> 00:00:03,920
a MongoDB 2.4 y versiones anteriores.

4
00:00:03,920 --> 00:00:06,589
Si estás usando MongoDB
2.6 o versiones posteriores,

5
00:00:06,589 --> 00:00:07,880
puedes saltarte esta sección.

6
00:00:07,880 --> 00:00:09,440
No estará en las tareas.

7
00:00:09,440 --> 00:00:11,605
Bien, ahora que hemos aprendido
las operaciones "CRUD" básicas

8
00:00:11,605 --> 00:00:16,494
que ofrece MongoDB, "insert",
"find", "update" y "remove",

9
00:00:16,494 --> 00:00:17,910
hay unas cuantas cosas más

10
00:00:17,910 --> 00:00:21,160
que necesitas saber acerca
de los detalles exactos de

11
00:00:21,160 --> 00:00:22,260
las operaciones en MongoDB.

12
00:00:22,260 --> 00:00:24,500
El shell es un
entorno interactivo,

13
00:00:24,500 --> 00:00:27,780
y por lo tanto te da información
cuando algo va mal.

14
00:00:27,780 --> 00:00:31,110
Por ejemplo, mencioné antes
que el campo "_id"

15
00:00:31,110 --> 00:00:32,880
es una clave primaria.

16
00:00:32,880 --> 00:00:34,500
Es obligatorio que exista.

17
00:00:34,500 --> 00:00:36,060
Es obligatorio que sea único.

18
00:00:36,060 --> 00:00:38,630
Y además hacemos que
sea inmutable.

19
00:00:38,630 --> 00:00:40,910
Si inserto un documento con
una clave primaria particular,

20
00:00:40,910 --> 00:00:43,220
por ejemplo, "Smith",
bien, tengo motivos para

21
00:00:43,220 --> 00:00:44,995
creer que se
insertó un documento.

22
00:00:44,995 --> 00:00:47,620
Te contaré un poco más
sobre cómo puedes confirmar eso.

23
00:00:47,620 --> 00:00:50,890
Si intento insertar un segundo
documento con nombre "Smith",

24
00:00:50,890 --> 00:00:53,290
el shell me devolverá
un mensaje de error.

25
00:00:53,290 --> 00:00:55,970
De hecho, el shell
interactivo siempre

26
00:00:55,970 --> 00:00:59,020
comprueba si la última
operación tuvo éxito o

27
00:00:59,020 --> 00:01:01,880
falló y te dice
inmediatamente si falló.

28
00:01:01,880 --> 00:01:04,700
Hasta ahora no te he enseñado
ninguna operación que falle.

29
00:01:04,700 --> 00:01:06,696
Esto sería un poco de
malicia premeditada.

30
00:01:06,696 --> 00:01:08,070
Sin embargo,
programáticamente

31
00:01:08,070 --> 00:01:10,440
puedes comprobar si una
operación tuvo éxito o falló

32
00:01:10,440 --> 00:01:11,880
ejecutando un comando.

33
00:01:11,880 --> 00:01:13,630
En realidad ya hemos
usado algunos comandos.

34
00:01:13,630 --> 00:01:15,830
Por ejemplo, "count" es
en realidad un comando.

35
00:01:15,830 --> 00:01:18,460
En cualquier caso, hay un
comando llamado "getLastError",

36
00:01:18,460 --> 00:01:21,722
que devuelve el resultado de
la última operación de escritura

37
00:01:21,722 --> 00:01:24,420
que se envió sobre la conexión
que estés usando actualmente.

38
00:01:24,420 --> 00:01:26,860
El resultado de "getLastError"
es un documento.

39
00:01:26,860 --> 00:01:28,510
Y en caso de un
escenario de error,

40
00:01:28,510 --> 00:01:30,960
el documento tiene
un campo, "err", que

41
00:01:30,960 --> 00:01:34,120
es un valor no nulo que
contiene el mensaje de error.

42
00:01:34,120 --> 00:01:36,670
La mayoría de los errores también
tienen un código entero único,

43
00:01:36,670 --> 00:01:38,800
que aparece en
el campo "code".

44
00:01:38,800 --> 00:01:41,080
"getLastError" está disponible
tanto en el shell como en

45
00:01:41,080 --> 00:01:42,670
todos nuestros
drivers como una forma

46
00:01:42,670 --> 00:01:45,410
de comprobar si una operación de
escritura tuvo éxito o falló.

47
00:01:45,410 --> 00:01:47,520
En el caso de una operación
de escritura con éxito,

48
00:01:47,520 --> 00:01:49,790
por ejemplo, insertaré
otro documento con

49
00:01:49,790 --> 00:01:51,630
un "_id" diferente.

50
00:01:51,630 --> 00:01:53,350
En este caso, el
comando "getLastError"

51
00:01:53,350 --> 00:01:55,110
me dirá que
el error es "null",

52
00:01:55,110 --> 00:01:58,090
es decir, que la
operación tuvo éxito.

53
00:01:58,090 --> 00:02:01,350
Para otros tipos de operaciones,
como las actualizaciones,

54
00:02:01,350 --> 00:02:03,700
"getLastError" puede decirme
el resultado de la actualización.

55
00:02:03,700 --> 00:02:05,555
En este caso, especificaré
un "update" que debería

56
00:02:05,555 --> 00:02:07,930
afectar a todos los
documentos de la colección

57
00:02:07,930 --> 00:02:08,990
añadiendo un campo "title".

58
00:02:08,990 --> 00:02:11,160
"getLastError", tras
ese "update",

59
00:02:11,160 --> 00:02:14,500
me dice que los documentos que
fueron actualizados ya existían

60
00:02:14,500 --> 00:02:15,840
y que había dos de ellos.

61
00:02:15,840 --> 00:02:17,798
Así es como podría averiguar
cuántos documentos se vieron

62
00:02:17,798 --> 00:02:19,240
afectados por un "update".

63
00:02:19,240 --> 00:02:22,080
Por otro lado, si en vez de
hacer un "update" múltiple,

64
00:02:22,080 --> 00:02:24,440
hago un "upsert",
es decir,

65
00:02:24,440 --> 00:02:27,290
una operación "update" que
actualizará un documento

66
00:02:27,290 --> 00:02:29,450
con nombre "Thompson",
si existe,

67
00:02:29,450 --> 00:02:33,280
o creará un documento con dicho
nombre y "title" igual a "Dr",

68
00:02:33,280 --> 00:02:34,620
si no existe.

69
00:02:34,620 --> 00:02:37,300
Tras esa operación
"upsert", "getLastError"

70
00:02:37,300 --> 00:02:40,270
me dice que no actualizó
ningún documento existente,

71
00:02:40,270 --> 00:02:43,745
pero que insertó un nuevo
documento, devolviendo

72
00:02:43,745 --> 00:02:44,730
su "_id".

73
00:02:44,730 --> 00:02:46,300
Así que ya ves, el
comando "getLastError"

74
00:02:46,300 --> 00:02:48,810
sirve tanto para averiguar si
una operación de escritura

75
00:02:48,810 --> 00:02:51,050
tuvo éxito o falló,
como también para obtener

76
00:02:51,050 --> 00:02:53,400
información acerca de las
operaciones de escritura con éxito

77
00:02:53,400 --> 00:02:54,990
que acaban de ejecutarse.

78
00:02:54,990 --> 00:02:57,120
De nuevo, el shell te
dice automáticamente

79
00:02:57,120 --> 00:02:58,770
cuando una operación
de escritura falla.

80
00:02:58,770 --> 00:03:00,510
Hasta ahora, he
dicho repetidamente

81
00:03:00,510 --> 00:03:03,100
que tengo motivos para creer
que mis operaciones de escritura

82
00:03:03,100 --> 00:03:03,850
tuvieron éxito.

83
00:03:03,850 --> 00:03:05,820
Ese motivo era simplemente
que el shell no me

84
00:03:05,820 --> 00:03:07,390
dijo lo contrario.

85
00:03:07,390 --> 00:03:10,030
Por último, si decido eliminar
todas las personas de la

86
00:03:10,030 --> 00:03:12,360
colección "people", el
comando "getLastError"

87
00:03:12,360 --> 00:03:15,160
me dirá que se borraron
tres documentos,

88
00:03:15,160 --> 00:03:16,860
"n: 3".

89
00:03:16,860 --> 00:03:19,330
Volveremos a ver más acerca
del comando "getLastError"

90
00:03:19,330 --> 00:03:20,910
en una parte posterior del curso.

91
00:03:20,910 --> 00:03:22,909
Por ahora, deberías
comprender que es la forma

92
00:03:22,909 --> 00:03:25,369
de comprobar si una operación de
escritura tuvo éxito o falló.

93
00:03:25,369 --> 00:03:26,910
La mecánica de todos
estos detalles han

94
00:03:26,910 --> 00:03:30,225
cambiado sustancialmente en
MongoDB 2.6, de forma que

95
00:03:30,225 --> 00:03:32,620
ya no necesitas ejecutar
el comando "getLastError".

96
00:03:32,620 --> 00:03:35,490
Está implícito en todas
las operaciones de escritura.
