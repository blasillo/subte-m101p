1
00:00:00,000 --> 00:00:00,250

2
00:00:00,250 --> 00:00:00,830
OK.

3
00:00:00,830 --> 00:00:02,440
Comencemos a trabajar con
documentos un poco más

4
00:00:02,440 --> 00:00:03,960
complicados en términos
de su estructura.

5
00:00:03,960 --> 00:00:06,410
Primero, creemos un documento
que contiene un array embebido

6
00:00:06,410 --> 00:00:07,620
dentro de sí.

7
00:00:07,620 --> 00:00:11,330
Por ejemplo, ahora tengo dos
documentos en una colección

8
00:00:11,330 --> 00:00:14,230
llamada "accounts", uno para
"George" y otro para "Howard".

9
00:00:14,230 --> 00:00:17,720
George contiene un array
embebido llamado "favorites",

10
00:00:17,720 --> 00:00:19,110
el cual contiene las cadenas

11
00:00:19,110 --> 00:00:20,630
"ice cream" y "pretzels".

12
00:00:20,630 --> 00:00:23,790
Mientras que "Howard" contiene
un array embebido "favorites"

13
00:00:23,790 --> 00:00:25,030
que contiene "pretzels" y "beer".

14
00:00:25,030 --> 00:00:27,510
Supongamos que quiero acceder
todos los documentos donde el

15
00:00:27,510 --> 00:00:30,300
array "favorites"
contiene "pretzels".

16
00:00:30,300 --> 00:00:34,190
Ocurre que MongoDB, en sus
operaciones de consulta, es

17
00:00:34,190 --> 00:00:35,290
un tanto polimorfo.

18
00:00:35,290 --> 00:00:37,990
En particular, si ingreso
la siguiente consulta, puedes

19
00:00:37,990 --> 00:00:39,700
considerar que se ejecuta

20
00:00:39,700 --> 00:00:41,100
de la siguiente manera:

21
00:00:41,100 --> 00:00:43,890
Para cada documento en la
colección "accounts", encuentra

22
00:00:43,890 --> 00:00:45,440
el campo llamado "favorites".

23
00:00:45,440 --> 00:00:48,580
Si el campo llamado "favorites"
contiene un valor de cadena y

24
00:00:48,580 --> 00:00:51,580
éste es igual a "pretzels",
entonces el documento empareja

25
00:00:51,580 --> 00:00:53,320
y debe ser retornado
por esta consulta.

26
00:00:53,320 --> 00:00:56,120
Si el documento tiene un campo
llamado "favorites" y el valor

27
00:00:56,120 --> 00:00:59,630
de favorites es un array,
entonces busca dentro de

28
00:00:59,630 --> 00:01:02,530
aquel array para ver si cualquiera
de los elementos en el array es una

29
00:01:02,530 --> 00:01:05,160
cadena que es igual a
la cadena "pretzels",

30
00:01:05,160 --> 00:01:07,500
en cuyo caso, el documento empareja.

31
00:01:07,500 --> 00:01:11,160
Es decir, nuestro emparejamiento
es polimorfo respecto a arrays

32
00:01:11,160 --> 00:01:12,910
y tipos de valores
que no son arrays.

33
00:01:12,910 --> 00:01:15,920
Entonces cuando presiono "enter"
verás que hacer un consulta por

34
00:01:15,920 --> 00:01:17,640
"pretzels" retorna
ambos documentos.

35
00:01:17,640 --> 00:01:21,650
Por lo contrario, buscar "beer"
retorna sólo "Howard".

36
00:01:21,650 --> 00:01:25,250
Ésta es una práctica muy común
en MongoDB, embeber un array de

37
00:01:25,250 --> 00:01:28,990
cadenas o IDs y hacer
consultas de esta manera

38
00:01:28,990 --> 00:01:31,830
por cualquier documento que
tenga un elemento en particular

39
00:01:31,830 --> 00:01:33,460
dentro de algún array.

40
00:01:33,460 --> 00:01:35,010
Hacemos esto automáticamente.

41
00:01:35,010 --> 00:01:37,680
Ahora, un concepto importante
que debemos comprender es que

42
00:01:37,680 --> 00:01:40,010
no se está haciendo una
recursión generalizada acá.

43
00:01:40,010 --> 00:01:42,120
El emparejamiento ocurre más o
menos como te lo acabo de

44
00:01:42,120 --> 00:01:43,110
describir.

45
00:01:43,110 --> 00:01:46,540
Si el campo "favorites" tiene
como valor correspondiente

46
00:01:46,540 --> 00:01:50,070
un array que contiene elementos
embebidos, ninguno de esos

47
00:01:50,070 --> 00:01:53,940
elementos embebidos va a
emparejar con la cadena "pretzel"

48
00:01:53,940 --> 00:01:54,920
o la cadena "beer".

49
00:01:54,920 --> 00:01:55,300
van*

50
00:01:55,300 --> 00:01:58,210
El único nivel de profundidad
que consideramos es el

51
00:01:58,210 --> 00:02:02,080
más alto dentro del array que
tenemos como valor de "favorites".

52
00:02:02,080 --> 00:02:04,770
No hacemos ninguna recursión
hacia profundidades arbitrarias.

53
00:02:04,770 --> 00:02:08,550
No hay ninguna operación en MongoDB
para buscar un campo en particular

54
00:02:08,550 --> 00:02:10,990
con algún valor en particular
de manera recursiva hasta

55
00:02:10,990 --> 00:02:13,190
una profundidad arbitraria
dentro del documento.

56
00:02:13,190 --> 00:02:16,360
Sólo vamos a considerar los
campos que especifiques, o si

57
00:02:16,360 --> 00:02:19,320
el valor correspondiente de un
campo es un array, los elementos

58
00:02:19,320 --> 00:02:22,070
en el nivel más alto de éste,
cuyo valor correspondiente es

59
00:02:22,070 --> 00:02:23,280
el campo que especificaste.

60
00:02:23,280 --> 00:02:24,770
De igual modo, esto
es algo que se utiliza

61
00:02:24,770 --> 00:02:26,420
comúnmente en MongoDB.

62
00:02:26,420 --> 00:02:28,660
Por supuesto, este emparejamiento
puede ser combinado con otros tipos

63
00:02:28,660 --> 00:02:32,490
de emparejamientos, por ejemplo,
"favorites" es "beer" y "name"

64
00:02:32,490 --> 00:02:36,720
mayor a "H" o "favorites"
incluye "pretzels" y "name" es

65
00:02:36,720 --> 00:02:39,180
mayor a "H". Entonces se
combina con otros operadores

66
00:02:39,180 --> 00:02:42,250
de consulta u operadores en
otros campos de una manera

67
00:02:42,250 --> 00:02:43,910
que esperamos, sea intuitiva.

68
00:02:43,910 --> 00:02:44,650
¿Lograste entender eso?

69
00:02:44,650 --> 00:02:46,010
OK, hagamos un cuestionario.

70
00:02:46,010 --> 00:02:48,600
¿Cuáles de los siguientes
cuatro documentos sería

71
00:02:48,600 --> 00:02:49,780
retornado por esta consulta?

72
00:02:49,780 --> 00:02:54,330
"db.product.find" "tag"
dos puntos "shiny".

73
00:02:54,330 --> 00:03:00,530
"ID 42 name Whizzy Wiz-o-matic
tags awesome shiny green".

74
00:03:00,530 --> 00:03:06,770
"ID 704 name Fooey Foo-o-tron
tags blue mediocre".

75
00:03:06,770 --> 00:03:13,370
"ID 1040 name Snappy Snap-o-lux
tags shiny".

76
00:03:13,370 --> 00:03:16,460
"ID 12345 [? Quaxinator ?]"

77
00:03:16,460 --> 00:03:17,710
"tags" un array vacío.

78
00:03:17,710 --> 00:03:18,890