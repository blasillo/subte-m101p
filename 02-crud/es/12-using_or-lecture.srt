1
00:00:00,000 --> 00:00:00,420

2
00:00:00,420 --> 00:00:02,270
Hay que aprender cómo juntar
múltiples consultas con

3
00:00:02,270 --> 00:00:03,780
un conector lógico.

4
00:00:03,780 --> 00:00:06,250
Ya hemos visto cómo puedes
hacer consultas basadas en

5
00:00:06,250 --> 00:00:09,610
igualdad y desigualdad numérica,
igualdad y desigualdad de cadenas,

6
00:00:09,610 --> 00:00:13,530
expresiones regulares
sobre cadenas, y

7
00:00:13,530 --> 00:00:16,360
la verificación de si un campo
contiene un tipo en particular

8
00:00:16,360 --> 00:00:17,940
o si un campo existe.

9
00:00:17,940 --> 00:00:19,950
A veces quieres la unión
de algunas consultas

10
00:00:19,950 --> 00:00:20,970
complicadas tipo éstas.

11
00:00:20,970 --> 00:00:24,580
Es decir, cualquier documento que
empareje con ciertos criterios

12
00:00:24,580 --> 00:00:25,460
u otros criterios. 

13
00:00:25,460 --> 00:00:28,710
En efecto, MongoDB te ofrece
un operador para hacer esto.

14
00:00:28,710 --> 00:00:31,160
Por ejemplo, en la colección
"people", si quieres encontrar

15
00:00:31,160 --> 00:00:34,680
todas aquellas personas cuyos
nombres terminen con una "e" o

16
00:00:34,680 --> 00:00:38,610
que tengan un campo con su edad, puedes
hacerlo usando el operador dólar "or".

17
00:00:38,610 --> 00:00:41,460
Eso se ve algo como lo siguiente.

18
00:00:41,460 --> 00:00:43,780
El operador dólar "or", a diferencia
del resto de los operadores

19
00:00:43,780 --> 00:00:47,060
de consulta que hemos visto hasta
ahora, es un operador prefijo.

20
00:00:47,060 --> 00:00:49,520
Va antes de las sub-
consultas que va

21
00:00:49,520 --> 00:00:50,690
a conectar.

22
00:00:50,690 --> 00:00:54,370
Toma como parámetro un
array cuyos elementos son

23
00:00:54,370 --> 00:00:56,840
en sí consultas que podrías
ingresar por separado y

24
00:00:56,840 --> 00:00:59,680
computa el conjunto de todos
los documentos que satisfagan

25
00:00:59,680 --> 00:01:01,670
cualquiera de las
consultas en el array.

26
00:01:01,670 --> 00:01:04,769
Entonces, por ejemplo, lo que está
en la pantalla muestra que "name"

27
00:01:04,769 --> 00:01:07,600
debería emparejar con la expresión
regular "termina con 'e'", y

28
00:01:07,600 --> 00:01:09,540
que "age" debería existir.

29
00:01:09,540 --> 00:01:11,800
Entonces cualquiera de estos criterios
debe ser satisfecho para que un

30
00:01:11,800 --> 00:01:13,360
documento sea retornado.

31
00:01:13,360 --> 00:01:16,820
Vemos que el resultado
tiene documentos donde "age"

32
00:01:16,820 --> 00:01:19,320
es "30" o "35". Ésos
son "Smith" y "Jones".


33
00:01:19,320 --> 00:01:22,370
Y tiene estos documentos cuyos
nombres terminan con "e", como 

34
00:01:22,370 --> 00:01:23,950
"Alice", "Charlie" y "Dave".

35
00:01:23,950 --> 00:01:26,360
Como puedes ver, nuestros
documentos de consulta se

36
00:01:26,360 --> 00:01:27,320
vuelven algo complicados.

37
00:01:27,320 --> 00:01:29,930
Hay algo de desorden con el
cierre de corchetes en la parte

38
00:01:29,930 --> 00:01:31,670
derecha de la pantalla.

39
00:01:31,670 --> 00:01:33,710
A algunas personas les parece un
poco difícil acostumbrarse a esto,

40
00:01:33,710 --> 00:01:36,620
pero, en mi experiencia,
toma sólo algunas horas o

41
00:01:36,620 --> 00:01:38,960
tal vez un par de días para
que te familiarices con lo que

42
00:01:38,960 --> 00:01:40,070
tienes que ingresar.

43
00:01:40,070 --> 00:01:43,790
Acuérdate que la meta es cerrar
todos los objetos JSON de una

44
00:01:43,790 --> 00:01:45,510
manera sintácticamente correcta.

45
00:01:45,510 --> 00:01:47,680
El shell, en efecto,
te puede ayudar con esto.

46
00:01:47,680 --> 00:01:50,020
Tal vez notaste que
al mover el cursor,

47
00:01:50,020 --> 00:01:53,170
cuando el cursor está sobre
un símbolo de agrupación,

48
00:01:53,170 --> 00:01:56,470
como los paréntesis, o un
paréntesis cuadrado o un corchete,

49
00:01:56,470 --> 00:01:59,570
el símbolo correspondiente
es resaltado en una especie

50
00:01:59,570 --> 00:02:01,190
de azul oscuro.

51
00:02:01,190 --> 00:02:03,820
Actualmente, mi cursor está sobre
el paréntesis izquierdo en

52
00:02:03,820 --> 00:02:07,010
la parte derecha de esta
línea de JavaScript y el

53
00:02:07,010 --> 00:02:08,930
paréntesis de apertura
correspondiente a la

54
00:02:08,930 --> 00:02:10,570
izquierda, está en azul.

55
00:02:10,570 --> 00:02:13,680
Mientras continúo moviéndome
hacia atrás, más y más,

56
00:02:13,680 --> 00:02:16,600
los símbolos de agrupación dentro
de la expresión JavaScript están

57
00:02:16,600 --> 00:02:18,270
siendo resaltados en azul.

58
00:02:18,270 --> 00:02:20,280
Esto te puede ayudar a
verificar si es que

59
00:02:20,280 --> 00:02:21,820
haz emparejado todo correctamente.

60
00:02:21,820 --> 00:02:24,420
Como un detalle separado, si
te equivocas en el emparejamiento,

61
00:02:24,420 --> 00:02:27,590
por ejemplo, si saco digamos
el paréntesis cuadrado que se

62
00:02:27,590 --> 00:02:29,690
supone cierra el
array que va con el

63
00:02:29,690 --> 00:02:32,680
"or", JavaScript va imprimir
tres puntos suspensivos.

64
00:02:32,680 --> 00:02:35,680
Estos puntos suspensivos significan
que lo que ingresaste está incompleto.

65
00:02:35,680 --> 00:02:38,590
Lo que ocurre es que no hay una
manera correcta de completar

66
00:02:38,590 --> 00:02:40,940
esta expresión, porque he
excluido un símbolo de agrupación

67
00:02:40,940 --> 00:02:43,160
que estaba muy adentro del
documento que estaba

68
00:02:43,160 --> 00:02:44,530
tratando de construir.

69
00:02:44,530 --> 00:02:46,940
Para poder terminar estos
intentos de JavaScript de

70
00:02:46,940 --> 00:02:50,080
diseccionar este fragmento, puedo
apretar "enter" dos veces, lo que

71
00:02:50,080 --> 00:02:51,340
hará que el "prompt" regrese.

72
00:02:51,340 --> 00:02:53,840
En ese momento, podría tratar de
reingresar la consulta, o lo que

73
00:02:53,840 --> 00:02:56,290
sea que no había podido
completar correctamente.

74
00:02:56,290 --> 00:03:00,730
Entonces, para resumir, el
operador dólar "or" toma un

75
00:03:00,730 --> 00:03:03,160
array y ese array
contiene documentos.

76
00:03:03,160 --> 00:03:05,990
Cada documento es tratado
como una consulta separada.

77
00:03:05,990 --> 00:03:08,900
El operador dólar "or" empareja
con cualquier documento

78
00:03:08,900 --> 00:03:11,530
que empareje con cualquiera
de las consultas en el array.

79
00:03:11,530 --> 00:03:15,080
Entonces, en efecto, computa
la unión de estas consultas.

80
00:03:15,080 --> 00:03:16,680
Si entendiste todo eso,
hay que hacer un cuestionario.

81
00:03:16,680 --> 00:03:19,770
¿Cómo escribirías una consulta
para encontrar todos los documentos

82
00:03:19,770 --> 00:03:23,490
en la colección "scores", donde
el campo "score" es menor que "50"

83
00:03:23,490 --> 00:03:26,150
o mayor que "90"?
