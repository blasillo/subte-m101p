1
00:00:00,000 --> 00:00:00,100

2
00:00:00,100 --> 00:00:02,890
In this problem, we asked you to
remove the lowest homework

3
00:00:02,890 --> 00:00:04,440
score for each student.

4
00:00:04,440 --> 00:00:07,200
The algorithm that we suggested
was to sort the

5
00:00:07,200 --> 00:00:10,940
scores by student ID and then
by score ascending.

6
00:00:10,940 --> 00:00:14,450
Now, we're only looking at the
documents that are of type

7
00:00:14,450 --> 00:00:16,000
homework in this case.

8
00:00:16,000 --> 00:00:19,070
And if we do that, and we set
the student ID to a sensible

9
00:00:19,070 --> 00:00:21,890
value to start, whenever the
student ID changes, we know

10
00:00:21,890 --> 00:00:23,940
that we're looking at the lowest
score for that student,

11
00:00:23,940 --> 00:00:25,180
and we can just remove it.

12
00:00:25,180 --> 00:00:27,840
So we start by removing this
document right here.

13
00:00:27,840 --> 00:00:30,150
Then as we go through, we notice
the student ID changes

14
00:00:30,150 --> 00:00:32,850
during this transition as
reiterating through, so we

15
00:00:32,850 --> 00:00:36,330
remove that document, then we
remove this document, and we

16
00:00:36,330 --> 00:00:37,420
remove this document.

17
00:00:37,420 --> 00:00:40,020
And we go through all the
students, and we remove the

18
00:00:40,020 --> 00:00:42,040
lowest homework score
for each one.

19
00:00:42,040 --> 00:00:44,800
Let's look at that
as a program.

20
00:00:44,800 --> 00:00:47,260
Here is the program that
I wrote to do it.

21
00:00:47,260 --> 00:00:48,660
It's got two different
functions.

22
00:00:48,660 --> 00:00:50,770
This one removes lowest
function.

23
00:00:50,770 --> 00:00:53,215
It calls grades that
find type homework.

24
00:00:53,215 --> 00:00:55,210
It sorts by the student
ID ascending

25
00:00:55,210 --> 00:00:57,210
and the score ascending.

26
00:00:57,210 --> 00:01:00,090
It sets the student ID to a
sensible value to start.

27
00:01:00,090 --> 00:01:02,950
And then as it goes through each
of these entries in the

28
00:01:02,950 --> 00:01:05,250
collection, if the student
ID is different than the

29
00:01:05,250 --> 00:01:07,570
proceeding student ID, it knows
that it's looking at the

30
00:01:07,570 --> 00:01:09,850
lowest homework score for the
student, and then it calls

31
00:01:09,850 --> 00:01:12,460
remove score on that
Student ID.

32
00:01:12,460 --> 00:01:14,385
And every time through
the loop, it also

33
00:01:14,385 --> 00:01:16,300
updates student ID.

34
00:01:16,300 --> 00:01:20,480
So if we look at the remove
score function right here, it

35
00:01:20,480 --> 00:01:23,005
tries to find a document that
it's being asked to remove the

36
00:01:23,005 --> 00:01:26,680
underscore ID, just prints it
out for debugging purposes.

37
00:01:26,680 --> 00:01:29,380
And then it calls grades that
remove underscore ID equals

38
00:01:29,380 --> 00:01:32,710
the ID that was set into the
function right here.

39
00:01:32,710 --> 00:01:33,325
That's how it works.

40
00:01:33,325 --> 00:01:37,010
Let's watch it work, and then we
just want to call Python on

41
00:01:37,010 --> 00:01:40,340
drop lowest and printed out a
bunch of stuff, but basically,

42
00:01:40,340 --> 00:01:43,050
it removed one document for
each of the students.

43
00:01:43,050 --> 00:01:45,640
And then we asked you to run
some aggregation query, which

44
00:01:45,640 --> 00:01:48,080
we won't explain too much right
now, because there's

45
00:01:48,080 --> 00:01:50,390
actually a separate unit on
this, but I'll take you

46
00:01:50,390 --> 00:01:51,510
through real fast.

47
00:01:51,510 --> 00:01:54,250
The aggregation framework works
as a pipeline, and the

48
00:01:54,250 --> 00:01:56,820
first thing it does is it groups
all the documents by

49
00:01:56,820 --> 00:02:00,320
student ID and finds
the average of

50
00:02:00,320 --> 00:02:02,130
the student's works.

51
00:02:02,130 --> 00:02:04,270
And then it sorts
by that average.

52
00:02:04,270 --> 00:02:06,570
That's a document to
set down a pipeline

53
00:02:06,570 --> 00:02:07,840
sorted by the average.

54
00:02:07,840 --> 00:02:10,570
And then finally, we limit it to
the top one, because one of

55
00:02:10,570 --> 00:02:12,620
the highest grade point
average of the class.

56
00:02:12,620 --> 00:02:15,810
So if we run that, and the
result of this aggregation

57
00:02:15,810 --> 00:02:19,980
framework query is that the
document with the highest

58
00:02:19,980 --> 00:02:22,170
average has underscore
ID, which is

59
00:02:22,170 --> 00:02:23,660
actually the student ID.

60
00:02:23,660 --> 00:02:25,410
Where the framework works,
that winds up in the

61
00:02:25,410 --> 00:02:28,190
underscore ID field at this
end of this pipeline.

62
00:02:28,190 --> 00:02:30,430
And the average of that
student is 96.

63
00:02:30,430 --> 00:02:33,920
So the answer for this
question was 54.