1
00:00:00,000 --> 00:00:00,190

2
00:00:00,190 --> 00:00:01,620
Now it's time to turn
our attention to

3
00:00:01,620 --> 00:00:03,670
our good friend regex.

4
00:00:03,670 --> 00:00:06,410
You all remember regex when we
went through the Mongo shell

5
00:00:06,410 --> 00:00:10,200
using regular expressions
to look into documents.

6
00:00:10,200 --> 00:00:13,475
Let's go into the Mongo shell
now and take a quick look at

7
00:00:13,475 --> 00:00:18,020
the document structure that
exists inside these Reddit

8
00:00:18,020 --> 00:00:20,220
stories that we imported.

9
00:00:20,220 --> 00:00:22,670
So just looking here you can see
that there seems to be a

10
00:00:22,670 --> 00:00:26,070
whole bunch of stuff, like a
title approved by, hidden

11
00:00:26,070 --> 00:00:29,290
field, subreddit id, a whole
bunch of good stuff.

12
00:00:29,290 --> 00:00:32,020
So let's just say we wanted to
find everything with a title

13
00:00:32,020 --> 00:00:34,010
that had Microsoft in it.

14
00:00:34,010 --> 00:00:36,220
It looked like there were a few
stories on the Reddit home

15
00:00:36,220 --> 00:00:38,350
page with Microsoft in it.

16
00:00:38,350 --> 00:00:42,390
To do that for the Mongo shell
it would look like this.

17
00:00:42,390 --> 00:00:46,410
We would call it db dot stories
dot find, and we'd ask

18
00:00:46,410 --> 00:00:49,770
for titles that matched
regex Microsoft.

19
00:00:49,770 --> 00:00:53,670
And I'm just going to project
just the title key and

20
00:00:53,670 --> 00:00:56,270
suppress the id key
for simplicity.

21
00:00:56,270 --> 00:00:59,420
And you can see there are one,
two, three, four of them.

22
00:00:59,420 --> 00:01:03,160
And they also appear on Reddit's
technology homepage.

23
00:01:03,160 --> 00:01:06,060
To do this inside Pymongo this
is what we would do.

24
00:01:06,060 --> 00:01:08,810
I've got a little program
that's going to do it.

25
00:01:08,810 --> 00:01:12,110
This is using regex dot py.

26
00:01:12,110 --> 00:01:14,980
Now that we're using the Reddit
stories, it's going to

27
00:01:14,980 --> 00:01:18,790
connect to the Reddit database,
which I imported,

28
00:01:18,790 --> 00:01:20,840
and look at the stories
collection.

29
00:01:20,840 --> 00:01:22,980
Everything else is the same.

30
00:01:22,980 --> 00:01:27,170
You could see here in the
document it says right here

31
00:01:27,170 --> 00:01:31,470
that we're going to look for
things with title when dollar

32
00:01:31,470 --> 00:01:32,760
regex is Microsoft.

33
00:01:32,760 --> 00:01:37,260
And you'll notice here that the
dollar regex has to be in

34
00:01:37,260 --> 00:01:40,350
quotes, although it wasn't
in the Mongo shell.

35
00:01:40,350 --> 00:01:41,430
I have a projection.

36
00:01:41,430 --> 00:01:42,580
I stop calling it
the selector.

37
00:01:42,580 --> 00:01:43,760
I'm calling it the projection.

38
00:01:43,760 --> 00:01:47,430
It's probably more accurate.

39
00:01:47,430 --> 00:01:49,540
And you can see in this
projection we're going to ask

40
00:01:49,540 --> 00:01:52,950
for title and/or suppressing
the underscore id field.

41
00:01:52,950 --> 00:01:57,340
So then I go through and call
scores dot find with that

42
00:01:57,340 --> 00:02:01,060
query with this projection
inside Pymongo.

43
00:02:01,060 --> 00:02:03,010
Let's see what we get
when we do that.

44
00:02:03,010 --> 00:02:06,780
So I'm using underscoring
regex dot py.

45
00:02:06,780 --> 00:02:10,900
I'm going to quit from Mongo and
go using just underscore

46
00:02:10,900 --> 00:02:12,630
regex dot py.

47
00:02:12,630 --> 00:02:16,090
And I see that it prints out
pretty much the same

48
00:02:16,090 --> 00:02:19,550
information, just formatted
slightly differently, because

49
00:02:19,550 --> 00:02:22,730
we're depending on Pythons
built-in print command to

50
00:02:22,730 --> 00:02:25,000
print out these dictionaries.

51
00:02:25,000 --> 00:02:26,320
So that's it.

52
00:02:26,320 --> 00:02:27,570
That's how it works.

53
00:02:27,570 --> 00:02:28,340