1
00:00:00,000 --> 00:00:00,860

2
00:00:00,860 --> 00:00:03,070
Now we're going to go
over Skip, Limit,

3
00:00:03,070 --> 00:00:05,060
and Sort inside PyMongo.

4
00:00:05,060 --> 00:00:07,960
And you've already seen Skip,
Limit, and Sort inside the

5
00:00:07,960 --> 00:00:09,210
Mongo shell.

6
00:00:09,210 --> 00:00:12,265
Now if you recall, the way Skip,
Limit, and Sort work--

7
00:00:12,265 --> 00:00:13,680
and this is true in
most databases--

8
00:00:13,680 --> 00:00:16,960
is that the Sort
happens first.

9
00:00:16,960 --> 00:00:20,930
And after that, Skip, and
after that, the Limit.

10
00:00:20,930 --> 00:00:25,800
So Sort first, then
Skip, then Limit.

11
00:00:25,800 --> 00:00:27,800
It really doesn't matter what
order you give them, that's

12
00:00:27,800 --> 00:00:29,410
the way it works.

13
00:00:29,410 --> 00:00:33,390
Let's go back to our program and
check out how it works in

14
00:00:33,390 --> 00:00:34,940
practice here.

15
00:00:34,940 --> 00:00:38,800
So I'm going back to the
schools collection now,

16
00:00:38,800 --> 00:00:41,170
schools database and the
scores collection.

17
00:00:41,170 --> 00:00:43,230
And I've done a Find here.

18
00:00:43,230 --> 00:00:45,760
The query is a Null Document.

19
00:00:45,760 --> 00:00:48,430
And you can see I've
sorted and I've

20
00:00:48,430 --> 00:00:49,970
skipped and I have limited.

21
00:00:49,970 --> 00:00:53,990
And you can see this is the
syntax for doing these.

22
00:00:53,990 --> 00:00:55,140
The Skip is easy.

23
00:00:55,140 --> 00:00:57,280
You put an integer inside
the parentheses.

24
00:00:57,280 --> 00:01:01,300
The Limit is easy, and the
Source a little more

25
00:01:01,300 --> 00:01:02,330
complicated.

26
00:01:02,330 --> 00:01:06,250
In this case, it's sorting
by student ID and then by

27
00:01:06,250 --> 00:01:07,990
PyMongo.ASCENDING.

28
00:01:07,990 --> 00:01:12,040
This is a constant inside the
driver to indicate that it's

29
00:01:12,040 --> 00:01:13,570
an ascending sort.

30
00:01:13,570 --> 00:01:16,290
So now if we did that,
then let's see

31
00:01:16,290 --> 00:01:17,490
what document we get.

32
00:01:17,490 --> 00:01:21,560
So let's go here, and I'll
clear the screen.

33
00:01:21,560 --> 00:01:28,050
And you can see that I get the
one with student_id 1.

34
00:01:28,050 --> 00:01:33,010
Now, if I go back into
this program and I

35
00:01:33,010 --> 00:01:34,800
change it up a bit.

36
00:01:34,800 --> 00:01:40,190
This time I'm going take this
and I'm going to do

37
00:01:40,190 --> 00:01:42,460
the Skip over here.

38
00:01:42,460 --> 00:01:46,790
And then I'm going
to do the Limit.

39
00:01:46,790 --> 00:01:50,410
And then finally I'm going
to do the Sort.

40
00:01:50,410 --> 00:01:52,050
And I already have the Sort
written out in this next line,

41
00:01:52,050 --> 00:01:53,840
so let me just bring it over.

42
00:01:53,840 --> 00:01:56,020
Now, I'm going to save that.

43
00:01:56,020 --> 00:01:57,230
Don't pay attention
to this line.

44
00:01:57,230 --> 00:01:58,500
It's commented out right now.

45
00:01:58,500 --> 00:02:01,600
I'm going to show you something
about that next.

46
00:02:01,600 --> 00:02:03,140
And you'll notice here
I'm printing out

47
00:02:03,140 --> 00:02:04,620
every doc on the cursor.

48
00:02:04,620 --> 00:02:06,820
I took all that stuff about
limiting it to ten documents

49
00:02:06,820 --> 00:02:10,389
because now I'm using limits
in the query itself.

50
00:02:10,389 --> 00:02:12,960
This is the same query, but this
time we're deliberately

51
00:02:12,960 --> 00:02:15,680
doing the Skip first, then
the Limit, then the Sort.

52
00:02:15,680 --> 00:02:20,630
And let's see what happens
when we run this.

53
00:02:20,630 --> 00:02:26,600
So before you can see, we got
I'm sorry student_id 1.

54
00:02:26,600 --> 00:02:30,760
And now I run it, and once
again, I get student_id 1.

55
00:02:30,760 --> 00:02:31,470
Wow.

56
00:02:31,470 --> 00:02:32,870
That's kind of weird.

57
00:02:32,870 --> 00:02:35,000
Seems almost strange, right?

58
00:02:35,000 --> 00:02:38,880
I mean, you can see very clearly
that I'm running the

59
00:02:38,880 --> 00:02:43,100
Skip and the Limit before
I run the Sort.

60
00:02:43,100 --> 00:02:47,610
But I told you that the Sorts
always happen before the Skips

61
00:02:47,610 --> 00:02:49,560
and the Skips always
before the Limit.

62
00:02:49,560 --> 00:02:51,030
So how does this work?

63
00:02:51,030 --> 00:02:52,470
Seems a little weird.

64
00:02:52,470 --> 00:02:57,360
And of course, the secret is
that the database doesn't

65
00:02:57,360 --> 00:03:00,480
really run the query
until you start

66
00:03:00,480 --> 00:03:02,280
iterating through the cursor.

67
00:03:02,280 --> 00:03:04,690
And that's actually also true
in the Mongo shell.

68
00:03:04,690 --> 00:03:08,900
So in order to allow you to
cascade these in any order,

69
00:03:08,900 --> 00:03:12,540
the query is postponed until you
actually start iterating

70
00:03:12,540 --> 00:03:13,170
through the results.

71
00:03:13,170 --> 00:03:14,810
And then the first time you
start iterating through the

72
00:03:14,810 --> 00:03:19,040
results, that is when the query
is truly run to get the

73
00:03:19,040 --> 00:03:21,160
first result.

74
00:03:21,160 --> 00:03:25,120
The second thing I wanted to
show you is that the syntax

75
00:03:25,120 --> 00:03:27,950
for sorting is a little
different than it is in the

76
00:03:27,950 --> 00:03:28,910
Mongo shell.

77
00:03:28,910 --> 00:03:33,260
So if you look here in
the second line--

78
00:03:33,260 --> 00:03:35,340
which I'm now going to
un-comment out--

79
00:03:35,340 --> 00:03:38,120
if I wanted to do a complex sort
or a sort on more than

80
00:03:38,120 --> 00:03:42,010
one key with a primary and
secondary key to the sort--

81
00:03:42,010 --> 00:03:45,330
if I want to do that, then
instead of putting a

82
00:03:45,330 --> 00:03:48,660
dictionary in here, or a JSON
document with multiple items

83
00:03:48,660 --> 00:03:54,440
as I would in the Mongo shell,
instead I have to use these

84
00:03:54,440 --> 00:03:56,050
Python tuples.

85
00:03:56,050 --> 00:03:59,260
So these are pairs, and
this is an array.

86
00:03:59,260 --> 00:04:03,880
So, student_id,
pymongo.ASCENDING, comma,

87
00:04:03,880 --> 00:04:05,130
score pymongo.DESCENDING.

88
00:04:05,130 --> 00:04:07,180

89
00:04:07,180 --> 00:04:10,690
And we haven't talked about
those tuples at all in Python.

90
00:04:10,690 --> 00:04:12,350
It's not a structure
we went over.

91
00:04:12,350 --> 00:04:15,200
But this actually is a
divergence from the way the

92
00:04:15,200 --> 00:04:16,140
Mongo shell works.

93
00:04:16,140 --> 00:04:20,790
So compare this syntax to, for
instance, the one that we were

94
00:04:20,790 --> 00:04:23,010
seeing in the Mongo
of a shell.

95
00:04:23,010 --> 00:04:28,960
Before, if you recall, you would
sort these in Mongo by,

96
00:04:28,960 --> 00:04:37,960
use school, you would do
db.scores.find.sort, and then

97
00:04:37,960 --> 00:04:40,080
you would use a single
JSON document here.

98
00:04:40,080 --> 00:04:44,830
You could do student_id
positive, and then ascending

99
00:04:44,830 --> 00:04:46,430
sort, and then Score.

100
00:04:46,430 --> 00:04:50,770
Let's say negative indicating
a descending sort.

101
00:04:50,770 --> 00:04:58,070
See here, we have a document
here where the order matters.

102
00:04:58,070 --> 00:05:00,810
And then we can run that
and we'll get--

103
00:05:00,810 --> 00:05:04,730
well, I'll limit it
to two documents.

104
00:05:04,730 --> 00:05:10,460
And you can see here that we get
two documents out, sorted

105
00:05:10,460 --> 00:05:14,760
first by student_id, and then
by score descending.

106
00:05:14,760 --> 00:05:19,000
And that's a very different
syntax then we're seeing

107
00:05:19,000 --> 00:05:20,110
inside Python.

108
00:05:20,110 --> 00:05:23,160
I just want to point that out,
that that is a divergence from

109
00:05:23,160 --> 00:05:28,020
the Mongo shell in terms of the
way you express the sort.

110
00:05:28,020 --> 00:05:29,660
So that was a lot to take in.

111
00:05:29,660 --> 00:05:31,420
Let's do a quiz.

112
00:05:31,420 --> 00:05:34,580
So let's say that we had the
following documents in a

113
00:05:34,580 --> 00:05:35,140
collection.

114
00:05:35,140 --> 00:05:37,660
And you can see I've got four
documents here with IDs 0, 2,

115
00:05:37,660 --> 00:05:41,200
3, and 4, with the values
10, 5,7, and 20.

116
00:05:41,200 --> 00:05:44,860
If I perform the following
query, cursor =

117
00:05:44,860 --> 00:05:49,300
things.find().sk
ip(3).limit(1).sort on value

118
00:05:49,300 --> 00:05:51,010
descending--

119
00:05:51,010 --> 00:05:53,260
this value and then we
sort it descending--

120
00:05:53,260 --> 00:05:57,090
which of these documents would
the database return?

121
00:05:57,090 --> 00:05:57,850
Select only one.

122
00:05:57,850 --> 00:05:59,100
It's a multiple choice
question.

123
00:05:59,100 --> 00:06:00,120