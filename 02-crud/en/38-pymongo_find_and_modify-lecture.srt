1
00:00:00,000 --> 00:00:00,170

2
00:00:00,170 --> 00:00:00,810
All right.

3
00:00:00,810 --> 00:00:03,590
We've learned most of the things
you need to know to

4
00:00:03,590 --> 00:00:08,200
program against MongoDB, at
least from a crud standpoint.

5
00:00:08,200 --> 00:00:11,570
Creating data, reading the data,
updating the data, and

6
00:00:11,570 --> 00:00:12,650
deleting the data.

7
00:00:12,650 --> 00:00:14,920
But there's a couple of things
we haven't covered.

8
00:00:14,920 --> 00:00:17,720
For instance, if you wanted to
produce a sequence number

9
00:00:17,720 --> 00:00:19,950
using Mongo, how would
you do it?

10
00:00:19,950 --> 00:00:24,640
So a sequence number is a small
set of integers, like 1,

11
00:00:24,640 --> 00:00:27,980
2, 3, 4, 5, 6.

12
00:00:27,980 --> 00:00:31,010
And you want to make sure that
two users, let's say, never

13
00:00:31,010 --> 00:00:33,860
get the same sequence number,
and that they're going to be

14
00:00:33,860 --> 00:00:34,820
sequential.

15
00:00:34,820 --> 00:00:37,470
Now, in a relational database,
you would do this using

16
00:00:37,470 --> 00:00:38,700
transactions.

17
00:00:38,700 --> 00:00:42,180
And you'd probably begin a
transaction at an adequate

18
00:00:42,180 --> 00:00:45,130
isolation level, as you could
read the data and then update

19
00:00:45,130 --> 00:00:47,790
the counter, and then eventually
release it.

20
00:00:47,790 --> 00:00:50,170
But we don't have transactions
in Mongo, but we do have

21
00:00:50,170 --> 00:00:52,450
atomic operations on the
documents themselves.

22
00:00:52,450 --> 00:00:54,460
And that's going to let us
do what we want to do.

23
00:00:54,460 --> 00:00:58,740
So the command we're going to
look at is Find and Modify,

24
00:00:58,740 --> 00:01:01,620
which is going to find a
document that satisfies

25
00:01:01,620 --> 00:01:04,790
certain criteria, possibly
inserting it if it's not there

26
00:01:04,790 --> 00:01:05,760
using an upsert.

27
00:01:05,760 --> 00:01:07,940
And modifying it, and
returning the

28
00:01:07,940 --> 00:01:09,960
old or the new value.

29
00:01:09,960 --> 00:01:12,540
So let's look at how we would
create some sequence numbers

30
00:01:12,540 --> 00:01:14,620
using MongoDB.

31
00:01:14,620 --> 00:01:18,300
Here's a small program that I
wrote called Find and Modify,

32
00:01:18,300 --> 00:01:20,670
and it's going to get
a sequence number.

33
00:01:20,670 --> 00:01:24,660
Now, it does this by connecting
to the database,

34
00:01:24,660 --> 00:01:26,620
test database, counters,
collection.

35
00:01:26,620 --> 00:01:30,030
And then it gets a sequence
number as follows.

36
00:01:30,030 --> 00:01:34,020
It calls find_and_modify
query is--

37
00:01:34,020 --> 00:01:35,890
and notice this a named
parameter-- so

38
00:01:35,890 --> 00:01:38,390
query equals type name.

39
00:01:38,390 --> 00:01:42,040
So you can call this function
with, let's say, the string

40
00:01:42,040 --> 00:01:46,690
could be a user ID, or sequence
number, or library

41
00:01:46,690 --> 00:01:49,510
card number, or whatever you
were looking to get that was

42
00:01:49,510 --> 00:01:50,320
sequential.

43
00:01:50,320 --> 00:01:53,210
And then it would substitute
it right here.

44
00:01:53,210 --> 00:02:03,110
And then update this document,
incrementing the value by one.

45
00:02:03,110 --> 00:02:06,640
Now, calling the counter a
value is my own decision.

46
00:02:06,640 --> 00:02:10,410
It's not anything special
about this command.

47
00:02:10,410 --> 00:02:14,870
And then I've also called it
with upsert equals true, and

48
00:02:14,870 --> 00:02:16,345
new equals true.

49
00:02:16,345 --> 00:02:20,180
So upsert means that if there
isn't a document with type

50
00:02:20,180 --> 00:02:23,970
name, then please put one
in the collection.

51
00:02:23,970 --> 00:02:27,030
And new means return the
new value, not the

52
00:02:27,030 --> 00:02:30,120
old value to me.

53
00:02:30,120 --> 00:02:34,650
So then I'm going to get this
counter right here, counter

54
00:02:34,650 --> 00:02:37,590
value is counter value.

55
00:02:37,590 --> 00:02:40,920
Remember when we returned a
dictionary from this command.

56
00:02:40,920 --> 00:02:43,290
And then I'm going to look
up the value, and I'm

57
00:02:43,290 --> 00:02:44,310
going to return it.

58
00:02:44,310 --> 00:02:45,110
That's it.

59
00:02:45,110 --> 00:02:48,180
So right here in the main body
of the program, I'm just going

60
00:02:48,180 --> 00:02:49,710
to do that three times.

61
00:02:49,710 --> 00:02:51,550
So let's try it out.

62
00:02:51,550 --> 00:02:52,600
All right.

63
00:02:52,600 --> 00:02:54,690
Using Find and Modify.

64
00:02:54,690 --> 00:02:57,720
Call that and it produces
1, 2, 3.

65
00:02:57,720 --> 00:03:00,010
Call it again, it produces
4, 5, 6.

66
00:03:00,010 --> 00:03:04,430
Call it again, 7, 8, 9,
and again, 10, 11, 12.

67
00:03:04,430 --> 00:03:05,820
Perfect.

68
00:03:05,820 --> 00:03:08,670
So let's go in and see
this collection.

69
00:03:08,670 --> 00:03:11,320
Use test.

70
00:03:11,320 --> 00:03:12,570
db.counters.find.

71
00:03:12,570 --> 00:03:14,220

72
00:03:14,220 --> 00:03:15,770
And there it is.

73
00:03:15,770 --> 00:03:16,790
Pretty print it.

74
00:03:16,790 --> 00:03:20,960
You can see there's type uid,
with a value of 12.

75
00:03:20,960 --> 00:03:23,750
And the reason it's type uid
is that when I called

76
00:03:23,750 --> 00:03:27,220
get_next_sequence_number here,
I named the sequence

77
00:03:27,220 --> 00:03:29,150
uid, for user ID.

78
00:03:29,150 --> 00:03:30,970
And that is how you'd get
a unique sequence

79
00:03:30,970 --> 00:03:32,340
number using MongoDB.

80
00:03:32,340 --> 00:03:33,590