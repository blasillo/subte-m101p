1
00:00:00,000 --> 00:00:00,130

2
00:00:00,130 --> 00:00:02,210
Let's talk about upserting
in PyMongo.

3
00:00:02,210 --> 00:00:05,510
Now if you recall from the
lessons we did on the Mongo

4
00:00:05,510 --> 00:00:11,640
shell, an upsert is an update
where the database will

5
00:00:11,640 --> 00:00:15,830
automatically insert the data
if there is no document that

6
00:00:15,830 --> 00:00:17,760
matches the criteria.

7
00:00:17,760 --> 00:00:20,710
So it's a convenient way of
being able to combine two

8
00:00:20,710 --> 00:00:22,290
different actions.

9
00:00:22,290 --> 00:00:25,810
And I've written a small program
to demonstrate how

10
00:00:25,810 --> 00:00:27,390
upserts work in PyMongo.

11
00:00:27,390 --> 00:00:28,760
So let's take a look at that.

12
00:00:28,760 --> 00:00:29,520
OK.

13
00:00:29,520 --> 00:00:34,180
So in this program which I
call using_upsert.py--

14
00:00:34,180 --> 00:00:36,780
and I'm going to provide all of
these files to you if you

15
00:00:36,780 --> 00:00:38,450
want to run them on your
own computer--

16
00:00:38,450 --> 00:00:41,010
we're going to connect to local
host, and safe equals

17
00:00:41,010 --> 00:00:43,640
true, and go into test database,
and look at things

18
00:00:43,640 --> 00:00:45,240
collection.

19
00:00:45,240 --> 00:00:48,400
And we're going to do the
following actions.

20
00:00:48,400 --> 00:00:50,700
First we're going to drop
everything into things

21
00:00:50,700 --> 00:00:51,950
collection.

22
00:00:51,950 --> 00:00:53,250
Now there's actually two
different ways to do this.

23
00:00:53,250 --> 00:00:54,820
You can do things.remove.

24
00:00:54,820 --> 00:00:57,200
with an empty document to remove
all the documents.

25
00:00:57,200 --> 00:01:00,320
Or slightly more efficiently if
the collection were large,

26
00:01:00,320 --> 00:01:03,640
but this is obviously a very
small collection, you could do

27
00:01:03,640 --> 00:01:06,860
things.drop and that drops
the collection.

28
00:01:06,860 --> 00:01:10,480
And after that, I'm going to
do two different upserts.

29
00:01:10,480 --> 00:01:12,480
Now I call update.

30
00:01:12,480 --> 00:01:17,390
And I'm looking for thing
that has a key of thing

31
00:01:17,390 --> 00:01:19,410
and a value of apple.

32
00:01:19,410 --> 00:01:25,580
And then I'm going to set
color red, upsert true.

33
00:01:25,580 --> 00:01:26,700
OK?

34
00:01:26,700 --> 00:01:29,510
And the other thing I'm going
to update in my things

35
00:01:29,510 --> 00:01:32,450
collection is I'm going to
look for a thing with the

36
00:01:32,450 --> 00:01:35,230
thing value of pear.

37
00:01:35,230 --> 00:01:40,660
And then I'm going to set
the color to green.

38
00:01:40,660 --> 00:01:43,330
And I'm going to upsert
equals true.

39
00:01:43,330 --> 00:01:45,960
And in this case, I'm suing
the set command.

40
00:01:45,960 --> 00:01:48,430
In this case, I'm just setting
the document--

41
00:01:48,430 --> 00:01:49,850
I'm saying the attribute
of the document that

42
00:01:49,850 --> 00:01:51,280
I want right here.

43
00:01:51,280 --> 00:01:56,360
And then I'm going to find the
apple and print it out.

44
00:01:56,360 --> 00:02:00,730
And I'm going to find the pear
and I'm going to print it out.

45
00:02:00,730 --> 00:02:02,050
So that's the whole program.

46
00:02:02,050 --> 00:02:04,500
So let's see what we get.

47
00:02:04,500 --> 00:02:05,430
All right.

48
00:02:05,430 --> 00:02:08,100
So here's the result of
running this program.

49
00:02:08,100 --> 00:02:12,870
And in the case of the apple,
it pretty much is what we'd

50
00:02:12,870 --> 00:02:17,580
expect, which is that there's
color red, thing apple.

51
00:02:17,580 --> 00:02:22,510
And then a underscore IDs
that's a BSON ObjectId.

52
00:02:22,510 --> 00:02:25,530
But with the pear, there's
nothing there.

53
00:02:25,530 --> 00:02:27,330
Wow, that's kind of weird.

54
00:02:27,330 --> 00:02:28,820
There's nothing there.

55
00:02:28,820 --> 00:02:30,160
So why is that?

56
00:02:30,160 --> 00:02:31,950
So let's look back at the
program and see if we can

57
00:02:31,950 --> 00:02:33,540
figure out what happened.

58
00:02:33,540 --> 00:02:37,745
So with the apple, we used
the set command.

59
00:02:37,745 --> 00:02:40,880
And it did what we expected,
which is that it inserted

60
00:02:40,880 --> 00:02:44,090
something with a thing
of value of apple

61
00:02:44,090 --> 00:02:46,270
and a color of red.

62
00:02:46,270 --> 00:02:49,900
But with the pear, we didn't
use a set command.

63
00:02:49,900 --> 00:02:55,890
So we didn't actually get a
document with thing set.

64
00:02:55,890 --> 00:03:00,470
So the reason why this statement
here returned none

65
00:03:00,470 --> 00:03:04,160
is that there is nothing with
thing pear in the collection.

66
00:03:04,160 --> 00:03:07,950
And I'll show you the collection
so you can see it.

67
00:03:07,950 --> 00:03:13,380
So we're on Mongo and
db.things.find.

68
00:03:13,380 --> 00:03:15,930
And here's what's in
that collection.

69
00:03:15,930 --> 00:03:18,230
You can see we have
the apple-- thing

70
00:03:18,230 --> 00:03:19,770
apple, color red--

71
00:03:19,770 --> 00:03:24,000
but for the pear, we just
have color green.

72
00:03:24,000 --> 00:03:26,370
Thing pear is not there.

73
00:03:26,370 --> 00:03:30,040
So when we ran this statement
right here, we inserted

74
00:03:30,040 --> 00:03:35,790
something into the database with
color of green and thing

75
00:03:35,790 --> 00:03:36,980
colon pear.

76
00:03:36,980 --> 00:03:39,640
The thing attribute, the
thing key, did not get

77
00:03:39,640 --> 00:03:41,330
set into the document.

78
00:03:41,330 --> 00:03:43,390
And so that's an important thing
to remember when you're

79
00:03:43,390 --> 00:03:47,510
doing upserts is that it
generally just sets the

80
00:03:47,510 --> 00:03:50,330
document equal to what's
on the right.

81
00:03:50,330 --> 00:03:53,820
The exception being that if you
use a set command, then it

82
00:03:53,820 --> 00:03:58,140
will use the criteria on the
left in the query document as

83
00:03:58,140 --> 00:04:00,490
a part of what's inserted.

84
00:04:00,490 --> 00:04:01,010
OK.

85
00:04:01,010 --> 00:04:03,790
So it's time for a quiz
on upserting.

86
00:04:03,790 --> 00:04:07,400
So suppose we'd like to upsert
the following document into

87
00:04:07,400 --> 00:04:08,910
the collection stuff.

88
00:04:08,910 --> 00:04:12,500
_id bat, friend ball,
cousin glove.

89
00:04:12,500 --> 00:04:15,060
Which of the following
statements would work?

90
00:04:15,060 --> 00:04:16,870
And I won't go through
each one right now,

91
00:04:16,870 --> 00:04:19,130
because they're small.

92
00:04:19,130 --> 00:04:20,629
But which of the following
statements would work?

93
00:04:20,629 --> 00:04:21,879