1
00:00:00,000 --> 00:00:00,180

2
00:00:00,180 --> 00:00:02,750
The last two expressions I want
to go over before turning

3
00:00:02,750 --> 00:00:05,160
to some other topics
is max and min.

4
00:00:05,160 --> 00:00:07,400
Now max and min are so similar
I'm not gonna show both.

5
00:00:07,400 --> 00:00:11,300
But what max does is it picks
out the max value in the

6
00:00:11,300 --> 00:00:14,160
grouping, and it makes
it available for

7
00:00:14,160 --> 00:00:15,630
creating a new key.

8
00:00:15,630 --> 00:00:17,940
So let's say we want to figure
out the max price charged by

9
00:00:17,940 --> 00:00:22,040
any manufacturer in our little
electronics products catalog.

10
00:00:22,040 --> 00:00:25,090
And again, the catalog looks
a little bit like this.

11
00:00:25,090 --> 00:00:27,330
We're gonna figure out the max
price that Amazon charges or

12
00:00:27,330 --> 00:00:29,440
the max price that
Google charges.

13
00:00:29,440 --> 00:00:32,940
We do that by grouping by the
maker, pulling out the

14
00:00:32,940 --> 00:00:38,010
$manufacturer value and then
setting up a new key, max

15
00:00:38,010 --> 00:00:40,600
price with max of $price.

16
00:00:40,600 --> 00:00:43,100
And this refers to
the price key.

17
00:00:43,100 --> 00:00:44,260
So we run that.

18
00:00:44,260 --> 00:00:48,150
And we see that the max price
charged by Google, Amazon,

19
00:00:48,150 --> 00:00:51,650
Sony, et cetera, and Apple,
in our little collection.

20
00:00:51,650 --> 00:00:54,390
Now, note that this is a
little bit limiting.

21
00:00:54,390 --> 00:00:58,170
Because using this technique, I
can't figure out the name of

22
00:00:58,170 --> 00:01:00,820
the product and its max price.

23
00:01:00,820 --> 00:01:04,060
Because I'm grouping by
manufacture and I can't group

24
00:01:04,060 --> 00:01:05,670
by manufacture product.

25
00:01:05,670 --> 00:01:07,110
That wouldn't make any sense.

26
00:01:07,110 --> 00:01:10,590
I want to also pull out the
product that corresponds to

27
00:01:10,590 --> 00:01:11,430
that price.

28
00:01:11,430 --> 00:01:13,890
And max, there's really no
easy way to do that.

29
00:01:13,890 --> 00:01:18,190
But there are some ways to do
that using sort and last and

30
00:01:18,190 --> 00:01:21,010
first, which we're gonna show
after we go through some of

31
00:01:21,010 --> 00:01:23,660
the other pipeline stages that
are available in the

32
00:01:23,660 --> 00:01:25,550
aggregation framework.

33
00:01:25,550 --> 00:01:26,870
OK, let's do a quiz.

34
00:01:26,870 --> 00:01:27,970
Here's the quiz.

35
00:01:27,970 --> 00:01:31,280
Thinking again about this zip
code database that we've been

36
00:01:31,280 --> 00:01:36,390
playing with, let's find the
population of the zip code in

37
00:01:36,390 --> 00:01:38,910
each state that is
most populous.

38
00:01:38,910 --> 00:01:42,890
So we want to group by the
state and figure out the

39
00:01:42,890 --> 00:01:45,390
highest population that exists
in any zip code.

40
00:01:45,390 --> 00:01:47,550
And again, the collection
is called zips.

41
00:01:47,550 --> 00:01:51,060
And write your aggregation
query over here.

42
00:01:51,060 --> 00:01:52,712