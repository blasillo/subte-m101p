1
00:00:00,000 --> 00:00:00,160

2
00:00:00,160 --> 00:00:03,730
Let's go over what other
expressions exist in the

3
00:00:03,730 --> 00:00:06,420
aggregation grouping stage
of the pipeline.

4
00:00:06,420 --> 00:00:09,710
So, again, these are the
expressions that you can use

5
00:00:09,710 --> 00:00:11,350
in the group stage.

6
00:00:11,350 --> 00:00:13,300
We've already seen sum, a bit.

7
00:00:13,300 --> 00:00:15,120
Sum lets you do two things.

8
00:00:15,120 --> 00:00:18,540
It can count if you add one
each time you see a key.

9
00:00:18,540 --> 00:00:20,570
Or, if you add the value
of the key, then it

10
00:00:20,570 --> 00:00:22,110
can sum up that key.

11
00:00:22,110 --> 00:00:27,220
Average can average the values
of a key across documents.

12
00:00:27,220 --> 00:00:30,370
Minimum will find the minimum
value of a documents of a

13
00:00:30,370 --> 00:00:30,940
certain key.

14
00:00:30,940 --> 00:00:32,940
And, again, this is
as grouped by the

15
00:00:32,940 --> 00:00:35,180
underscore ID that you specify.

16
00:00:35,180 --> 00:00:37,960
Max finds the maximum
value of a key.

17
00:00:37,960 --> 00:00:40,230
Push and addtoset--

18
00:00:40,230 --> 00:00:41,440
these two--

19
00:00:41,440 --> 00:00:42,640
they build arrays.

20
00:00:42,640 --> 00:00:44,260
So if you--

21
00:00:44,260 --> 00:00:46,720
we'll go over this in more
detail-- but if you want to--

22
00:00:46,720 --> 00:00:49,300
every time you encounter a
certain value, you want to

23
00:00:49,300 --> 00:00:51,190
push it onto an array
in the result

24
00:00:51,190 --> 00:00:52,990
documents, you can do that.

25
00:00:52,990 --> 00:00:55,670
This can get large very
quickly with push.

26
00:00:55,670 --> 00:00:58,950
Addtoset does something very
similar to push, but only adds

27
00:00:58,950 --> 00:01:00,470
each one, uniquely.

28
00:01:00,470 --> 00:01:01,870
It won't add it if it's already
there, so this is

29
00:01:01,870 --> 00:01:03,330
usually more useful.

30
00:01:03,330 --> 00:01:06,390
And, finally, we have
first and last.

31
00:01:06,390 --> 00:01:07,850
Now these are special.

32
00:01:07,850 --> 00:01:12,000
First and last require you to,
first, sort the documents, or

33
00:01:12,000 --> 00:01:13,310
they don't make any sense.

34
00:01:13,310 --> 00:01:15,650
Because what first is going to
do is it's going to find the

35
00:01:15,650 --> 00:01:18,510
first value for a key that it
sees across the documents it's

36
00:01:18,510 --> 00:01:21,130
processed during the group
aggregation stage.

37
00:01:21,130 --> 00:01:22,910
And last would be
the last one.

38
00:01:22,910 --> 00:01:26,380
And if you haven't sorted
them, then first

39
00:01:26,380 --> 00:01:28,290
and last are arbitrary.

40
00:01:28,290 --> 00:01:31,280
And I'll show you how to use
these little bit later, too.

41
00:01:31,280 --> 00:01:31,670
All right.

42
00:01:31,670 --> 00:01:33,080
So let's do a quiz.

43
00:01:33,080 --> 00:01:35,150
Which of the following
aggregation expressions must

44
00:01:35,150 --> 00:01:38,590
be used in conjunction with
a sort to make any sense?

45
00:01:38,590 --> 00:01:39,840
Check all that apply.

46
00:01:39,840 --> 00:01:40,580