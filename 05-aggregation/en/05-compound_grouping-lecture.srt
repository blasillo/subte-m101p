1
00:00:00,000 --> 00:00:00,120

2
00:00:00,120 --> 00:00:02,770
Now we know how to group
by a single key.

3
00:00:02,770 --> 00:00:04,720
But what if we want to group
by multiple keys?

4
00:00:04,720 --> 00:00:08,220
For example, what if we wanted
to find the number of products

5
00:00:08,220 --> 00:00:11,100
that each manufacturer
had in each category?

6
00:00:11,100 --> 00:00:14,030
This would be equivalent in
the SQL world of doing a

7
00:00:14,030 --> 00:00:19,500
select manufacturer, comma
category, comma count star,

8
00:00:19,500 --> 00:00:23,590
from products, grouped by
manufacturer, comma category.

9
00:00:23,590 --> 00:00:27,340
And if you recall, the data
set looked like this.

10
00:00:27,340 --> 00:00:29,020
So we want to find the number
of products that each

11
00:00:29,020 --> 00:00:30,920
manufacturer has in
each category.

12
00:00:30,920 --> 00:00:33,870
We do this using the aggregation
framework by

13
00:00:33,870 --> 00:00:37,360
having a compound underscore
ID key.

14
00:00:37,360 --> 00:00:41,490
So rather than just say we want
to organize our grouped

15
00:00:41,490 --> 00:00:45,330
documents by manufacturer, I
might say I want to organize

16
00:00:45,330 --> 00:00:48,210
them by manufacturer
and category.

17
00:00:48,210 --> 00:00:50,900
And again I get to name
these anyway I want.

18
00:00:50,900 --> 00:00:55,180
That's the manufacturer, colon,
dollar manufacturer,

19
00:00:55,180 --> 00:00:58,600
and category, dollar category.

20
00:00:58,600 --> 00:01:01,700
And I'm having a document be my
underscore ID key so that

21
00:01:01,700 --> 00:01:04,160
as the aggregation framework
runs through those documents,

22
00:01:04,160 --> 00:01:06,850
it'll be looking for documents
that have the same manufacture

23
00:01:06,850 --> 00:01:09,730
category and running the
aggregation on them.

24
00:01:09,730 --> 00:01:11,630
Here is that query a
little bit cleaner,

25
00:01:11,630 --> 00:01:13,070
written out in text.

26
00:01:13,070 --> 00:01:15,410
You can see that I'm
grouping here.

27
00:01:15,410 --> 00:01:18,925
And rather than just grouping
by dollar manufacturer, I'm

28
00:01:18,925 --> 00:01:22,300
grouping by manufacturer,
dollar manufacture, and

29
00:01:22,300 --> 00:01:25,030
category, dollar category.

30
00:01:25,030 --> 00:01:29,100
Now these names right here,
manufacture and category, are

31
00:01:29,100 --> 00:01:30,110
my own invention.

32
00:01:30,110 --> 00:01:34,550
I'm essentially able to create
a new key, or underscore ID,

33
00:01:34,550 --> 00:01:38,230
for each document and name it
any way I want, with these

34
00:01:38,230 --> 00:01:40,040
being the values.

35
00:01:40,040 --> 00:01:44,150
And then I am aggregating and
getting the sum of all of

36
00:01:44,150 --> 00:01:46,030
those different groupings.

37
00:01:46,030 --> 00:01:48,070
So if I run that,
what do I get?

38
00:01:48,070 --> 00:01:49,550
Let's see.

39
00:01:49,550 --> 00:01:51,910
So here, here's the
results set.

40
00:01:51,910 --> 00:01:54,070
You can see the results set
has an underscore ID of

41
00:01:54,070 --> 00:01:57,760
manufacture, Amazon,
category, tablets.

42
00:01:57,760 --> 00:01:59,770
And number of products two--

43
00:01:59,770 --> 00:02:02,960
Google tablets, one,
Apple laptops, one.

44
00:02:02,960 --> 00:02:05,050
Now it was arbitrary how
we named these things.

45
00:02:05,050 --> 00:02:11,890
So if I go in here and I change
this to be maker, then

46
00:02:11,890 --> 00:02:13,430
that works too.

47
00:02:13,430 --> 00:02:15,565
Now it's maker, Apple,
category, laptops.

48
00:02:15,565 --> 00:02:17,560
It doesn't really matter
what it is.

49
00:02:17,560 --> 00:02:21,850
It's also useful, if I want, I
can use this ability to create

50
00:02:21,850 --> 00:02:24,520
a key that is itself
a JSON document.

51
00:02:24,520 --> 00:02:28,500
I can use it to better label
even a single grouping key.

52
00:02:28,500 --> 00:02:33,430
So for instance, we had before
our simple example where I was

53
00:02:33,430 --> 00:02:35,820
organizing the number of
products by manufacturer.

54
00:02:35,820 --> 00:02:37,970
I was getting a report
on that.

55
00:02:37,970 --> 00:02:40,480
And rather than just have it
be underscore ID, [? be ?]

56
00:02:40,480 --> 00:02:43,690
dollar, manufacturer, what if I
actually created a document

57
00:02:43,690 --> 00:02:48,670
key which is manufacturer,
colon, dollar, manufacturer.

58
00:02:48,670 --> 00:02:51,480
And the benefit of that is
that now the result is a

59
00:02:51,480 --> 00:02:52,960
little bit easier to read.

60
00:02:52,960 --> 00:02:55,600
So rather than have it just
be underscore ID, Apple--

61
00:02:55,600 --> 00:02:57,300
maybe that was obvious
before--

62
00:02:57,300 --> 00:03:00,380
now it's underscore ID,
manufacturer, Apple, num

63
00:03:00,380 --> 00:03:01,270
products 4.

64
00:03:01,270 --> 00:03:03,990
Same result, but a little
bit easier to read.

65
00:03:03,990 --> 00:03:06,490
Now you can create a compound
key in the grouping phase that

66
00:03:06,490 --> 00:03:07,920
has as many keys as you want.

67
00:03:07,920 --> 00:03:08,960
So it doesn't need
to be just two.

68
00:03:08,960 --> 00:03:10,230
It could be three or four.

69
00:03:10,230 --> 00:03:12,700
Whatever you want to group
around, you can put right in

70
00:03:12,700 --> 00:03:15,970
here as the underscore ID of the
documents that are going

71
00:03:15,970 --> 00:03:18,400
to get created during
the grouping phase.

72
00:03:18,400 --> 00:03:19,040
OK.

73
00:03:19,040 --> 00:03:20,320
Let's have a quiz.

74
00:03:20,320 --> 00:03:21,690
Given the following
collection--

75
00:03:21,690 --> 00:03:23,580
which is right here,
db stuff--

76
00:03:23,580 --> 00:03:27,280
and has a, b, and c keys for
each of the documents, and the

77
00:03:27,280 --> 00:03:28,740
following aggregation query--

78
00:03:28,740 --> 00:03:33,010
right here, we have created a
compound grouping key which is

79
00:03:33,010 --> 00:03:36,140
a JSON document, Mo,
Larry, and Curly--

80
00:03:36,140 --> 00:03:38,470
how many documents will
be in the result set?

81
00:03:38,470 --> 00:03:39,720
Check one.