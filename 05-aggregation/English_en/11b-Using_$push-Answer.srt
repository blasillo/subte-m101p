1
00:00:00,000 --> 00:00:00,120

2
00:00:00,120 --> 00:00:02,840
And the answer is in this case
that the result was the same.

3
00:00:02,840 --> 00:00:05,060
And the reason the result is the
same, if you think about

4
00:00:05,060 --> 00:00:08,320
it, is that we're going through
these documents one by

5
00:00:08,320 --> 00:00:12,450
one and we're adding the postal
codes that map to a

6
00:00:12,450 --> 00:00:16,040
particular city and we're going
to inspect each source

7
00:00:16,040 --> 00:00:17,610
document once.

8
00:00:17,610 --> 00:00:23,010
And we know that the postal
codes, which are in the _id

9
00:00:23,010 --> 00:00:25,730
fields, which is what we're
pushing, are unique in the

10
00:00:25,730 --> 00:00:28,140
collection because, of course,
_id is unique in the

11
00:00:28,140 --> 00:00:29,080
collection.

12
00:00:29,080 --> 00:00:31,132
So we know that it doesn't
really matter whether we push

13
00:00:31,132 --> 00:00:33,780
it or add it to set, we should
get the same answer.

14
00:00:33,780 --> 00:00:36,060
Now, I ran this on the
actual data set.

15
00:00:36,060 --> 00:00:38,650
And it turns out that you
don't get the exact same

16
00:00:38,650 --> 00:00:40,870
answer because the order that
the postal codes show up is

17
00:00:40,870 --> 00:00:42,020
slightly different.

18
00:00:42,020 --> 00:00:43,740
And I'm not actually sure
why that would be the

19
00:00:43,740 --> 00:00:45,110
case, but it is.

20
00:00:45,110 --> 00:00:46,950
I guess it doesn't guarantee
the order.

21
00:00:46,950 --> 00:00:50,360
So what I did is I sorted
them first--

22
00:00:50,360 --> 00:00:52,200
and we're gonna learn about
sort very soon--

23
00:00:52,200 --> 00:00:55,900
and when I sorted all of the
documents by postal code and

24
00:00:55,900 --> 00:00:58,510
then ran it, the result
was exactly the same.

25
00:00:58,510 --> 00:01:00,980
And when I say the same, I
meant the same from a set

26
00:01:00,980 --> 00:01:03,770
theory standpoint, which is that
the same items appeared

27
00:01:03,770 --> 00:01:04,930
in the result.

28
00:01:04,930 --> 00:01:06,960
I wasn't really thinking about
the ordering of the items

29
00:01:06,960 --> 00:01:07,950
within the result set.

30
00:01:07,950 --> 00:01:09,600
But if you thought they were
different because they might

31
00:01:09,600 --> 00:01:11,540
come up in a different order,
the postal codes might be in a

32
00:01:11,540 --> 00:01:14,260
different order under each
city, well then you can

33
00:01:14,260 --> 00:01:15,780
consider yourself
correct as well.

34
00:01:15,780 --> 00:01:19,530
But for the purposes of this, I
decided they were the same.