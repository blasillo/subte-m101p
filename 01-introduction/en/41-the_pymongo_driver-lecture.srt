1
00:00:00,000 --> 00:00:00,170

2
00:00:00,170 --> 00:00:02,190
OK, we've come a long way.

3
00:00:02,190 --> 00:00:05,560
And now it's time to talk
about saving data using

4
00:00:05,560 --> 00:00:08,270
PyMongo to MongoDB.

5
00:00:08,270 --> 00:00:10,270
I've written a program to
show you how to do it.

6
00:00:10,270 --> 00:00:11,520
So let me show you that.

7
00:00:11,520 --> 00:00:13,520
This is a very small program.

8
00:00:13,520 --> 00:00:16,420
And some of these parts are
familiar to you already.

9
00:00:16,420 --> 00:00:18,850
You can see we start by
importing PyMongo.

10
00:00:18,850 --> 00:00:22,020
And then we connect to
the database with the

11
00:00:22,020 --> 00:00:24,050
Mongo client class.

12
00:00:24,050 --> 00:00:27,610
We connect to the m101 database
and then to the

13
00:00:27,610 --> 00:00:29,140
people collection.

14
00:00:29,140 --> 00:00:32,580
And then over here, we're
going to create a Python

15
00:00:32,580 --> 00:00:36,790
dictionary that has an embedded
Python array.

16
00:00:36,790 --> 00:00:38,110
So let's look at
how this works.

17
00:00:38,110 --> 00:00:42,450
So we have a Python dictionary
with the key name and the

18
00:00:42,450 --> 00:00:44,130
value Barack Obama.

19
00:00:44,130 --> 00:00:47,800
We have another key here, role
and the value being president,

20
00:00:47,800 --> 00:00:51,490
and another key here, address,
with the value being another

21
00:00:51,490 --> 00:00:55,040
dictionary, which has several
parts within it.

22
00:00:55,040 --> 00:00:59,600
And then the final key is this
interests key, and its value

23
00:00:59,600 --> 00:01:03,790
is a list, a Python list, with
government, basketball, and

24
00:01:03,790 --> 00:01:05,000
the Middle East.

25
00:01:05,000 --> 00:01:08,300
And then we call people, which
is the name of the collection,

26
00:01:08,300 --> 00:01:11,830
it's the pointer to the
collection, and dot insert,

27
00:01:11,830 --> 00:01:14,000
and the person that we
created right here.

28
00:01:14,000 --> 00:01:15,810
And that's the whole program.

29
00:01:15,810 --> 00:01:16,950
And at the bottom you
can see we call

30
00:01:16,950 --> 00:01:18,720
Maine, which calls this.

31
00:01:18,720 --> 00:01:22,730
So let's run that program
and see what happens.

32
00:01:22,730 --> 00:01:26,250
All right, so let's use m101.

33
00:01:26,250 --> 00:01:26,790
All right.

34
00:01:26,790 --> 00:01:28,460
So now we're going to
run the program.

35
00:01:28,460 --> 00:01:30,790
And we're going to
see what we get.

36
00:01:30,790 --> 00:01:33,300
So let's get to the right
directory here.

37
00:01:33,300 --> 00:01:36,670
So now let's run this program
and see what happens.

38
00:01:36,670 --> 00:01:39,200
So we wrote the program
saving_data.

39
00:01:39,200 --> 00:01:40,200
I'm going to run it.

40
00:01:40,200 --> 00:01:41,370
It runs pretty quickly.

41
00:01:41,370 --> 00:01:42,520
There you go.

42
00:01:42,520 --> 00:01:45,150
And now let's run
the Mongo shell.

43
00:01:45,150 --> 00:01:48,680
And we're going to use the
m101 database and look at

44
00:01:48,680 --> 00:01:52,030
db.people.find and
see what's in it.

45
00:01:52,030 --> 00:01:54,580
There's the document
we just created.

46
00:01:54,580 --> 00:01:56,490
And let's pretty print that out
to make it a little bit

47
00:01:56,490 --> 00:01:58,280
easier to read.

48
00:01:58,280 --> 00:02:00,840
All right, so let's look at the
document that we put into

49
00:02:00,840 --> 00:02:01,910
the database.

50
00:02:01,910 --> 00:02:05,820
You can see here that there's
an object ID now.

51
00:02:05,820 --> 00:02:08,090
And this was not something
that we specified in the

52
00:02:08,090 --> 00:02:09,650
program, if you recall.

53
00:02:09,650 --> 00:02:12,710
And what's happened there is
that the driver has created an

54
00:02:12,710 --> 00:02:16,130
underscore ID by using
a BSON object ID.

55
00:02:16,130 --> 00:02:18,370
We're going to talk more
about those IDs

56
00:02:18,370 --> 00:02:20,030
later on in the course.

57
00:02:20,030 --> 00:02:23,230
But every single document has
an underscore ID value.

58
00:02:23,230 --> 00:02:24,660
And it does have to be unique.

59
00:02:24,660 --> 00:02:27,130
And the driver did insert
one for us.

60
00:02:27,130 --> 00:02:29,920
And then we see that we have
the interests array with

61
00:02:29,920 --> 00:02:31,920
government, basketball, and the
Middle East, and his role

62
00:02:31,920 --> 00:02:34,660
being president, and his name
being Barack Obama, and the

63
00:02:34,660 --> 00:02:37,260
address, which has a
sub-document within it.

64
00:02:37,260 --> 00:02:38,940
So you can see this is
the data that we

65
00:02:38,940 --> 00:02:40,550
saved from the program.

66
00:02:40,550 --> 00:02:44,070
But you might also notice that
the order of these items is

67
00:02:44,070 --> 00:02:48,080
not the same as we specified
in the Python program.

68
00:02:48,080 --> 00:02:51,390
And that's because
in Python 2.7,

69
00:02:51,390 --> 00:02:53,350
dictionaries are not ordered.

70
00:02:53,350 --> 00:02:57,070
And so as a result, the order it
went into the database was

71
00:02:57,070 --> 00:03:00,690
not the same order as we
specified in the program.

72
00:03:00,690 --> 00:03:04,930
So that's how you add data to
MongoDB, using PyMongo.

73
00:03:04,930 --> 00:03:06,180