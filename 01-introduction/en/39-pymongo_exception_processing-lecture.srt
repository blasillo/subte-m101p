1
00:00:00,000 --> 00:00:00,100

2
00:00:00,100 --> 00:00:00,630
All right.

3
00:00:00,630 --> 00:00:02,740
We've talked a little bit
about how Python works

4
00:00:02,740 --> 00:00:04,660
and how exceptions
in Python work.

5
00:00:04,660 --> 00:00:09,016
And now I want to show you how
exceptions work in PyMongo.

6
00:00:09,016 --> 00:00:10,390
Now, I've written
a small program

7
00:00:10,390 --> 00:00:11,848
that I'm going to
go through that's

8
00:00:11,848 --> 00:00:14,440
going to attempt to
insert a document twice

9
00:00:14,440 --> 00:00:15,740
into the same collection.

10
00:00:15,740 --> 00:00:18,800
And we're going to get an
exception on the second insert.

11
00:00:18,800 --> 00:00:20,700
So let's see what
this program does.

12
00:00:20,700 --> 00:00:22,970
You can see right here,
we create a document.

13
00:00:22,970 --> 00:00:25,350
The document has first name,
Andrew, last name Erlichson,

14
00:00:25,350 --> 00:00:26,210
that's me.

15
00:00:26,210 --> 00:00:29,820
And then we insert it, using
insert_one into the collection.

16
00:00:29,820 --> 00:00:32,549
And we catch any exception that
occurs and we print it out.

17
00:00:32,549 --> 00:00:35,464
After we insert it,
you can see, what we do

18
00:00:35,464 --> 00:00:37,130
is we print the
document out and then we

19
00:00:37,130 --> 00:00:40,280
try to insert it again
right here using insert_one.

20
00:00:40,280 --> 00:00:44,010
Add at the second_insert fails,
then we print out an error.

21
00:00:44,010 --> 00:00:46,470
Let's see what happens
when we run it.

22
00:00:46,470 --> 00:00:47,870
So I'm going to
run this program.

23
00:00:47,870 --> 00:00:49,530
And you can see,
here's the result

24
00:00:49,530 --> 00:00:50,770
of the first print statement.

25
00:00:50,770 --> 00:00:53,510
It prints a document out that
has last name, Erlichson,

26
00:00:53,510 --> 00:00:54,530
first name, Andrew.

27
00:00:54,530 --> 00:00:57,060
This is actually a
Python dictionary.

28
00:00:57,060 --> 00:00:59,180
And then it inserts it.

29
00:00:59,180 --> 00:01:02,190
And after the insert, when
we print it out again,

30
00:01:02,190 --> 00:01:05,069
we see it has a new item, which
it has an underscore ID in it,

31
00:01:05,069 --> 00:01:06,360
which is an object ID.

32
00:01:06,360 --> 00:01:08,670
This was added by the
Python driver itself.

33
00:01:08,670 --> 00:01:12,390
And when we try to insert
it again we get a failure.

34
00:01:12,390 --> 00:01:14,390
We get a duplicate key error.

35
00:01:14,390 --> 00:01:16,290
Now, why did we get a
duplicate key error?

36
00:01:16,290 --> 00:01:19,820
We get a duplicate key error
because underscore ID must be

37
00:01:19,820 --> 00:01:21,515
unique within the collection.

38
00:01:21,515 --> 00:01:23,890
You can't have two documents
with the same underscore ID.

39
00:01:23,890 --> 00:01:26,690
And when we try to insert
that document again,

40
00:01:26,690 --> 00:01:30,840
once the driver had added an
underscore ID, we get a failure

41
00:01:30,840 --> 00:01:32,036
and we can't insert it.

42
00:01:32,036 --> 00:01:33,410
So we'll look into
the collection

43
00:01:33,410 --> 00:01:35,740
real fast to confirm
that it's not there.

44
00:01:35,740 --> 00:01:39,470
Let's run Mongo and
do db.users.find.

45
00:01:39,470 --> 00:01:41,590
And we can see there's
only a single one there.

46
00:01:41,590 --> 00:01:42,980
I'll print it out pretty.

47
00:01:42,980 --> 00:01:44,120
And there it is.

48
00:01:44,120 --> 00:01:46,370
Now, what if we do want to
insert this document twice?

49
00:01:46,370 --> 00:01:47,911
How can we fix this
program to do it?

50
00:01:47,911 --> 00:01:49,610
Let's see how we would do that.

51
00:01:49,610 --> 00:01:52,710
So this program creates
a document right here,

52
00:01:52,710 --> 00:01:55,540
inserts it using insert_one
and then prints it again.

53
00:01:55,540 --> 00:01:58,420
Well, what if we reassign
the variable doc,

54
00:01:58,420 --> 00:02:00,630
create a new dictionary
that's missing underscore ID,

55
00:02:00,630 --> 00:02:01,800
and then did the insert?

56
00:02:01,800 --> 00:02:03,370
Let's try that.

57
00:02:03,370 --> 00:02:05,610
So to do that, we'll
save the program.

58
00:02:05,610 --> 00:02:07,460
I'm going to drop
the collection.

59
00:02:07,460 --> 00:02:09,509
Make sure that we start
out with a clean slate.

60
00:02:09,509 --> 00:02:11,460
And then I'm going to
run the program again.

61
00:02:11,460 --> 00:02:12,460
So I'm running it again.

62
00:02:12,460 --> 00:02:16,050
Python mongo_exception.py,
that's my program.

63
00:02:16,050 --> 00:02:19,382
And when we do that, now
we are able to insert it

64
00:02:19,382 --> 00:02:21,090
and we have two
different underscore IDs,

65
00:02:21,090 --> 00:02:22,290
which is what we need.

66
00:02:22,290 --> 00:02:26,650
And if we go inside Mongo
and do db.users.find,

67
00:02:26,650 --> 00:02:29,121
we can see that I'm in
this collection twice.

68
00:02:29,121 --> 00:02:29,620
All right.

69
00:02:29,620 --> 00:02:31,410
So that's how
exception processing

70
00:02:31,410 --> 00:02:33,310
works within PyMongo.

71
00:02:33,310 --> 00:02:35,020
And this program is
available online,

72
00:02:35,020 --> 00:02:38,070
so if you want to download it
and see it yourself so that you

73
00:02:38,070 --> 00:02:40,522
can use the same template
when you catch exceptions

74
00:02:40,522 --> 00:02:42,730
when you write your programs
and try to insert things

75
00:02:42,730 --> 00:02:46,670
or read things for
MongoDB, you can do that.

