1
00:00:00,000 --> 00:00:00,130

2
00:00:00,130 --> 00:00:00,450
All right.

3
00:00:00,450 --> 00:00:02,520
We've talked about how
PyMongo works.

4
00:00:02,520 --> 00:00:05,080
And I've also shown you a little
bit about how exception

5
00:00:05,080 --> 00:00:07,410
processing works
within Python.

6
00:00:07,410 --> 00:00:10,030
And I want to bring those two
concepts together right now

7
00:00:10,030 --> 00:00:12,570
and show you how exception
processing and

8
00:00:12,570 --> 00:00:14,330
PyMongo work together.

9
00:00:14,330 --> 00:00:16,600
Now, I've written a small
program here that's going to

10
00:00:16,600 --> 00:00:19,100
create a document with
first name Andrew

11
00:00:19,100 --> 00:00:20,580
and last name Erlichson.

12
00:00:20,580 --> 00:00:24,350
And it's going to insert
it into MongoDB.

13
00:00:24,350 --> 00:00:26,550
So before it does that,
it prints it out.

14
00:00:26,550 --> 00:00:28,680
And then it does the
insert right here.

15
00:00:28,680 --> 00:00:31,420
And then it checks to make sure
that if an exception was

16
00:00:31,420 --> 00:00:34,360
thrown that it prints insert
failed and that it prints

17
00:00:34,360 --> 00:00:39,330
using this sys.exc_info,
it prints out the

18
00:00:39,330 --> 00:00:42,050
exception that occurred.

19
00:00:42,050 --> 00:00:46,060
And then after that, it prints
the document again and then

20
00:00:46,060 --> 00:00:48,450
inserts it again into
the database again.

21
00:00:48,450 --> 00:00:51,330
So let's see what happens when
we run this program.

22
00:00:51,330 --> 00:00:54,110
So we're going to run this
program, which is called Mongo

23
00:00:54,110 --> 00:00:57,520
Exception, and see
what happens.

24
00:00:57,520 --> 00:00:59,160
So let's see.

25
00:00:59,160 --> 00:01:00,670
It printed out the document
before it

26
00:01:00,670 --> 00:01:02,500
inserted it right here.

27
00:01:02,500 --> 00:01:05,660
And we can see here that it's
just last name Erlichson,

28
00:01:05,660 --> 00:01:06,910
first name Andrew.

29
00:01:06,910 --> 00:01:09,080

30
00:01:09,080 --> 00:01:10,880
Then it inserts the document.

31
00:01:10,880 --> 00:01:14,290
And then after it inserts the
document, this document looks

32
00:01:14,290 --> 00:01:16,470
like right here.

33
00:01:16,470 --> 00:01:18,980
Now, this is the second
print statement.

34
00:01:18,980 --> 00:01:20,980
Let me just show you
where that occurs.

35
00:01:20,980 --> 00:01:24,980
So it prints the document
before it inserts it.

36
00:01:24,980 --> 00:01:26,340
And then it inserts it.

37
00:01:26,340 --> 00:01:27,940
And then it prints it again.

38
00:01:27,940 --> 00:01:30,560
And then it inserts it again
and then prints it a third

39
00:01:30,560 --> 00:01:32,070
time after the insert.

40
00:01:32,070 --> 00:01:35,010
Now, when it tries to insert the
second time, you can see

41
00:01:35,010 --> 00:01:38,580
it gets an error, which is
caught in the try-catch block.

42
00:01:38,580 --> 00:01:40,440
And it prints out the
insert failed.

43
00:01:40,440 --> 00:01:42,950
And it gives you the error
itself, which is a

44
00:01:42,950 --> 00:01:45,080
duplicate key error.

45
00:01:45,080 --> 00:01:46,580
That's a little bit unusual.

46
00:01:46,580 --> 00:01:50,870
And then it shows the document
that it tried to insert, which

47
00:01:50,870 --> 00:01:54,540
you can see is the same document
that existed in the

48
00:01:54,540 --> 00:01:56,760
variable after the
first insert.

49
00:01:56,760 --> 00:01:59,970
So let's understand what's
happening here.

50
00:01:59,970 --> 00:02:01,750
So initially, we had
a document with

51
00:02:01,750 --> 00:02:03,820
no underscore ID.

52
00:02:03,820 --> 00:02:08,090
The driver itself added an
underscore ID when it did the

53
00:02:08,090 --> 00:02:10,100
insert into the database.

54
00:02:10,100 --> 00:02:12,620
And then when we went to insert
the same document

55
00:02:12,620 --> 00:02:16,030
again, because the driver also
added it to the variable doc

56
00:02:16,030 --> 00:02:17,780
right here--

57
00:02:17,780 --> 00:02:19,760
so at this point, we printed
after the insert.

58
00:02:19,760 --> 00:02:21,740
It had an underscore ID field.

59
00:02:21,740 --> 00:02:25,170
And then, on the second insert,
it failed because all

60
00:02:25,170 --> 00:02:28,430
the underscore IDs
must be unique.

61
00:02:28,430 --> 00:02:31,380
And as a result, this was a
conflict, because it was

62
00:02:31,380 --> 00:02:33,870
attempting to insert a document
that had the same

63
00:02:33,870 --> 00:02:34,980
underscore ID.

64
00:02:34,980 --> 00:02:38,110
And if we look in the actual
collection, you should see

65
00:02:38,110 --> 00:02:39,980
that it only is in there once.

66
00:02:39,980 --> 00:02:42,740
So let's look and see
if that's true.

67
00:02:42,740 --> 00:02:48,100
So let's look at
db.users.find.

68
00:02:48,100 --> 00:02:49,640
And there's the document.

69
00:02:49,640 --> 00:02:51,810
We can print it out pretty.

70
00:02:51,810 --> 00:02:53,810
You can see there's
the document.

71
00:02:53,810 --> 00:02:58,940
And it's only in there once,
because the second one failed.

72
00:02:58,940 --> 00:03:02,510
Now, if we wanted to really
insert it twice, we have lots

73
00:03:02,510 --> 00:03:04,060
of options.

74
00:03:04,060 --> 00:03:08,140
And one of them would be
to go in right here

75
00:03:08,140 --> 00:03:11,110
and reassign to doc.

76
00:03:11,110 --> 00:03:15,370
So after the first insert right
here, we could reassign

77
00:03:15,370 --> 00:03:18,720
to the document variable,
which will clear out the

78
00:03:18,720 --> 00:03:19,690
underscore ID field.

79
00:03:19,690 --> 00:03:21,650
And now, when we do the
second insert, it

80
00:03:21,650 --> 00:03:22,750
should be just fine.

81
00:03:22,750 --> 00:03:23,930
So let's do that.

82
00:03:23,930 --> 00:03:26,920
Just to get the same
precondition, let's drop the

83
00:03:26,920 --> 00:03:28,010
collection.

84
00:03:28,010 --> 00:03:30,870
And we'll confirm that there's
nothing in there--

85
00:03:30,870 --> 00:03:32,930
nope, nothing in there.

86
00:03:32,930 --> 00:03:34,180
Let's run it.

87
00:03:34,180 --> 00:03:36,260

88
00:03:36,260 --> 00:03:38,610
And now we get no error.

89
00:03:38,610 --> 00:03:40,040
After the second insert,
of course, there is

90
00:03:40,040 --> 00:03:41,800
an underscore ID.

91
00:03:41,800 --> 00:03:48,090
And we look in MongoDB, you
can see I'm in there twice

92
00:03:48,090 --> 00:03:52,100
with two different underscore
IDs right there, two different

93
00:03:52,100 --> 00:03:53,670
underscore IDs.

94
00:03:53,670 --> 00:03:56,720
And the driver has generated an
underscore ID for each of

95
00:03:56,720 --> 00:03:59,530
these inserts, because the
document didn't have one when

96
00:03:59,530 --> 00:04:00,600
the driver got it.

97
00:04:00,600 --> 00:04:03,170
So remember, if you don't
specify an underscore ID, the

98
00:04:03,170 --> 00:04:06,330
driver will add one for you and
will also insert it into

99
00:04:06,330 --> 00:04:08,330
your variable so you
can see it after

100
00:04:08,330 --> 00:04:09,660
the insert is complete.

101
00:04:09,660 --> 00:04:12,690
And if it does throw any
exceptions for any reason in

102
00:04:12,690 --> 00:04:16,180
the insert, then you can catch
them and print out the

103
00:04:16,180 --> 00:04:20,019
exception itself using
this call right here.

104
00:04:20,019 --> 00:04:23,520
So that is how exceptions
interact with PyMongo in

105
00:04:23,520 --> 00:04:27,720
mongod to provide you debugging
information when

106
00:04:27,720 --> 00:04:28,970
writing your Python programs.

107
00:04:28,970 --> 00:04:30,090