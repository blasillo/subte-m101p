1
00:00:00,000 --> 00:00:01,911
Let's start out with a simple example

2
00:00:01,911 --> 00:00:04,172
of aggregation in MongoDB,

3
00:00:04,612 --> 00:00:07,153
to motivate how this stuff works.

4
00:00:07,153 --> 00:00:08,800
Now, I'm gonna start out 
with an example

5
00:00:08,800 --> 00:00:11,783
from the SQL world, 
SQL world of relational.

6
00:00:11,813 --> 00:00:15,217
Let's say we had a products table,
and that products table had

7
00:00:15,217 --> 00:00:19,391
a name, category, manufacturer,
and price for each item.

8
00:00:19,391 --> 00:00:22,772
So this is a table of electronics items.

9
00:00:22,772 --> 00:00:25,643
Might be an iPad, 
which is a tablet from Apple,

10
00:00:25,643 --> 00:00:26,933
with a price of $499.

11
00:00:27,463 --> 00:00:30,031
If I wanted to get a report 
of how many products

12
00:00:30,031 --> 00:00:31,697
there were from each manufacturer,

13
00:00:31,697 --> 00:00:33,608
the way I would do that in SQL

14
00:00:33,608 --> 00:00:38,885
is select manufacturer, comma, 
count star, from products

15
00:00:39,123 --> 00:00:42,276
where I group by manufacturer.

16
00:00:42,676 --> 00:00:46,381
And this would give me 
a report that would provide me

17
00:00:46,381 --> 00:00:48,704
the number of products 
from each manufacturer.

18
00:00:48,734 --> 00:00:50,074
Again, that's select manufacturer,

19
00:00:50,074 --> 00:00:53,689
count star, from products, 
group by manufacturer.

20
00:00:53,689 --> 00:00:55,271
There's a comma right here.

21
00:00:55,421 --> 00:00:56,827
Now if you don't understand SQL,

22
00:00:56,827 --> 00:00:58,046
this is not critically important,

23
00:00:58,046 --> 00:00:59,330
but if you do, it might help you.

24
00:00:59,740 --> 00:01:01,968
The report that we'd get 
would look something like this.

25
00:01:02,608 --> 00:01:07,767
We would have a manufacturer
and then the count star for each one.

26
00:01:08,057 --> 00:01:10,337
So we would have a little report that said,

27
00:01:10,337 --> 00:01:16,081
okay, Apple has two products 
and Samsung has three products.

28
00:01:16,431 --> 00:01:19,774
So it's this "group by" clause 
that is very interesting,

29
00:01:20,204 --> 00:01:22,405
along with this aggregation function,

30
00:01:22,405 --> 00:01:25,374
which in SQL was count star.

31
00:01:26,174 --> 00:01:29,271
Alright, how do we do that in MongoDB?

32
00:01:29,717 --> 00:01:34,579
Let's go and look at a collection
 that is very similar

33
00:01:34,969 --> 00:01:36,967
to that table from the relational world.

34
00:01:37,417 --> 00:01:39,635
Here we have a table of items,

35
00:01:39,635 --> 00:01:44,107
that are exactly the same as the ones
that were in the other relational table.

36
00:01:44,107 --> 00:01:47,855
Where each one has a name, 
and, say, Kindle Paperwhite,

37
00:01:47,855 --> 00:01:50,458
and the category, tablets, 
and the manufacturer, Amazon,

38
00:01:50,458 --> 00:01:52,761
and there's like six 
or seven things in this collection

39
00:01:52,761 --> 00:01:55,038
it's pretty small,
I just created it now.

40
00:01:55,468 --> 00:01:56,925
How would we aggregate

41
00:01:56,925 --> 00:02:00,614
so that we could find out the number 
of products from each manufacturer?

42
00:02:00,864 --> 00:02:02,858
The way we would do that is as follows.

43
00:02:02,858 --> 00:02:05,938
I put this collection in a database
called aggregation

44
00:02:05,938 --> 00:02:08,423
so that doesn't matter, 
that's where I put the collection.

45
00:02:08,423 --> 00:02:10,597
We would call the aggregate function,

46
00:02:10,597 --> 00:02:12,309
and this is how you 
would do it in the Mongo shell,

47
00:02:12,309 --> 00:02:15,457
and this unit we're going to focus
mostly on the Mongo shell

48
00:02:15,457 --> 00:02:18,600
because it maps 
very cleanly to the drivers,

49
00:02:18,600 --> 00:02:21,902
and I don't think it adds a lot 
to explain how it works in the drivers,

50
00:02:21,902 --> 00:02:25,622
but let's say we do db.products.aggregate

51
00:02:25,622 --> 00:02:27,747
and again, products is the collection,

52
00:02:27,747 --> 00:02:29,606
alright, I want to do a group-by

53
00:02:29,606 --> 00:02:32,216
and then I would have a $ group operator,

54
00:02:32,216 --> 00:02:34,981
and then I want to 
group by manufacturer,

55
00:02:34,981 --> 00:02:36,619
and I want to get the count,

56
00:02:36,619 --> 00:02:39,551
and the way I do that, we'll explain 
how this works a little bit later,

57
00:02:39,551 --> 00:02:42,323
is we create a new key 
called num_products

58
00:02:42,323 --> 00:02:46,534
and we sum for each one, one.

59
00:02:46,534 --> 00:02:48,770
And we're not gonna explain 
exactly how this works,

60
00:02:48,770 --> 00:02:50,230
right now, because 
I want to go through it

61
00:02:50,230 --> 00:02:51,503
in the following lessons.

62
00:02:51,503 --> 00:02:52,831
I just want to give you 
a high level overview

63
00:02:52,831 --> 00:02:54,391
of the aggregation framework right now.

64
00:02:54,601 --> 00:02:57,912
But I want you to notice a few things 
about this command.

65
00:02:58,152 --> 00:03:01,774
The first is that the dollar group operator

66
00:03:01,774 --> 00:03:03,541
is in its own document.

67
00:03:03,541 --> 00:03:05,335
So, $ group right here.

68
00:03:05,335 --> 00:03:07,650
The second is, this is an array.

69
00:03:07,650 --> 00:03:09,388
And there could be other operators,

70
00:03:09,388 --> 00:03:11,126
and we're going to go 
through how that works.

71
00:03:11,126 --> 00:03:12,866
But for right now we just have the one.

72
00:03:12,866 --> 00:03:15,920
So, I had open parentheses 
and I had an open array here.

73
00:03:15,920 --> 00:03:18,808
And then I have a document 
with dollar group.

74
00:03:19,479 --> 00:03:21,329
The value for the dollar group operator

75
00:03:21,329 --> 00:03:22,519
has a couple different parts.

76
00:03:22,519 --> 00:03:25,165
The first part is underscore id.

77
00:03:25,165 --> 00:03:27,766
and you can kind of think of this 
as creating a new collection.

78
00:03:27,766 --> 00:03:30,219
where we're going to 
group by manufacturer.

79
00:03:30,219 --> 00:03:32,865
Manufacturer was a key 
in my collection ,

80
00:03:32,865 --> 00:03:36,143
but now it's data to this, it's a field,

81
00:03:36,143 --> 00:03:39,446
and as a result, we 
have to prepen this dollar sign

82
00:03:39,446 --> 00:03:41,321
and the whole thing 
needs to be quoted.

83
00:03:41,501 --> 00:03:44,892
And then it's going to create 
a new field called num_products

84
00:03:44,892 --> 00:03:47,652
that is going to call 
the dollar sum operator
 

85
00:03:47,652 --> 00:03:48,602
and add one for each one.

86
00:03:48,602 --> 00:03:50,203
We'll go through exactly how this works,

87
00:03:50,203 --> 00:03:52,074
but let's just see it work
and see what we get.

88
00:03:52,394 --> 00:03:55,146
Okay, we get back five documents.

89
00:03:55,146 --> 00:03:57,540
And each document 
corresponds to one row

90
00:03:57,540 --> 00:03:58,573
that we might have gotten back

91
00:03:58,573 --> 00:04:01,906
if we'd done a group 
by manufacturer in SQL.

92
00:04:01,906 --> 00:04:05,351
So for instance, the first document
is Amazon, num_products two,

93
00:04:05,351 --> 00:04:08,096
second document is Sony,
num_products one.

94
00:04:08,096 --> 00:04:10,865
The third document is Samsung, 
num_products two.

95
00:04:10,865 --> 00:04:13,072
So this is just a simple overview 
and the example

96
00:04:13,072 --> 00:04:15,340
of how you would group by manufacturer

97
00:04:15,340 --> 00:04:18,133
in a collection to get back 
aggregation results.

98
00:04:18,133 --> 00:04:20,071
Now, it's your turn to write a query.

99
00:04:20,411 --> 00:04:24,865
Here's the quiz: Let's say you had
a collection of products,

100
00:04:24,865 --> 00:04:26,534
just like the one I just showed you,

101
00:04:26,534 --> 00:04:29,554
and you wanted to count
the number of products,

102
00:04:29,554 --> 00:04:32,276
not by manufacturer, as I just did,
but by category.

103
00:04:32,776 --> 00:04:35,770
So you just need to go back
and look at how that query works.

104
00:04:35,770 --> 00:04:38,940
Have the resulting key be called
num_products, just as I did.

105
00:04:39,240 --> 00:04:41,810
You just need to change 
the column name here

106
00:04:41,810 --> 00:04:43,714
from manufacturer to category,

107
00:04:43,714 --> 00:04:45,472
or I should say, the key name.

108
00:04:45,472 --> 00:04:48,090
That's all that's required 
to get this to work.

109
00:04:48,090 --> 00:04:50,934
And we'll explain how it works 
in subsequent lessons.

110
00:04:51,454 --> 00:04:53,721
I'd like you to type that below.

111
00:04:53,721 --> 00:04:56,154
And just so it makes it easier 
for us to grade it,

112
00:04:56,154 --> 00:04:59,354
if you could double quote 
all of the key names,

113
00:04:59,744 --> 00:05:01,075
that would be helpful,

114
00:05:01,075 --> 00:05:03,758
that's not strictly speaking necessary,
and I didn't double quote everything,

115
00:05:03,758 --> 00:05:06,398
but just double quote it all 
and that will make it better.

