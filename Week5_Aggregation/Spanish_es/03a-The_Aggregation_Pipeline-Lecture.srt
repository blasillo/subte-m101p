1
00:00:00,000 --> 00:00:03,237
En MongoDB, la agregación
utiliza un "pipeline" y

2
00:00:03,437 --> 00:00:07,874
si estás familiarizado con el mundo Unix,
probablemente sabes cómo se ven estos "pipes".

3
00:00:07,964 --> 00:00:13,240
Por ejemplo, si quiero inspeccionar
un directorio y encontrar el tamaño

4
00:00:13,240 --> 00:00:20,372
de todos sus subdirectorios
hago: "du -s * | sort -n".

5
00:00:20,632 --> 00:00:23,911
Eso ordena los subdirectorios
numéricamente por tamaño

6
00:00:23,911 --> 00:00:25,394
y los imprime en mi pantalla.

7
00:00:25,594 --> 00:00:28,474
Así que eso es el mundo de los
"pipes" de Unix y tenemos un

8
00:00:28,474 --> 00:00:31,445
concepto similar del "pipeline" aquí.
En la parte superior está tu colección

9
00:00:31,795 --> 00:00:34,175
y por ejemplo, esa colección
"products" es transmitida

10
00:00:34,175 --> 00:00:37,021
documento por documento.
Los documentos son conducidos

11
00:00:37,021 --> 00:00:40,786
a través de este "pipeline" de procesamiento
y pasan por una serie de fases

12
00:00:41,106 --> 00:00:42,824
y eventualmente recibimos
un conjunto de resultados.

13
00:00:43,504 --> 00:00:46,131
Ahora, la única etapa que te
mostré es la etapa "$group",

14
00:00:46,441 --> 00:00:49,760
la cual hace las agregaciones,
pero hay varias otras etapas.

15
00:00:49,760 --> 00:00:53,200
Hay una potencial fase de ordenamiento
y una fase de filtro de coincidencia

16
00:00:53,200 --> 00:00:55,162
para los documentos.
Voy a repasar brevemente

17
00:00:55,162 --> 00:00:59,269
cada una de ellas para explicar cómo
funcionan, pero estas etapas pueden

18
00:00:59,269 --> 00:01:03,519
aparecer varias veces en el "pipeline".
Si recuerdas, cuando te mostré

19
00:01:03,519 --> 00:01:07,456
ese comando de agregación,
había un array en la

20
00:01:07,996 --> 00:01:10,634
llamada a la función y la
razón por la cual hay un array

21
00:01:10,634 --> 00:01:14,410
es que cada uno de los elementos de
aquel array es una fase del "pipeline"

22
00:01:14,680 --> 00:01:17,691
que va a transformar esa colección.

23
00:01:17,921 --> 00:01:20,575
OK. Veamos rápidamente cada una
de estas fases del "pipeline"

24
00:01:20,575 --> 00:01:22,499
y hablemos sobre lo que hace.

25
00:01:22,819 --> 00:01:26,711
La primera es "$project".
Ahora para dejarlo claro,

26
00:01:26,711 --> 00:01:29,724
estas fases pueden aparecer más
de una vez en el "pipeline"

27
00:01:29,724 --> 00:01:32,708
y también pueden estar en
muchos órdenes diferente.

28
00:01:32,938 --> 00:01:36,535
Lo que "$project" hace es
remodela el documento.

29
00:01:36,535 --> 00:01:40,906
Va a seleccionar algunos campos y
potencialmente seleccionar uno que

30
00:01:40,906 --> 00:01:44,145
está muy profundo en la jerarquía
y ponerlo en la parte superior.

31
00:01:44,145 --> 00:01:47,521
Entonces, remodela los
documentos y por cada documento

32
00:01:47,521 --> 00:01:50,550
que entra a la etapa de
proyección, un documento sale.

33
00:01:50,550 --> 00:01:54,518
Por eso decimos que esta
etapa es de "uno a uno"

34
00:01:54,518 --> 00:01:56,796
en térmimos de su manipulación
de los documentos.

35
00:01:56,796 --> 00:02:01,073
Otra etapa es "$match".
"$match" es una etapa filtro,

36
00:02:01,483 --> 00:02:04,168
donde puedes seleccionar
sólo los documentos que

37
00:02:04,168 --> 00:02:06,453
quieres analizar
en la agregación.

38
00:02:06,663 --> 00:02:09,594
En el ejemplo anterior,
había documentos

39
00:02:09,594 --> 00:02:12,914
que tenían diferentes fabricantes.
Podríamos decidir filtrar sólo los

40
00:02:12,914 --> 00:02:16,153
documentos en donde el fabricante
es "Samsung" o "Apple".

41
00:02:16,153 --> 00:02:19,504
Entonces, esto es un
filtro de "n a uno",

42
00:02:19,504 --> 00:02:22,491
donde podemos potencialmente
reducir el número de documentos.

43
00:02:22,491 --> 00:02:26,326
El siguiente operador que quiero
presentar es el operador "$group".

44
00:02:26,326 --> 00:02:28,772
Éste es en verdad central
a la agregación en sí.

45
00:02:29,162 --> 00:02:31,517
Esto te va a permitir
hacer la agregación.

46
00:02:31,517 --> 00:02:33,234
Voy a escribir "aggregate"

47
00:02:33,234 --> 00:02:37,253
y dentro de la etapa "$group", puedes
usar operadores para sumar y contar

48
00:02:37,253 --> 00:02:41,259
los cuales agrupan los documentos y
ejecutan estas funciones de agregación.

49
00:02:41,659 --> 00:02:45,542
Por naturaleza es una etapa de
"n a uno", ya que vamos a reducir

50
00:02:45,542 --> 00:02:48,417
el número de documentos
al pasar por esta fase.

51
00:02:48,617 --> 00:02:52,668
También puedes hacer un "$sort" a tus documentos,
lo cual hace básicamente lo que esperarías.

52
00:02:53,028 --> 00:02:57,801
Arregla los documentos de acuerdo a un orden en particular.
El ordenamiento es en sí un operador de "uno a uno".

53
00:02:58,081 --> 00:03:01,087
Cada documentos que entra sale,
tal vez en un orden diferente.

54
00:03:01,327 --> 00:03:04,095
Cuando terminas de ordenar
documentos en una etapa del "pipeline"

55
00:03:04,095 --> 00:03:08,171
podría ser interesante, digamos,
saltar unos documentos con "$skip"

56
00:03:08,461 --> 00:03:12,968
y eso simplemente salta documentos de manera
similar a como lo hace en una consulta.

57
00:03:12,968 --> 00:03:15,680
Si haces un "$sort", te podría interesar
hacer un "$skip" en el resultado.

58
00:03:15,680 --> 00:03:20,351
Digamos, saltar diez o saltar cien.
Entonces, por su misma naturaleza,

59
00:03:20,351 --> 00:03:23,742
"$skip" es una transformación de "n a uno"

60
00:03:23,742 --> 00:03:27,074
en la que algunos documentos
que entran no van a salir.

61
00:03:27,074 --> 00:03:31,180
Puedes limitar el número de documentos
que mandas a la siguiente etapa.

62
00:03:31,180 --> 00:03:33,914
Y "$limit" funciona de manera muy
natural con "$sort" y "$skip".

63
00:03:34,054 --> 00:03:37,780
Podrías ordenar en base a algo
y luego saltar los primeros cien

64
00:03:37,780 --> 00:03:42,056
resultados y limitarte a veinte.
Y eso limita el número de documentos

65
00:03:42,056 --> 00:03:44,814
que pasan a través de la etapa,
mejor dicho, que salen de la etapa.

66
00:03:44,814 --> 00:03:48,515
Una vez más, ésta es una transformación
de "n a uno" donde vamos a reducir

67
00:03:48,515 --> 00:03:50,133
el número de documentos.

68
00:03:50,363 --> 00:03:53,757
Ahora, para agrupar en base a
algo en un documento jerárquico,

69
00:03:53,757 --> 00:03:57,725
que podría tener un array de elementos, debemos,
de alguna manera, desovillar esos datos.

70
00:03:57,725 --> 00:04:02,062
Eso lo vamos a hacer
con la etapa "$unwind".

71
00:04:02,062 --> 00:04:05,039
Ésta esencialmente va a normalizar
nuestros datos, ¿de acuerdo?

72
00:04:05,209 --> 00:04:08,059
Déjame mostrarte cómo funciona.
Digamos que tienes un array "tags"

73
00:04:08,059 --> 00:04:13,201
dentro del documento y contiene los
valores "red", "blue" y "green".

74
00:04:13,511 --> 00:04:17,825
Si pasas el documento a través de una
etapa "$unwind", vas a terminar con

75
00:04:17,825 --> 00:04:24,329
tres documentos: uno que tiene la clave/valor
"tags: red", uno que tiene "tags: green"

76
00:04:24,329 --> 00:04:26,761
y uno que tiene "tags: blue".

77
00:04:26,761 --> 00:04:28,704
El resto del documento
se mantiene igual.

78
00:04:28,704 --> 00:04:31,709
Entonces, hacemos un "$unwind" sobre
"tags". Esto crea una explosión de datos,

79
00:04:31,709 --> 00:04:35,123
pero hace que sea posible hacer las
agrupaciones que queremos hacer

80
00:04:35,123 --> 00:04:37,162
y las funcionalidades de
agregación que deseamos.

81
00:04:37,162 --> 00:04:40,331
Esto va a expandir el número
de documentos que tenemos.

82
00:04:40,331 --> 00:04:43,368
Si en cualquier documento hay
"n" elementos en un array

83
00:04:43,368 --> 00:04:45,076
vamos a obtener "n" documentos.

84
00:04:45,076 --> 00:04:48,101
Éstos son los operadores principales
que vamos a usar en la agregación.

85
00:04:48,101 --> 00:04:52,276
Usualmente, la agregación pone todos los
resultados y te los retorna directamente

86
00:04:52,276 --> 00:04:55,318
como un conjunto de documentos en
un cursor, pero si quieres dirigir

87
00:04:55,318 --> 00:05:00,004
esos documentos hacia otra colección,
lo puedes hacer con la etapa "$out"

88
00:05:00,004 --> 00:05:03,323
y nombrar una colección, la
cual recibirá los resultados.

89
00:05:03,343 --> 00:05:06,268
Esto concierna todo lo que es
obtener el resultado de la agregación,

90
00:05:06,618 --> 00:05:10,107
"uno a uno". Todo lo que entra, sale.
Y luego hay algunas etapas que

91
00:05:10,107 --> 00:05:12,733
no vamos a cubrir extensivamente
en este curso en particular,

92
00:05:12,733 --> 00:05:17,890
pero que puedes ver en la documentación
en línea, como "$redact" y "$geoNear".

93
00:05:18,020 --> 00:05:20,834
Estos operados son ambos...
bueno, el operador "$redact"

94
00:05:20,834 --> 00:05:24,820
es una funcionalidad relacionada a temas de
seguridad que puede ser utilizada para limitar

95
00:05:24,820 --> 00:05:28,736
qué documentos pueden ser vistos por
ciertos usuarios. Y la etapa "$geoNear"

96
00:05:28,736 --> 00:05:31,319
te permite hacer consultas
basadas en geolocalización

97
00:05:31,319 --> 00:05:35,143
para limitar los documentos que pasan por una
etapa del "pipeline" basado en geolocalización.

98
00:05:35,143 --> 00:05:37,668
Bueno. Entonces, ahora que sabes
qué etapas existen en el "pipeline"

99
00:05:37,668 --> 00:05:39,808
de agregación, es tiempo
para un cuestionario.

100
00:05:39,808 --> 00:05:43,121
Y creo que este cuestionario
va a ser muy sencillo.

101
00:05:43,421 --> 00:05:46,081
¿Cuáles de las siguientes son etapas
del "pipeline" de agregación?

102
00:05:46,081 --> 00:05:49,540
Marca todas las que apliquen.
"Match", "Transpose", "Group",

103
00:05:49,540 --> 00:05:52,010
"Skip", "Limit", "Sort",
"Project" y "Unwind".

104
00:05:52,010 --> 00:05:54,820
Simplemente marca las que apliquen.