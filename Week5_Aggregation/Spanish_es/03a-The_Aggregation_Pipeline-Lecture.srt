1
00:00:00,000 --> 00:00:03,237
Aggregation uses a pipeline in mongoDB.

2
00:00:03,437 --> 00:00:07,874
And if you're familiar with the unix world,
you probably know what pipes look like.

3
00:00:07,964 --> 00:00:13,240
For instance if I wanted to look in a
directory and find a size of

4
00:00:13,240 --> 00:00:20,372
every sub-directory in it 
du - s * piped to sort -n

5
00:00:20,632 --> 00:00:23,911
that would numerically sort the size
of sub-directories

6
00:00:23,911 --> 00:00:25,394
and print them on my screen.

7
00:00:25,594 --> 00:00:28,474
So, that's the Unix world of pipes.
And we have a similar idea

8
00:00:28,474 --> 00:00:31,445
of a pipeline here.
At the very top is your collection

9
00:00:31,795 --> 00:00:34,175
and, for instance,
that product's collection is sent through

10
00:00:34,175 --> 00:00:37,021
document by document.
The documents are piped through

11
00:00:37,021 --> 00:00:40,786
this processing pipeline, and they
go through a series of stages,

12
00:00:41,106 --> 00:00:42,824
and then we eventually
get a result set.

13
00:00:43,504 --> 00:00:46,131
Now, the one stage I showed you
is the group stage,

14
00:00:46,441 --> 00:00:49,760
which is going to do the aggregations.
But there are lots of other stages.

15
00:00:49,760 --> 00:00:53,200
There's a potential sorting stage
and a matching stage

16
00:00:53,200 --> 00:00:55,162
we filter for documents.
I'm gonna go through each one

17
00:00:55,162 --> 00:00:59,269
real briefly to explain how it works.
But these stages can appear

18
00:00:59,269 --> 00:01:03,519
multiple times inside the pipeline.
If you recall when I showed you

19
00:01:03,519 --> 00:01:07,456
that aggregation command,
there was an array inside

20
00:01:07,996 --> 00:01:10,634
the function call.
And the reason there was an array

21
00:01:10,634 --> 00:01:14,410
is that each of the items in that array
is a stage of the pipeline

22
00:01:14,680 --> 00:01:17,691
that is gonna transform that collection.

23
00:01:17,921 --> 00:01:20,575
Okay, let's go over each of these 
pipeline stages quickly

24
00:01:20,575 --> 00:01:22,499
and talk about what it does.

25
00:01:22,819 --> 00:01:26,711
The first one is $project.
Now, just to be clear,

26
00:01:26,711 --> 00:01:29,724
you can have these pipeline stages
appear more than once in the pipeline

27
00:01:29,724 --> 00:01:32,708
and they also can be
in many different orders.

28
00:01:32,938 --> 00:01:36,535
But what project is gonna do
is it's going to reshape the document.

29
00:01:36,535 --> 00:01:40,906
It's gonna select out certain fields
and also potentially select one out

30
00:01:40,906 --> 00:01:44,145
from deep in the hierarchy
and bring it up to the top.

31
00:01:44,145 --> 00:01:47,521
So, the reshaping of the documents..
And for every document

32
00:01:47,521 --> 00:01:50,550
that comes into the projection stage
one document is gonna leave

33
00:01:50,550 --> 00:01:54,518
the projection stage.
And so, we say this stage is 1:1

34
00:01:54,518 --> 00:01:56,796
in terms of its handling of the documents.

35
00:01:56,796 --> 00:02:01,073
Another stage is $match.
Match is a filtering step

36
00:02:01,483 --> 00:02:04,168
where you can select out 
only the documents

37
00:02:04,168 --> 00:02:06,453
that you wanna analyze
in the aggregation.

38
00:02:06,663 --> 00:02:09,594
So, for instance, in the previous example
where we had documents

39
00:02:09,594 --> 00:02:12,914
that had a different manufacturers,
we might decide only filter

40
00:02:12,914 --> 00:02:16,153
on the manufacturer
being Samsung or Apple.

41
00:02:16,153 --> 00:02:19,504
And so, this is going to be
an n:1 filtering.

42
00:02:19,504 --> 00:02:22,491
Where we're going to reduce the number
of documents potentially.

43
00:02:22,491 --> 00:02:26,326
The next operator I wanted to discuss
is the Group Operator.

44
00:02:26,326 --> 00:02:28,772
This is really central
to aggregation itself.

45
00:02:29,162 --> 00:02:31,517
This is going to allow you to do 
the aggregation.

46
00:02:31,517 --> 00:02:33,234
I'm gonna write 'aggregate'.

47
00:02:33,234 --> 00:02:37,253
And, inside the group stage
you could use things like sum and count

48
00:02:37,253 --> 00:02:41,259
that will group together the documents
and perform these aggregation functions.

49
00:02:41,659 --> 00:02:45,542
So, by its nature, this is an n:1 stage
where we're gonna reduce down

50
00:02:45,542 --> 00:02:48,417
the number of documents
whereas we go through this stage.

51
00:02:48,617 --> 00:02:52,668
Now, you can also sort your documents,
which does pretty much what you'd expect.

52
00:02:53,028 --> 00:02:57,801
Sorts the documents in a particular order.
Sorting by itself is a 1:1 operator.

53
00:02:58,081 --> 00:03:01,087
Every document that comes in
comes out on a maybe different order.

54
00:03:01,327 --> 00:03:04,095
And, once you finish sorting
documents in a pipeline stage,

55
00:03:04,095 --> 00:03:08,171
it could be interesting to..
Let's say skip forward in the documents,

56
00:03:08,461 --> 00:03:12,968
and that just skips
much like you would when doing a query.

57
00:03:12,968 --> 00:03:15,680
If you sort, you might wanna skip
forward from the result.

58
00:03:15,680 --> 00:03:20,351
Let's say, skip 10 or skip a hundred.
And then, by its very nature,

59
00:03:20,351 --> 00:03:23,742
skip is going to be an n:1
transformation.

60
00:03:23,742 --> 00:03:27,074
Which is that some documents are
gonna enter that are not going to exit.

61
00:03:27,074 --> 00:03:31,180
You can limit the number of documents
that you send through the next stage.

62
00:03:31,180 --> 00:03:33,914
And limit works very naturally with
sort and skip.

63
00:03:34,054 --> 00:03:37,780
So you might sort by something
and then skip the first hundred

64
00:03:37,780 --> 00:03:42,056
then limit yourself to 20.
And this limits the number of documents

65
00:03:42,056 --> 00:03:44,814
that goes through the stage--
that come out of the stage, I should say.

66
00:03:44,814 --> 00:03:48,515
And again, this an n:1 transformation
where we're gonna reduce down

67
00:03:48,515 --> 00:03:50,133
the number of documents.

68
00:03:50,363 --> 00:03:53,757
Now, in order to group by something
in a hierarchical document

69
00:03:53,757 --> 00:03:57,725
that may in fact have array of items
we need to, somehow, flatten this data.

70
00:03:57,725 --> 00:04:02,062
And the way we're gonna do that
is with the Unwind Stage.

71
00:04:02,062 --> 00:04:05,039
And that's gonna essentially
normalize our data, alright?

72
00:04:05,209 --> 00:04:08,059
Let me show you how it works.
Let's say you had tags

73
00:04:08,059 --> 00:04:13,201
inside the document,
and you had "red", "blue", and "green".

74
00:04:13,511 --> 00:04:17,825
If you put the document through
an unwind stage, you would wind up with

75
00:04:17,825 --> 00:04:24,329
three documents: one that had tags: red,
one that had tags: green,

76
00:04:24,329 --> 00:04:26,761
and one that had tags: blue.

77
00:04:26,761 --> 00:04:28,704
Everything else with the document
will be the same.

78
00:04:28,704 --> 00:04:31,709
So, we unwind on tags.
So, this creates an explosion of data

79
00:04:31,709 --> 00:04:35,123
but it makes it possible to run 
the group by's that we wanna do

80
00:04:35,123 --> 00:04:37,162
and the aggregation functions
that we desire.

81
00:04:37,162 --> 00:04:40,331
So, this is gonna expand the number
of documents we have.

82
00:04:40,331 --> 00:04:43,368
If any given document at there's..
n items in an array

83
00:04:43,368 --> 00:04:45,076
we're going to get
n documents out.

84
00:04:45,076 --> 00:04:48,101
So, these are the main operators that
we're gonna use in aggregation.

85
00:04:48,101 --> 00:04:52,276
Normally aggregation puts all of its 
output, returns it directly to you

86
00:04:52,276 --> 00:04:55,318
instead of the documents in a cursor.
But if you wanna redirect

87
00:04:55,318 --> 00:05:00,004
those documents to another collection,
you can do it with the the $out stage

88
00:05:00,004 --> 00:05:03,323
and name a collection
that should get the results.

89
00:05:03,343 --> 00:05:06,268
So, this is all about taking the output
of the aggregation.

90
00:05:06,618 --> 00:05:10,107
1:1, everything that comes in goes out.
And then, some stages that

91
00:05:10,107 --> 00:05:12,733
we're not gonna heavily get into
in this particular course

92
00:05:12,733 --> 00:05:17,890
but you can read them online,
are $redact and $geonear.

93
00:05:18,020 --> 00:05:20,834
These operators are both...
The redact operator

94
00:05:20,834 --> 00:05:24,820
is a security related feature
that can be used to limit the

95
00:05:24,820 --> 00:05:28,736
what document certain users see.
And, the geonear stage

96
00:05:28,736 --> 00:05:31,319
allows you to perform
location based queries

97
00:05:31,319 --> 00:05:35,143
to limit the documents that come through
the pipeline stage based on location.

98
00:05:35,143 --> 00:05:37,668
Alright, so, now that you know
what stages exist in

99
00:05:37,668 --> 00:05:39,808
the aggregation pipeline,
it's time for a quiz.

100
00:05:39,808 --> 00:05:43,121
And, I think this quiz is gonna be
pretty straight forward.

101
00:05:43,421 --> 00:05:46,081
Which of the following are stages
in the aggregation pipeline?

102
00:05:46,081 --> 00:05:49,540
Check all that apply.
Match, Transpose, Group, Skip,

103
00:05:49,540 --> 00:05:52,010
Limit, Sort, Project, and Unwind.

104
00:05:52,010 --> 00:05:54,820
Just check all that apply.

