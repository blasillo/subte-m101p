1
00:00:00,000 --> 00:00:04,261
Bien, quiero hablarte sobre
Python y la forma especial en

2
00:00:04,289 --> 00:00:06,076
que interactúa con la agregación.

3
00:00:06,076 --> 00:00:10,066
O mejor dicho, que es ligeramente
diferente en el shell en la

4
00:00:10,066 --> 00:00:13,105
versión 2.6, pero no en Python.
Te explicaré de qué estoy hablando.

5
00:00:13,355 --> 00:00:17,765
En versiones anteriores a MongoDB 2.6,
MongoDB devolvía todos los resultados

6
00:00:17,765 --> 00:00:20,202
de agregación en un documento enorme.

7
00:00:20,202 --> 00:00:22,187
Y esto tiene un montón de limitaciones.

8
00:00:22,187 --> 00:00:24,224
Por ejemplo, si todos los resultados de
la agregación se van a devolver en

9
00:00:24,224 --> 00:00:27,073
en un documento, entonces, por
supuesto, los resultados de agregación

10
00:00:27,073 --> 00:00:29,800
están limitados al tamaño del
documento, que es 16 MB.

11
00:00:30,420 --> 00:00:36,033
Ahora, como novedad en la versión
2.6, muy emocionante, la agregación

12
00:00:36,033 --> 00:00:40,410
puede devolver un cursor, y de
hecho lo hace en el shell.

13
00:00:40,740 --> 00:00:44,045
Así que esa es una gran diferencia.
Y lo que hemos visto en el shell es,

14
00:00:44,045 --> 00:00:48,074
por supuesto, que la agregación
devuelve un cursor y te da

15
00:00:48,074 --> 00:00:51,133
todos los documentos uno tras
otro usando un iterador.

16
00:00:51,133 --> 00:00:54,137
Pero en versiones anteriores a la
2.6, esto no funcionaba así.

17
00:00:54,137 --> 00:00:56,650
Antes de la versión 2.6,
obtenías un documento enorme.

18
00:00:56,650 --> 00:00:59,333
Por lo tanto, la cuestión es,
¿qué ocurre en Python?

19
00:00:59,883 --> 00:01:03,619
Bien, resulta que en Python,
por defecto, todavía devolvemos

20
00:01:03,619 --> 00:01:05,804
un documento grande
en la versión 2.6.

21
00:01:05,804 --> 00:01:09,277
Así que Python está por aquí,
pero, opcionalmente, puede hacer

22
00:01:09,277 --> 00:01:10,414
lo mismo que el shell.

23
00:01:10,414 --> 00:01:14,171
Detallemos esto un poco más
porque creo que es complicado.

24
00:01:14,171 --> 00:01:18,188
Teníamos las versiones 2.4 y 2.6.

25
00:01:18,528 --> 00:01:20,964
Y luego, teníamos lo que
sucedía en el shell.

26
00:01:21,039 --> 00:01:23,815
Y a continuación, lo
que sucedía en Python.

27
00:01:23,815 --> 00:01:28,682
En MongoDB 2.4, tanto el shell como
Python devolvían un documento grande.

28
00:01:28,682 --> 00:01:34,488
En MongoDB 2.6, el shell devuelve un
cursor y Python un documento grande.

29
00:01:35,018 --> 00:01:38,357
Pero, opcionalmente, Python
puede devolver un cursor.

30
00:01:38,647 --> 00:01:41,291
Veamos esto en acción.
¡Es muy interesante!

31
00:01:41,681 --> 00:01:44,575
Bien, una vez más vamos a agregar
sobre nuestra colección de "zip codes".

32
00:01:45,245 --> 00:01:48,170
Este es un pequeño script en Python.
Vamos a examinarlo línea por línea.

33
00:01:48,470 --> 00:01:51,492
Vamos a importar PyMongo. Obtenemos
una conexión usando MongoClient.

34
00:01:51,652 --> 00:01:54,008
Vamos a conectarnos a nuestra
base de datos de agregación.

35
00:01:54,008 --> 00:01:56,758
Y luego, vamos a agregar.
Vamos a agrupar por estado,

36
00:01:56,758 --> 00:01:58,697
y a sumar las poblaciones.

37
00:01:58,697 --> 00:02:00,829
Una agregación muy sencilla,
la misma que hemos estado haciendo

38
00:02:00,829 --> 00:02:03,488
una y otra vez. A continuación,
vamos a imprimir el resultado.

39
00:02:03,488 --> 00:02:04,950
Veamos qué obtenemos.

40
00:02:04,950 --> 00:02:07,685
Bien, ahora veremos qué obtenemos
cuando ejecutamos este fichero

41
00:02:07,685 --> 00:02:10,232
"population_by_state.py" que
acabo de enseñarte.

42
00:02:10,232 --> 00:02:13,088
¡Guau! Eso es un caos, pero
analicémoslo con cuidado y

43
00:02:13,088 --> 00:02:14,389
veamos qué es.

44
00:02:14,599 --> 00:02:18,052
Recuerda que lo único que hice
en este programa en particular es

45
00:02:18,066 --> 00:02:20,492
imprimir el resultado que
obtuve de la agregación.

46
00:02:20,492 --> 00:02:26,747
Si nos fijamos por aquí, veo que
el resultado en sí es un documento,

47
00:02:26,747 --> 00:02:30,053
debido al hecho de que
era una agregación.

48
00:02:30,493 --> 00:02:37,507
Y en "result" está el array de
documentos, cada uno de los cuales

49
00:02:37,507 --> 00:02:42,240
es un resultado de la consulta de
agregación. Tenemos, por ejemplo,

50
00:02:42,240 --> 00:02:45,149
que Pennsylvania tiene una
población de, quizás 11 millones.

51
00:02:45,149 --> 00:02:48,404
No puedo ver qué es eso. Esto es
Dakota del Norte, tiene una población

52
00:02:48,404 --> 00:02:51,687
de 638,000. Es un estado muy pequeño.

53
00:02:52,047 --> 00:02:57,101
Y, por aquí arriba, estaba West Virginia,
con una población de 1.7 millones.

54
00:02:57,101 --> 00:02:59,215
¿Es eso correcto?
¡Guau!, un estado pequeño, 1.8 millones,

55
00:02:59,215 --> 00:03:01,057
si quieres redondear.

56
00:03:01,057 --> 00:03:04,083
Este resultado de agregación
estará limitado a 16 MB.

57
00:03:04,323 --> 00:03:06,337
Este es el estilo antiguo
de devolver resultados.

58
00:03:06,767 --> 00:03:12,804
Y no queríamos romper los programas
Python en MongoDB 2.6, por lo que

59
00:03:12,804 --> 00:03:15,648
mantuvimos el comportamiento antiguo
por defecto. Sin embargo, puedes conseguir

60
00:03:15,648 --> 00:03:18,351
el comportamiento nuevo y obtener un
cursor, evitando la limitación de 16 MB.

61
00:03:18,351 --> 00:03:19,355
Te enseñaré cómo.

62
00:03:19,355 --> 00:03:23,501
Justo aquí tenemos la
misma consulta de agregación,

63
00:03:23,501 --> 00:03:27,769
y en este caso, vamos a fijar
un nuevo valor llamado

64
00:03:27,769 --> 00:03:35,075
"cursor = {}".
Y esta palabra clave

65
00:03:35,075 --> 00:03:40,128
va a cambiar el comportamiento
del framework de agregación.

66
00:03:40,151 --> 00:03:42,788
Así, ahora que vamos
a obtener un cursor,

67
00:03:42,788 --> 00:03:45,724
ya no puedo imprimir "result".
En su lugar, tengo que iterar

68
00:03:45,724 --> 00:03:47,275
el resultado.
Hagamos eso,

69
00:03:47,275 --> 00:03:51,687
"for doc in result: print doc".
Esto debería encargarse de ello

70
00:03:51,687 --> 00:03:54,205
e imprimir cada documento
en el resultado, ya que pasé

71
00:03:54,205 --> 00:03:59,280
la opción "cursor = {}".
Repasemos eso.

72
00:03:59,280 --> 00:04:00,469
Veamos qué obtengo.

73
00:04:00,739 --> 00:04:03,289
¡Allá vamos!
Obtienes ese resultado tan claro

74
00:04:03,289 --> 00:04:06,392
que obtuvimos antes, el cual es
similar a lo que devolvía en el shell,

75
00:04:06,392 --> 00:04:09,687
donde puedes ver que cada documento
en el resultado de la agregación

76
00:04:09,687 --> 00:04:13,286
aparece como un documento
separado en el cursor

77
00:04:13,286 --> 00:04:14,660
y puedes iterar por ellos.

78
00:04:14,660 --> 00:04:19,177
Y, si quisieras establecer otras
opciones, por ejemplo, la opción

79
00:04:19,177 --> 00:04:22,451
para usar el disco,
podrías hacerlo.

80
00:04:22,451 --> 00:04:28,758
Podrías decir "allowDiskUse = True".
Y puedes ver que el estilo para pasar

81
00:04:28,758 --> 00:04:31,287
las opciones es diferente
al que usamos en el shell.

82
00:04:31,287 --> 00:04:33,042
Así que ten eso en mente.
Esto es Python.

83
00:04:33,572 --> 00:04:38,061
Y, si hago eso y lo recorro, no
debería cambiar en nada el resultado.

84
00:04:38,631 --> 00:04:40,820
Da el mismo resultado.
Quizás un poco más lento.

85
00:04:40,820 --> 00:04:44,392
Y así es como el uso de disco
permite evitar ese límite de 100 MB

86
00:04:44,392 --> 00:04:47,383
por etapa del pipeline.
Bien, en cualquier caso,

87
00:04:47,383 --> 00:04:51,222
así es como se solicita el comportamiento
por defecto en el shell en MongoDB 2.6,

88
00:04:51,222 --> 00:04:55,618
que va a devolver un cursor
en lugar de un documento enorme.

89
00:04:55,618 --> 00:04:57,406
Y, en términos generales, es
mucho más conveniente obtener

90
00:04:57,406 --> 00:04:59,926
un documento enorme, pero como
no queríamos romper los programas

91
00:04:59,926 --> 00:05:04,279
Python que funcionaban en MongoDB
2.4, mantuvimos la compatibilidad

92
00:05:04,279 --> 00:05:07,266
con versiones anteriores dejando
por defecto en Python el

93
00:05:07,266 --> 00:05:10,018
comportamiento anterior. En el shell, no
mantuvimos compatibilidad con versiones

94
00:05:10,018 --> 00:05:13,288
anteriores. Ahora, el comportamiento
por defecto es devolver un cursor

95
00:05:13,288 --> 00:05:14,807
que te da una lista de documentos.

96
00:05:14,807 --> 00:05:16,843
Bien, hora de hacer un cuestionario.
Veamos si estuviste escuchando

97
00:05:16,843 --> 00:05:17,889
atentamente.

98
00:05:17,889 --> 00:05:23,888
Hablemos sobre MongoDB 2.4 y 2.6,
y sobre el comportamiento de la

99
00:05:23,888 --> 00:05:27,491
agregación, en particular sobre el
método "aggregate" y si devuelve un

100
00:05:27,491 --> 00:05:30,165
cursor o un documento en
el shell o PyMongo.

101
00:05:30,165 --> 00:05:33,261
¿Cuáles de las siguientes afirmaciones
sobre los resultados de agregación son

102
00:05:33,261 --> 00:05:35,292
ciertas? Marca todas las que
apliquen. Y no te las leeré,

103
00:05:35,292 --> 00:05:38,863
pero deberías leerlas y
averiguar cuáles son ciertas.
