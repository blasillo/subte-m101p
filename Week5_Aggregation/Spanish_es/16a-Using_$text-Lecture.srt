1
00:00:00,105 --> 00:00:04,549
Ahora entendemos cómo usar la fase
$match del pipeline de agregación.

2
00:00:04,590 --> 00:00:07,483
Pero, ¿qué tal si deseas hacer algo
un poco más complicado que $match

3
00:00:07,523 --> 00:00:09,443
y deseas hacer una
búsqueda de texto completo?

4
00:00:09,881 --> 00:00:14,475
Bueno, resulta que búsqueda de texto
completo y agregación son dos cosas

5
00:00:14,485 --> 00:00:17,658
que van muy bien juntos en MongoDB 2.6.

6
00:00:18,162 --> 00:00:21,910
Ahora permíteme mostrarte cómo usar
búsqueda de texto completo y agregación juntos.

7
00:00:22,845 --> 00:00:28,235
Aquí tengo una colección que usamos antes
para mostrarte cómo full text search funciona.

8
00:00:28,638 --> 00:00:32,720
Tenemos un montón de documentos--
cada uno con una clave, "words",

9
00:00:32,725 --> 00:00:34,347
con un montón de distintas palabras.

10
00:00:34,511 --> 00:00:39,918
Y si deseamos hacer un full text search
en "words", necesitaríamos tener

11
00:00:39,932 --> 00:00:42,009
un índice de texto en "words".

12
00:00:42,307 --> 00:00:44,999
Y, de hecho, tengo ese índice.

13
00:00:45,583 --> 00:00:50,022
Puedes ver que hay un índice de texto
para full text search en "words"

14
00:00:50,063 --> 00:00:52,438
justo aquí, "words" dentro
de la colección.

15
00:00:52,931 --> 00:00:54,847
Y eso nos permitirá hacer
un full text search.

16
00:00:55,217 --> 00:00:57,889
Entonces ¿cómo hacemos una
agregación que usa esto?

17
00:00:58,070 --> 00:01:00,618
He aquí un ejemplo
simple de agregación.

18
00:01:00,875 --> 00:01:05,147
Y en este ejemplo de agregación,
vamos a tener una fase $match

19
00:01:05,582 --> 00:01:07,947
y esa fase $match va a especificar

20
00:01:08,391 --> 00:01:12,169
que el texto necesita
buscar "tree" y "rat".

21
00:01:12,423 --> 00:01:17,913
Y si recuerdas, esos documentos están
llenos de esas palabras aleatorias.

22
00:01:18,492 --> 00:01:22,348
"tree" y "rat" aparecen aquí,
"tree" aparece aquí, "dog" por aquí,

23
00:01:22,529 --> 00:01:25,064
"obsidian" aparece aquí,
"shrub", etcétera.

24
00:01:25,642 --> 00:01:29,670
Así que estamos usando la misma sintaxis
que usamos para hacer un comando "find"

25
00:01:29,681 --> 00:01:31,150
y un full text search.

26
00:01:31,195 --> 00:01:33,990
Vamos a usar la fase $match
y vamos a especificar

27
00:01:34,055 --> 00:01:38,463
el operador $text y que estamos
buscando $search para "tree" y "rat".

28
00:01:38,674 --> 00:01:41,471
Y esto es esencialmente un término "o".
Va a buscar a "tree" y "rat"

29
00:01:41,803 --> 00:01:43,857
en cualquier parte de la cadena.

30
00:01:44,169 --> 00:01:47,547
Y luego, sólo para simplificar
la impresión del resultado,

31
00:01:47,866 --> 00:01:51,138
vamos a usar una fase de proyección
y en esa fase de proyección,

32
00:01:51,374 --> 00:01:54,867
vamos a mostrar el campo "words"
y vamos a suprimir "_id".

33
00:01:55,086 --> 00:01:57,911
Y eso va a simplemente imprimir los
resultados de una manera más clara.

34
00:01:58,147 --> 00:01:59,621
Veamos cómo se ve.

35
00:01:59,700 --> 00:02:03,838
Muy bien, "text_agg.js" fue el
archivo que te acabo de mostrar

36
00:02:03,839 --> 00:02:05,301
y voy a ejecutarlo.

37
00:02:05,317 --> 00:02:09,536
Y puedes ver que, cuando hice esto,
básicamente obtenemos todo lo que tenga

38
00:02:09,537 --> 00:02:12,773
"rat" y "tree" en ellos,
o mejor dicho "rat" <i>o</i> "tree".

39
00:02:12,785 --> 00:02:16,621
Por ejemplo "rat shrub granite",
"cat tree ruby"-- la capitalización

40
00:02:16,622 --> 00:02:17,915
no importa con búsqueda
de texto completo.

41
00:02:17,916 --> 00:02:24,046
Obtenemos muchos resultados que están relacionados
con "rat" y "tree", o con "rat" o "tree".

42
00:02:24,336 --> 00:02:26,357
Y sólo para señalar lo
que no podría ser obvio,

43
00:02:26,559 --> 00:02:30,083
las palabras, estas palabras aleatorias,
estuvieron en la clave "words",

44
00:02:30,091 --> 00:02:34,786
pero la clave "words" no aparece aquí en
los verdaderos términos que coinciden.

45
00:02:35,420 --> 00:02:38,995
Porque con full text search vas a tener
un máximo de un índice de full text

46
00:02:39,018 --> 00:02:43,479
en cada colección y no necesitas
especificar la clave que la mantiene.

47
00:02:43,868 --> 00:02:46,593
Sólo tienes que especificar que
deseas hacer una búsqueda de texto,

48
00:02:46,789 --> 00:02:48,553
buscando "tree" y "rat".

49
00:02:48,655 --> 00:02:53,417
Ahora, hablamos acerca de una manera de
tener un orden en los resultados de una

50
00:02:53,426 --> 00:02:58,164
búsqueda de texto completo de manera que los
pesos más altos de aquellos que tengan

51
00:02:58,179 --> 00:03:00,282
ambos términos, los muestre primero.

52
00:03:00,388 --> 00:03:03,339
Y puedes hacer eso
también usando agregación.

00:03:04,374 --> 00:03:06,231
Y aquí está ese archivo.

54
00:03:06,277 --> 00:03:09,726
En este caso, comenzamos ejecutando
la misma fase $match para iniciar.

55
00:03:10,456 --> 00:03:12,237
Vamos a hacer $match en "tree" y "rat".

56
00:03:12,287 --> 00:03:15,123
Y entonces vamos a ejecutar
una fase $sort en el pipeline,

57
00:03:15,643 --> 00:03:21,340
y en esa fase $sort, vamos a
ordenar por este "textScore".

58
00:03:21,588 --> 00:03:26,278
Así que creamos una nueva clave "score",
que está definido como una metainformación

59
00:03:26,310 --> 00:03:29,470
de "textScore", que es
lo que genera el motor

00:03:29,512 --> 00:03:31,402
mientras hace la búsqueda
de texto completo.

61
00:03:31,474 --> 00:03:35,834
Y así ahora vamos a ordenar por este
"textScore" para cada documento que fue

62
00:03:35,848 --> 00:03:39,303
descubierto con una búsqueda de texto completo
y esto debería darnos un array ordenado.

63
00:03:39,915 --> 00:03:44,331
Y, aquí mismo, vamos otra vez a
mostrar "words" y suprimir "_id"

64
00:03:44,548 --> 00:03:47,443
de tal manera que podamos
obtener un resultado más claro.

65
00:03:47,555 --> 00:03:49,532
Veamos cómo se ve
cuando lo ejecutamos.

66
00:03:50,350 --> 00:03:51,422
Muy bien.

67
00:03:51,423 --> 00:03:54,261
Y la diferencia aquí es que,
en este caso, los que tengan

68
00:03:54,283 --> 00:03:57,225
"rat" y "tree" aparecen primero
porque ellos coinciden mejor.

69
00:03:57,518 --> 00:04:00,461
"rat tree ruby", "rat tree granite",
"rat tree obsidian"--

70
00:04:00,672 --> 00:04:02,251
ves estos a la derecha arriba.

71
00:04:02,291 --> 00:04:05,601
Cuando hicimos esto sin el ordenamiento,
entonces puedes ver que incluso

72
00:04:05,618 --> 00:04:08,652
los documentos que contienen ambos términos
a veces están más profundamente

73
00:04:08,674 --> 00:04:10,335
ordenados en la lista.

74
00:04:10,359 --> 00:04:13,706
Ahora, lo último que deseo señalar
acerca de este full text search

75
00:04:13,739 --> 00:04:18,164
en agregación es que la fase $match
que incluye el full text search

76
00:04:18,317 --> 00:04:20,269
debe aparecer primero.

77
00:04:20,634 --> 00:04:23,837
Y la razón es que una vez que vas
a través de otra fase del pipeline

78
00:04:23,856 --> 00:04:27,325
como una agrupación, el índice de búsqueda
de texto completo ya no estará disponible

79
00:04:27,335 --> 00:04:29,328
en la colección, si lo quisieras.

80
00:04:29,421 --> 00:04:32,830
Si piensas en ello, siempre que
una fase del pipeline existe

81
00:04:33,171 --> 00:04:35,882
entonces vas de un conjunto de documentos
a otro conjunto de documentos

82
00:04:36,181 --> 00:04:38,990
y a diferencia de que los documentos
que pasaron la primera fase,

83
00:04:39,130 --> 00:04:41,098
no tendrá aquel índice de
búsqueda de texto completo,

84
00:04:41,125 --> 00:04:43,246
y, por lo tanto, no
puedes hacer este $match.

85
00:04:43,374 --> 00:04:47,245
Así que necesitas tener primero este
$match con el término full text search.

86
00:04:47,751 --> 00:04:49,368
De acuerdo, es momento
para un cuestionario.

87
00:04:49,389 --> 00:04:52,787
¿Cuál de los siguientes afirmaciones son
verdad acerca de usar el operador $text

88
00:04:52,796 --> 00:04:54,520
en el pipeline de agregación?

89
00:04:54,738 --> 00:04:57,683
$text está permitido solamente en la fase
$match del pipeline de agregación,

90
00:04:58,491 --> 00:05:01,848
$text está permitido solamente en un
$match que está en la primera fase

91
00:05:01,850 --> 00:05:03,268
del pipeline de agregación,

92
00:05:03,682 --> 00:05:06,950
$text puede ser usado sin un
índice de búsqueda de texto completo

93
00:05:07,148 --> 00:05:09,276
cuando se usa en
conjunción con agregación,

94
00:05:09,316 --> 00:05:12,782
y los resultados del $text siempre están ordenados
de acuerdo a la calidad de coincidencia en la búsqueda.

95
00:05:12,809 --> 00:05:14,287
¿Cuáles son verdaderos?
