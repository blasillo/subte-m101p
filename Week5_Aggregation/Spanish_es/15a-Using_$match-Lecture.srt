1
00:00:00,032 --> 00:00:03,674
Bien, la siguiente fase del pipeline
de agregación de la que quiero

2
00:00:03,674 --> 00:00:07,567
hablarte es la fase "$match".
"$match" realiza un filtrado

3
00:00:07,567 --> 00:00:12,147
equivalente a una operación "n:1".
"$match" recorrerá cada documento

4
00:00:12,147 --> 00:00:15,423
para ver si el documento
coincide con tu criterio.

5
00:00:15,423 --> 00:00:18,391
Si coincide, entonces lo pasará
a la siguiente fase

6
00:00:18,391 --> 00:00:19,933
del pipeline de agregación.

7
00:00:19,933 --> 00:00:22,473
Existen dos razones por las cuales
podrías querer emplear "$match".

8
00:00:22,486 --> 00:00:25,203
La primera es que podrías querer
filtrar los documentos

9
00:00:25,203 --> 00:00:27,523
y solo aplicar agregación
sobre un subconjunto de ellos.

10
00:00:27,539 --> 00:00:31,047
Y la segunda razón por la que podrías
querer realizar un "$match" es que

11
00:00:31,047 --> 00:00:34,040
podrías querer filtrar el propio
resultado que se usa para realizar

12
00:00:34,040 --> 00:00:36,515
una agregación y luego,
filtrar los resultados.

13
00:00:36,515 --> 00:00:41,222
Veamos cómo funcionaría con la
colección de códigos postales.

14
00:00:41,222 --> 00:00:43,702
Bien, aquí tenemos la
colección de códigos postales.

15
00:00:43,702 --> 00:00:49,302
Contiene un documento por cada
código postal, el cual es el "_id",

16
00:00:49,306 --> 00:00:52,996
una ciudad, ubicación,
población y estado.

17
00:00:52,996 --> 00:00:56,596
Ahora supongamos que quisiéramos
filtrar este conjunto de datos y

18
00:00:56,608 --> 00:01:00,841
agregar solo sobre documentos de un estado
en particular, por ejemplo California.

19
00:01:00,841 --> 00:01:03,258
Este documento pertenece al
estado de Alabama,

20
00:01:03,258 --> 00:01:07,523
California tiene "CA" como abreviatura,
por lo que vamos a filtrar por eso.

21
00:01:07,523 --> 00:01:10,160
Aquí vemos cómo lo haríamos
usando agregación.

22
00:01:10,160 --> 00:01:15,265
Esto de aquí es un pequeño script
en Emacs. Primero hacemos "use agg",

23
00:01:15,265 --> 00:01:20,580
y luego "db.zips.aggregate". Nuestro
pipeline de agregación solo contiene

24
00:01:20,580 --> 00:01:23,930
una fase, la cual es una fase
"$match" y puedes ver que está

25
00:01:23,930 --> 00:01:27,795
entre corchetes, ya que las fases
del pipeline de agregación forman

26
00:01:27,795 --> 00:01:30,273
parte de un array y
solo hay una en este caso.

27
00:01:30,273 --> 00:01:33,914
La fase "$match" se especifica
aquí de manera similar al

28
00:01:33,914 --> 00:01:36,777
criterio de un comando "find".

29
00:01:36,777 --> 00:01:40,290
Estamos diciendo que el estado
tiene que ser California.

30
00:01:40,290 --> 00:01:42,970
Allá vamos, muevo el cursor
para que puedas ver las comillas.

31
00:01:42,970 --> 00:01:49,000
Ejecutemos esto y veamos qué sucede.
Bien, ya lo ejecuté y puedes ver que

32
00:01:49,003 --> 00:01:51,806
ahora los resultados, cada documento
producido por agregación,

33
00:01:51,806 --> 00:01:54,693
es de en California.

34
00:01:54,693 --> 00:01:58,583
Ahora que hemos reducido nuestro
conjunto de datos solo a California,

35
00:01:58,583 --> 00:02:03,653
podemos realizar una agrupación
y obtener la población de cada ciudad

36
00:02:03,653 --> 00:02:07,134
agrupando por "city",
y te enseñaré cómo hacer eso.

37
00:02:07,134 --> 00:02:11,889
Bien, aquí vemos cómo primero
filtrarías por California con el

38
00:02:11,889 --> 00:02:14,829
"$match" y luego tenemos una coma.
Este es el segundo elemento del array

39
00:02:14,838 --> 00:02:18,897
en el pipeline y ahora vamos
a realizar una operación "$group"

40
00:02:18,897 --> 00:02:23,911
en esta fase del pipeline. Vamos
a agrupar por "city" y vemos que

41
00:02:23,911 --> 00:02:28,333
se pone "$city" para extraer la
ciudad del documento según avanza.

42
00:02:28,342 --> 00:02:34,171
Y vamos a agregar
la población, "$pop".

43
00:02:34,171 --> 00:02:38,138
Si recuerdas los documentos,
"pop" era donde se guardaba

44
00:02:38,138 --> 00:02:39,962
la población de cada código postal.

45
00:02:39,962 --> 00:02:45,732
A continuación, solo por diversión,
vamos a registrar todos los códigos

46
00:02:45,732 --> 00:02:51,274
postales incluidos en una ciudad y
lo haremos definiendo un nuevo campo

47
00:02:51,274 --> 00:02:58,588
"zip_codes" y usando el operador de
agregación "$addToSet" sobre los "_id".

48
00:02:58,591 --> 00:03:02,787
Y los propios "_id" van a ser códigos
postales mientras el documento pasa.

49
00:03:02,787 --> 00:03:07,452
De nuevo, estamos agrupando por ciudad
y cuando examinamos cada documento,

50
00:03:07,452 --> 00:03:11,920
si este está en una ciudad en
particular, vamos a añadir su población

51
00:03:11,920 --> 00:03:16,810
al campo "population" y después
también vamos a añadir el código postal

52
00:03:16,811 --> 00:03:20,331
al array "zip_codes".
Veamos qué obtenemos si hacemos eso.

53
00:03:21,698 --> 00:03:26,170
Bien, ahora vemos que los documentos
han sido agregados por ciudad.

54
00:03:26,170 --> 00:03:29,592
Por ejemplo, tenemos TERMO,
STANDISH, RAVENDALE,

55
00:03:29,592 --> 00:03:34,373
y sus poblaciones y puedes ver que
hay una lista de los códigos postales

56
00:03:34,373 --> 00:03:37,441
incluidos en cada ciudad.
Para estas ciudades en particular,

57
00:03:37,441 --> 00:03:40,917
parece que todas son ciudades muy
pequeñas con un único código postal.

58
00:03:40,917 --> 00:03:43,918
Pero creo que si vamos hacia
arriba podría haber una

59
00:03:43,918 --> 00:03:46,431
con varios códigos postales.

60
00:03:46,431 --> 00:03:51,512
¡Sí! TRUCKEE tiene una población de
9743, aún una ciudad pequeña pero

61
00:03:51,512 --> 00:03:54,391
incluye dos códigos postales como
puedes ver en el array "zip_codes".

62
00:03:54,662 --> 00:03:59,562
Pero este documento no es muy bonito
porque en vez de decir "city", dice

63
00:03:59,562 --> 00:04:04,431
"_id" y esa es precisamente la
naturaleza de la agregación,

64
00:04:04,431 --> 00:04:07,296
que tienes que definir un "_id"
por el cual vas a agrupar.

65
00:04:07,296 --> 00:04:12,163
Si queremos poner esto un poco más
bonito, podemos reformatear este

66
00:04:12,163 --> 00:04:16,268
documento renombrando el campo "_id"
por "city", y podemos hacer eso

67
00:04:16,268 --> 00:04:18,829
mediante una proyección.
Permíteme que te muestre cómo funciona.

68
00:04:18,829 --> 00:04:23,826
Justo aquí tenemos la misma consulta
de agregación, pero esta vez con una

69
00:04:23,826 --> 00:04:26,243
fase más. Así, tenemos nuestra fase
"$match" para filtrar solo nuestros

70
00:04:26,243 --> 00:04:27,613
documentos de California, justo aquí.

71
00:04:27,613 --> 00:04:30,515
Y tenemos nuestra fase "$group",
para agrupar por ciudad de forma

72
00:04:30,515 --> 00:04:32,905
que podamos obtener la población.
Y así es como lidiamos

73
00:04:32,905 --> 00:04:34,531
con el "_id" y el resultado.

74
00:04:34,531 --> 00:04:38,764
Por último, vamos a reformatear estos
documentos, lo cual es una operación "1:1".

75
00:04:38,764 --> 00:04:41,349
Y en esta fase de
proyección del pipeline

76
00:04:41,349 --> 00:04:44,216
vamos a omitir
el "_id",

77
00:04:44,216 --> 00:04:48,386
tenemos "_id: 0", y vamos a definir
un nuevo campo llamado "city".

78
00:04:48,386 --> 00:04:53,280
Ese nuevo campo usa el valor "$_id",
así que básicamente es

79
00:04:53,280 --> 00:04:55,578
un reformateo del documento,
un cambio de nombre del documento.

80
00:04:55,578 --> 00:05:00,090
Y vamos a mostrar la población,
poniendo "population: 1",

81
00:05:00,090 --> 00:05:04,735
y también los códigos postales
poniendo "zip_codes: 1".

82
00:05:04,735 --> 00:05:08,376
Y eso significa, incluye estas
cosas en el resultado final.

83
00:05:08,376 --> 00:05:11,781
Y eso va a reformatear nuestro
resultado para que sea más bonito.

84
00:05:11,781 --> 00:05:13,374
Veamos cómo queda.

85
00:05:14,314 --> 00:05:19,472
Bien, ahora hemos reformateado
el documento y puedes ver que

86
00:05:19,472 --> 00:05:22,446
la población está aquí, los códigos
postales aquí y la ciudad aquí.

87
00:05:22,446 --> 00:05:29,035
También notarás que MongoDB no
mantuvo el orden original de los campos.

88
00:05:29,035 --> 00:05:34,766
En nuestro resultado anterior, "_id"
aparecía primero y ahora el primero

89
00:05:34,766 --> 00:05:37,890
es "population", luego "zip_codes" y
por último "city", y este orden es

90
00:05:37,890 --> 00:05:42,025
distinto del que realmente indicamos.
Teníamos "city", "population"

91
00:05:42,025 --> 00:05:44,565
y "zip_codes", y obtuvimos
"population", "zip_codes" y "city".

92
00:05:44,565 --> 00:05:48,858
Por tanto, la fase de proyección
especificará qué campos quieres

93
00:05:48,858 --> 00:05:51,513
incluir en el resultado final,
para la siguiente fase del pipeline,

94
00:05:51,513 --> 00:05:54,802
mejor dicho, porque podrías hacer más
agregaciones a partir de aquí pero no

95
00:05:54,802 --> 00:05:56,876
necesariamente mantiene el orden.

96
00:05:56,876 --> 00:05:58,926
Bien, hora de hacer un cuestionario.

97
00:05:58,926 --> 00:06:03,953
Pensando de nuevo en la colección de
códigos postales con la que hemos jugado,

98
00:06:03,953 --> 00:06:08,889
escribe una consulta de agregación con
una única fase "$match" que filtre por

99
00:06:08,889 --> 00:06:13,179
códigos postales con más de 100,000
habitantes. Podrías necesitar echar

100
00:06:13,179 --> 00:06:15,827
un vistazo al uso del operador "$gt",
si has olvidado cómo se usa.

101
00:06:15,827 --> 00:06:19,566
Pongo un link aquí hacia la
documentación. La forma en que

102
00:06:19,566 --> 00:06:23,806
encontré esto es poniendo en
Google "$gt MongoDB".

103
00:06:23,806 --> 00:06:28,974
Así que Google es tu amigo cuando
necesites buscar en la documentación

104
00:06:28,974 --> 00:06:31,054
de MongoDB.
Escribe la consulta justo aquí.
