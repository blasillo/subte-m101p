1
00:00:00,000 --> 00:00:00,170

2
00:00:00,170 --> 00:00:00,790
OK.

3
00:00:00,790 --> 00:00:03,550
Ahora que comprendemos lo que
es el Aggregation Framework

4
00:00:03,550 --> 00:00:07,420
podemos ver ejemplos comunes de 
SQL y cómo se relacionan a

5
00:00:07,420 --> 00:00:08,820
MongoDB.

6
00:00:08,820 --> 00:00:10,760
Éstos están en la
documentación y no

7
00:00:10,760 --> 00:00:12,300
voy a repasarlos
todos, pero veamos

8
00:00:12,300 --> 00:00:14,040
un par de ellos.

9
00:00:14,040 --> 00:00:16,260
Esto está en la misma página que
el recuadro de cómo se relaciona

10
00:00:16,260 --> 00:00:17,610
SQL al Aggregation Framework.

11
00:00:17,610 --> 00:00:21,900
Asumimos que tenemos
una colección en MongoDB

12
00:00:21,900 --> 00:00:23,140
que contiene pedidos.

13
00:00:23,140 --> 00:00:25,960
Tiene unidades en este
en este array aquí.

14
00:00:25,960 --> 00:00:28,845
Puedes ver que las unidades
para este pedido están en

15
00:00:28,845 --> 00:00:31,250
este array con SKU,
cantidad y precio.

16
00:00:31,250 --> 00:00:35,580
Y también está la información
general sobre el pedido, 

17
00:00:35,580 --> 00:00:37,700
naturalmente junta 
en un solo documento.

18
00:00:37,700 --> 00:00:41,390
En el mundo de SQL, esto
estaría en tres tablas.

19
00:00:41,390 --> 00:00:43,390
Habría una tabla "orders"
que tendría esta

20
00:00:43,390 --> 00:00:44,420
información acá.

21
00:00:44,420 --> 00:00:47,430
Una tabla "order_lineitem"
que tendría esta

22
00:00:47,430 --> 00:00:48,380
información.

23
00:00:48,380 --> 00:00:51,460
Y luego habría una tabla
que juntaría todo probablemente

24
00:00:51,460 --> 00:00:54,690
"order_lineitem.order_id"
que usarías para juntar

25
00:00:54,690 --> 00:00:56,700
estas dos tablas para relacionar

26
00:00:56,700 --> 00:00:58,260
las unidades con los pedidos.

27
00:00:58,260 --> 00:01:02,830
Digamos que quiero contar
el número de órdenes.

28
00:01:02,830 --> 00:01:04,670
La manera en que funcionaría
en SQL es simplemente hacer

29
00:01:04,670 --> 00:01:06,940
SELECT COUNT * de "orders".

30
00:01:06,940 --> 00:01:11,580
Y si quiero hacer eso
en MongoDB, tenemos

31
00:01:11,580 --> 00:01:13,220
un comando "count".

32
00:01:13,220 --> 00:01:15,090
Así que hacemos "db.order.count",

33
00:01:15,090 --> 00:01:18,140
pero adheriéndonos al espíritu
del Aggregation Framework

34
00:01:18,140 --> 00:01:19,190
lo vamos a hacer de
la siguiente manera.

35
00:01:19,190 --> 00:01:22,080
Vamos a hacer "$group" de
acuerdo a algo que no hemos

36
00:01:22,080 --> 00:01:23,260
usado antes.

37
00:01:23,260 --> 00:01:25,330
El "$group" va a ser sobre null.

38
00:01:25,330 --> 00:01:27,630
Luego vamos a contar
con una nueva clave

39
00:01:27,630 --> 00:01:30,110
y sumar uno.

40
00:01:30,110 --> 00:01:32,970
Esto es simplemente para
mostrarte cómo se relaciona,

41
00:01:32,970 --> 00:01:35,870
aunque no vaya a ser exactamente
la manera en que lo calcules.

42
00:01:35,870 --> 00:01:37,460
Probablemente usarías "count".

43
00:01:37,460 --> 00:01:39,300
Yo probablemete hubiese
utilizado "count" en

44
00:01:39,300 --> 00:01:40,930
colección "orders" para
obtener esta información

45
00:01:40,930 --> 00:01:42,190
en particular.

46
00:01:42,190 --> 00:01:45,240
Lo siguiente es, veamos cuál
es la suma de los precios de

47
00:01:45,240 --> 00:01:46,250
todos los pedidos.

48
00:01:46,250 --> 00:01:47,800
SUM(price) FROM orders.

49
00:01:47,800 --> 00:01:50,340
Ésa es la expresión SQL.

50
00:01:50,340 --> 00:01:52,190
Puedo hacer eso usando agregación.

51
00:01:52,190 --> 00:01:55,560
Una vez más voy a agrupar
de acuerdo a _id null.

52
00:01:55,560 --> 00:01:58,100
Esta vez no hay otra manera de
hacerlo que yo sepa así que

53
00:01:58,100 --> 00:01:59,250
esto es muy útil.

54
00:01:59,250 --> 00:02:02,850
Agrupas por _id null y
luego cada documento

55
00:02:02,850 --> 00:02:04,320
va a ser agregado al mismo

56
00:02:04,320 --> 00:02:05,840
documento en el resultado.

57
00:02:05,840 --> 00:02:07,980
Y vamos a calcular el
total, que es la suma 

58
00:02:07,980 --> 00:02:11,030
de todos los precios.

59
00:02:11,030 --> 00:02:14,510
Ahora, saltemos hacia adelante
un poco y veamos uno que

60
00:02:14,510 --> 00:02:16,920
use un "$unwind" para que

61
00:02:16,920 --> 00:02:18,240
veas cómo funciona.

62
00:02:18,240 --> 00:02:21,180
Aquí hay uno que
usa un "$unwind".

63
00:02:21,180 --> 00:02:24,720
Lo que vamos a hacer aquí es
hacer "$unwind" en esta colección

64
00:02:24,720 --> 00:02:27,240
sobre las unidades y luego
agrupar por el ID del cliente

65
00:02:27,240 --> 00:02:29,780
y averiguar cuántas
unidades ha comprado.

66
00:02:29,780 --> 00:02:31,960
Éste es el número de
unidades únicas que un

67
00:02:31,960 --> 00:02:33,220
cliente compró.

68
00:02:33,220 --> 00:02:36,060
Es muy fácil de expresar usando
una consulta de agregación.

69
00:02:36,060 --> 00:02:40,470
Y en SQL se expresa así.
Obtenemos la suma de la

70
00:02:40,470 --> 00:02:43,720
unidad, la cantidad y juntamos

71
00:02:43,720 --> 00:02:46,240
la tabla "orders" y la tabla
"order_lineitem"--

72
00:02:46,240 --> 00:02:48,160
este es el "join"
donde las juntamos--

73
00:02:48,160 --> 00:02:50,150
y lo hacemos por
ID del cliente.

74
00:02:50,150 --> 00:02:52,540
Es algo diferente.

75
00:02:52,540 --> 00:02:54,280
Para serte honesto ahora que
he estado haciendo esto un tiempo

76
00:02:54,280 --> 00:02:57,370
me parece que esto es
más natural para mí.

77
00:02:57,370 --> 00:02:59,740
Puedo decodificarlo más
rápidamente que éste.

78
00:02:59,740 --> 00:03:01,172
Pensarlo como un
"pipeline" lo hace

79
00:03:01,172 --> 00:03:03,470
más fácil para mí.

80
00:03:03,470 --> 00:03:06,660
Puedes probar todos éstos
en esta página, si quieres.

81
00:03:06,660 --> 00:03:09,465
Ahora que entiendes las
diferentes partes del

82
00:03:09,465 --> 00:03:11,080
Aggregation Framework,
deberías poder deducir

83
00:03:11,080 --> 00:03:12,330
qué hace cada ejemplo.

84
00:03:12,330 --> 00:03:13,100