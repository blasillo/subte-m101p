1
00:00:00,000 --> 00:00:00,140

2
00:00:00,140 --> 00:00:01,940
El subsistema de
agregación te permite

3
00:00:01,940 --> 00:00:05,070
especificar ciertas
opciones que cambian

4
00:00:05,070 --> 00:00:06,630
el comportamiento
de la agregación y

5
00:00:06,630 --> 00:00:08,630
quiero hablarte de
cómo funcionan y

6
00:00:08,630 --> 00:00:11,070
cuándo podrías
necesitar usarlas.

7
00:00:11,070 --> 00:00:15,470
La primera es "explain"
y "explain" te permite,

8
00:00:15,470 --> 00:00:18,450
en lugar de ejecutar la
consulta de agregación,

9
00:00:18,450 --> 00:00:22,110
ver el plan de consulta
que sería utilizado

10
00:00:22,110 --> 00:00:24,140
si es que ejecutamos la
consulta de agregación.

11
00:00:24,140 --> 00:00:28,260
Eso es muy útil al optimizar
operaciones de agregación.

12
00:00:28,260 --> 00:00:32,640
La siguiente es "allowDiskUse"
y ésta controla si el

13
00:00:32,640 --> 00:00:36,030
Aggregation Framework usará

14
00:00:36,030 --> 00:00:39,760
el disco duro para algunas
de las fases intermedias.

15
00:00:39,760 --> 00:00:41,570
Por defecto, y veremos esto

16
00:00:41,570 --> 00:00:44,350
en una lección futura
sobre limitaciones,

17
00:00:44,350 --> 00:00:49,650
cada fase de agregación
está limitada a 100MB.

18
00:00:49,650 --> 00:00:52,460
Algunas fases, como la proyección,
pasan el documento de frente,

19
00:00:52,460 --> 00:00:54,517
y no utilizan
mucha memoria,

20
00:00:54,517 --> 00:00:56,100
pero para otras fases,
como por ejemplo,

21
00:00:56,100 --> 00:01:00,220
$sort, que por defecto es un
ordenamiento en memoria, si

22
00:01:00,220 --> 00:01:02,830
excede 100MB, la
agregación fallará.

23
00:01:02,830 --> 00:01:05,830
Si sabes que vas a hacer
una agregación grande y

24
00:01:05,830 --> 00:01:09,810
estás dispuesto a aceptar el impacto
en rendimiento por utilizar el disco,

25
00:01:09,810 --> 00:01:13,710
puedes especificar que la agregación
permita hacer uso del disco duro.

26
00:01:13,710 --> 00:01:16,280
La última tiene que ver con
el uso de cursores y el

27
00:01:16,280 --> 00:01:17,130
tamaño del cursor.

28
00:01:17,130 --> 00:01:19,220
Vamos a usar ésa
de una manera que

29
00:01:19,220 --> 00:01:20,928
es ligeramente diferente
de lo que esperarías.

30
00:01:20,928 --> 00:01:24,340
Te mostraré qué hace mientras
avancemos con la lección.

31
00:01:24,340 --> 00:01:27,280
OK. Hablemos sobre cómo
utilizamos algunas de éstas.

32
00:01:27,280 --> 00:01:30,420
Se acordarán de los "zips",
la colección de "zip codes",

33
00:01:30,420 --> 00:01:32,410
que mostramos anteriormente,
la cual tiene un montón de

34
00:01:32,410 --> 00:01:35,430
"zip codes" con su
número de habitantes.

35
00:01:35,430 --> 00:01:39,150
Podríamos querer agregar
de acuerdo al estado, el

36
00:01:39,150 --> 00:01:43,970
estado de EE.UU., y ver la
población que hay en él.

37
00:01:43,970 --> 00:01:46,364
Para hacer eso, hacemos
una agrupación acá. Una

38
00:01:46,364 --> 00:01:47,780
agrupación donde "_id"

39
00:01:47,780 --> 00:01:52,120
es el estado, "$state", y luego
la población es "$sum: $pop"

40
00:01:52,120 --> 00:01:55,450
lo cual se refiere al campo de
población de la colección de

41
00:01:55,450 --> 00:01:56,125
"zip codes".

42
00:01:56,125 --> 00:01:58,750
Para hacerte recordar cómo se
ve la colección de "zip codes",

43
00:01:58,750 --> 00:02:01,052
echémosle un vistazo.

44
00:02:01,052 --> 00:02:02,635
Veamos la colección
de "zip codes":

45
00:02:02,635 --> 00:02:03,385
"db.zips.findOne()".

46
00:02:03,385 --> 00:02:05,790

47
00:02:05,790 --> 00:02:08,949
Sólo para recordarte cómo se ve
la colección de "zip codes",

48
00:02:08,949 --> 00:02:11,390
cada documento contiene un
identificador con un código

49
00:02:11,390 --> 00:02:13,472
y luego una ciudad y un estado.

50
00:02:13,472 --> 00:02:14,930
Si queremos agregar en base

51
00:02:14,930 --> 00:02:17,450
a la población en cada
estado, podríamos hacerlo

52
00:02:17,450 --> 00:02:21,290
agrupando por el estado.
El "_id" es "state" y luego

53
00:02:21,290 --> 00:02:24,330
creamos un nuevo campo llamado

54
00:02:24,330 --> 00:02:27,620
"population" que es
la suma de todos los

55
00:02:27,620 --> 00:02:29,240
campos "$pop" de cada documento.

56
00:02:29,240 --> 00:02:31,900
El campo "$pop" contenía la
población de cada código "zip".

57
00:02:31,900 --> 00:02:33,870
Pero digamos que no queremos
hacer la consulta, sino

58
00:02:33,870 --> 00:02:35,390
simplemente hacer un "explain".

59
00:02:35,390 --> 00:02:37,730
Pues, así es como
agregas una opción.

60
00:02:37,730 --> 00:02:40,480
Entonces, justo acá puedes
ver que la primera parte

61
00:02:40,480 --> 00:02:44,780
de esta consulta de agregación
es un array de fases de agregación

62
00:02:44,780 --> 00:02:48,600
y en este caso sólo hay una,
la cual es la fase "$group",

63
00:02:48,600 --> 00:02:50,490
pero podría haber más.

64
00:02:50,490 --> 00:02:53,490
Y después de este array
tenemos otro documento

65
00:02:53,490 --> 00:02:56,330
y tenemos esta clave "explain"
con el valor de "true".

66
00:02:56,330 --> 00:02:59,880
Este par de clave/valor
"explain: true" le dice

67
00:02:59,880 --> 00:03:02,050
a MongoDB que en lugar de
ejecutar la agregación, debe

68
00:03:02,050 --> 00:03:04,949
darte una explicación
del plan de consulta.

69
00:03:04,949 --> 00:03:07,490
Hay que utilizarlo
y ver qué ocurre.

70
00:03:07,490 --> 00:03:10,000
Pongo esta consulta de agregación
en este archivo de texto, así

71
00:03:10,000 --> 00:03:12,240
que simplemente voy a
redirigirlo al shell.

72
00:03:12,240 --> 00:03:14,470
Ves que cuando lo ejecutamos,
en lugar de obtener la respuesta,

73
00:03:14,470 --> 00:03:19,950
obtenemos este documento
grande, el cual contiene

74
00:03:19,950 --> 00:03:23,800
toda esta información
sobre qué índices se usaron

75
00:03:23,800 --> 00:03:27,950
para satisfacer las diferentes
partes de la consulta de agregación.

76
00:03:27,950 --> 00:03:31,086
Por supuesto, si elimino
esto de acá, si lo elimino,

77
00:03:31,086 --> 00:03:33,210
ahora tengo sólo la consulta

78
00:03:33,210 --> 00:03:36,920
de agregación sin las opciones
extra de aquel documento.

79
00:03:36,920 --> 00:03:39,310
Entonces si lo ejecuto
de nuevo, voy a obtener

80
00:03:39,310 --> 00:03:42,205
los resultados de la agregación,
los cuales son muy simples.

81
00:03:42,205 --> 00:03:44,240
Es la población de
todos los estados.

82
00:03:44,240 --> 00:03:47,550
Éste es el primer grupo del
iterador, la primera página,

83
00:03:47,550 --> 00:03:49,630
y puedes ver la población
de cada estado a la fecha

84
00:03:49,630 --> 00:03:52,750
en que estos datos
fueron actualizados.

85
00:03:52,750 --> 00:03:55,880
OK. Así utilizarías "explain".

86
00:03:55,880 --> 00:03:58,930
Si quisieras utilizar el
disco durante la agregación,

87
00:03:58,930 --> 00:04:00,400
funcionaría de manera similar.

88
00:04:00,400 --> 00:04:02,715
Lo pondrías acá:
"allowDiskUse=true".

89
00:04:02,715 --> 00:04:06,790

90
00:04:06,790 --> 00:04:10,430
No te olvides de
agregar esta coma.

91
00:04:10,430 --> 00:04:13,460
Esto en verdad es un segundo
argumento a "aggregate",

92
00:04:13,460 --> 00:04:16,300
y así funcionará bien.

93
00:04:16,300 --> 00:04:18,829
Y no deberías notar
una diferencia en...

94
00:04:18,829 --> 00:04:19,670
perdón.

95
00:04:19,670 --> 00:04:20,980
Hay que revisar esto.

96
00:04:20,980 --> 00:04:22,430
Cometí un pequeño error.

97
00:04:22,430 --> 00:04:26,370
No es "allowDiskUse=true"
al crear un documento JSON.

98
00:04:26,370 --> 00:04:30,580
Si lo que quieres, en lugar de hacer el
"explain", es permitir el uso del disco,

99
00:04:30,580 --> 00:04:35,410
lo harías de esta manera:
"allowDiskUse: true",

100
00:04:35,410 --> 00:04:39,030
como un documento que le sigue al array, el
cual es el primer argumento de "aggregate",

101
00:04:39,030 --> 00:04:40,330
con todas las fases.

102
00:04:40,330 --> 00:04:43,182
Si ejecutamos eso, vemos
el mismo resultado.

103
00:04:43,182 --> 00:04:45,140
Puede que sea un poco más
lento, pero por supuesto

104
00:04:45,140 --> 00:04:46,920
no lo puedes notar para
este pequeño problema,

105
00:04:46,920 --> 00:04:48,510
porque está usando el disco.

106
00:04:48,510 --> 00:04:52,060
Entonces, algo que quería
resaltar muy rápidamente,

107
00:04:52,060 --> 00:04:54,910
es que hay dos formas
de agregación que son

108
00:04:54,910 --> 00:04:57,550
históricamente aceptables.

109
00:04:57,550 --> 00:05:01,030
En una forma, tienes
un array de fases.

110
00:05:01,030 --> 00:05:05,440
Fase, fase, fase.

111
00:05:05,440 --> 00:05:08,540
En otra forma,
sólo tienes esto.

112
00:05:08,540 --> 00:05:11,390
El "aggregate" y luego
sólo en paréntesis,

113
00:05:11,390 --> 00:05:16,320
sin array, simplemente
fase, fase, fase.

114
00:05:16,320 --> 00:05:19,520
Y cada una de estas fases es, por
supuesto, un documento JSON.

115
00:05:19,520 --> 00:05:23,370
Sólo esta forma, que
utiliza un array para

116
00:05:23,370 --> 00:05:25,390
contener las fases
de tu "pipeline",

117
00:05:25,390 --> 00:05:27,890
te permite agregar
opciones de agregación.

118
00:05:27,890 --> 00:05:29,150
Ésta no.

119
00:05:29,150 --> 00:05:32,240
A ésta, no puedes
agregarle opciones.

120
00:05:32,240 --> 00:05:34,380
Por eso, no utilices
esta forma más antigua

121
00:05:34,380 --> 00:05:35,660
si esperas agregar opciones.

122
00:05:35,660 --> 00:05:37,660
La razón es que
en esta forma,

123
00:05:37,660 --> 00:05:39,240
la opción estaría al
final y no habría una

124
00:05:39,240 --> 00:05:41,490
manera en que MongoDB
pueda diferenciar si

125
00:05:41,490 --> 00:05:45,200
es otra fase o las
opciones de agregación.

126
00:05:45,200 --> 00:05:47,450
Por supuesto, la manera
en que especificamos las

127
00:05:47,450 --> 00:05:49,620
opciones es teniendo
un array de fases.

128
00:05:49,620 --> 00:05:50,587
Fase, fase, fase.

129
00:05:50,587 --> 00:05:51,670
Y cada una es diferente.

130
00:05:51,670 --> 00:05:54,190
Digo, se llama
fase dos, fase tres.

131
00:05:54,190 --> 00:05:57,200
Luego, después de eso,
en este documento JSON

132
00:05:57,200 --> 00:05:58,870
justo acá, tenemos
nuestras opciones.

133
00:05:58,870 --> 00:06:02,910
Eso es lo que te mostré
antes en la pantalla.

134
00:06:02,910 --> 00:06:04,920
Puedes ver que
tenía, justo acá,

135
00:06:04,920 --> 00:06:08,730
estas fases en un array, sólo
una, y luego otro documento que

136
00:06:08,730 --> 00:06:12,590
contenía mis primeras opciones
"allowDiskUse" y "true".

137
00:06:12,590 --> 00:06:13,510
OK.

138
00:06:13,510 --> 00:06:16,130
De esa manera
especificas opciones

139
00:06:16,130 --> 00:06:18,759
y esto es utilizando JavaScript.

140
00:06:18,759 --> 00:06:20,300
En la próxima parte
te quiero mostrar

141
00:06:20,300 --> 00:06:23,090
cómo especificar las opciones
utilizando Python, lo cual

142
00:06:23,090 --> 00:06:26,020
es interesante por otra
razón que explicaré.

143
00:06:26,020 --> 00:06:27,780
OK. Es hora de un cuestionario.

144
00:06:27,780 --> 00:06:29,840
¿Cuáles de las siguientes
expresiones de agregación

145
00:06:29,840 --> 00:06:32,757
permiten apropiadamente el uso
de disco al hacer agregaciones?

146
00:06:32,757 --> 00:06:34,590
Y puedes ver que hay
cuatro opciones acá,

147
00:06:34,590 --> 00:06:36,780
y son sutilmente diferentes.