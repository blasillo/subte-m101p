1
00:00:00,000 --> 00:00:00,499


2
00:00:00,499 --> 00:00:02,680
Bien, unámoslo
todo ahora

3
00:00:02,680 --> 00:00:04,820
y construyamos una aplicación web.

4
00:00:04,820 --> 00:00:06,680
Tenemos mongod instalado.

5
00:00:06,680 --> 00:00:10,580
Tenemos nuestra capa de
aplicación por aquí,

6
00:00:10,580 --> 00:00:12,850
que va a ser
escrita en Python.

7
00:00:12,850 --> 00:00:15,350
Y tenemos PyMongo instalado.

8
00:00:15,350 --> 00:00:18,750
PyMongo va a comunicarse
con MongoDB vía BSON.

9
00:00:18,750 --> 00:00:21,270
Y por último
queremos ser

10
00:00:21,270 --> 00:00:24,640
capaces de mostrar una
página web vía HTTP.

11
00:00:24,640 --> 00:00:28,290
Para hacer eso, vamos
a escribir un programa que

12
00:00:28,290 --> 00:00:30,332
utiliza el framework Bottle.

13
00:00:30,332 --> 00:00:32,040
Te enseñaré un pequeño
programa "Hola Mundo"

14
00:00:32,040 --> 00:00:34,260
para ilustrar eso.

15
00:00:34,260 --> 00:00:39,626
Voy a abrir el
programa en Emacs.

16
00:00:39,626 --> 00:00:41,000
Lo analizaremos
línea a línea,

17
00:00:41,000 --> 00:00:42,440
para que podamos ver qué hace.

18
00:00:42,440 --> 00:00:44,110
Lo primero es "import bottle"

19
00:00:44,110 --> 00:00:47,360
y a continuación
"import pymongo".

20
00:00:47,360 --> 00:00:50,350
Luego crea
una ruta para "/",

21
00:00:50,350 --> 00:00:52,450
que significa que es la ruta
por defecto del servidor web.

22
00:00:52,450 --> 00:00:55,680
Así, cuando accedes a un servidor
web sin ninguna URL

23
00:00:55,680 --> 00:00:57,420
tras el nombre de host,
esto es lo que obtienes.

24
00:00:57,420 --> 00:01:00,310
Esto es un pequeño
decorador que le dice a Python

25
00:01:00,310 --> 00:01:02,640
que la función a continuación
se va a ejecutar

26
00:01:02,640 --> 00:01:04,470
cuando el usuario acceda a esa ruta.

27
00:01:04,470 --> 00:01:07,280
Y la hemos llamado
"index", pero no hay

28
00:01:07,280 --> 00:01:08,970
nada especial sobre ese nombre.

29
00:01:08,970 --> 00:01:12,050
De hecho, podrías llamarla de otra
forma si quieres.

30
00:01:12,050 --> 00:01:16,970
El primer paso aquí es
usar la clase MongoClient

31
00:01:16,970 --> 00:01:20,970
para conectarnos a
localhost al puerto 27017.

32
00:01:20,970 --> 00:01:23,640
Ese es el puerto por defecto
que usa mongod.

33
00:01:23,640 --> 00:01:27,610
Y a continuación, de nuevo, nos
conectamos a la base de datos "test"

34
00:01:27,610 --> 00:01:28,990
"db = connection.test".

35
00:01:28,990 --> 00:01:32,410
Y luego a la colección "names",
"db.names".

36
00:01:32,410 --> 00:01:35,672
Después buscamos un único documento
usando el comando "find_one".

37
00:01:35,672 --> 00:01:37,630
Eso va a poner ese
documento en la variable

38
00:01:37,630 --> 00:01:38,630
"item".

39
00:01:38,630 --> 00:01:43,230
Y luego va a devolver,
básicamente, "Hello" y lo que

40
00:01:43,230 --> 00:01:46,200
haya en la clave "name"
de ese documento.

41
00:01:46,200 --> 00:01:48,870
Esto es una convención de
Python por la que "%s!"

42
00:01:48,870 --> 00:01:51,670
se sustituirá por lo que vaya
tras este signo de porcentaje,

43
00:01:51,670 --> 00:01:53,700
en este caso, "item['name']".

44
00:01:53,700 --> 00:01:55,830
"item" es un diccionario,
y estamos extrayendo

45
00:01:55,830 --> 00:01:58,130
el valor de la clave "name".

46
00:01:58,130 --> 00:01:59,530
Este es el final
de esa función,

47
00:01:59,530 --> 00:02:01,410
que se va a ejecutar cuando
accedas a la ruta "/"

48
00:02:01,410 --> 00:02:02,850
en el servidor.

49
00:02:02,850 --> 00:02:05,150
Y lo único que nos queda
por hacer es que tenemos

50
00:02:05,150 --> 00:02:06,910
que decirle a Bottle que se ejecute.

51
00:02:06,910 --> 00:02:10,720
Para hacer eso, haremos
"bottle.run" con

52
00:02:10,720 --> 00:02:12,450
"host = 'localhost'"
y "port = 8082",

53
00:02:12,450 --> 00:02:15,360
que es un número de
puerto alto que

54
00:02:15,360 --> 00:02:17,570
podemos obtener sin ser root.

55
00:02:17,570 --> 00:02:20,440
Vamos a ejecutarlo.

56
00:02:20,440 --> 00:02:22,860
Bien, dice que está
escuchando en localhost.

57
00:02:22,860 --> 00:02:28,590
Ahora vayamos a un navegador
web y accedamos a esa URL.

58
00:02:28,590 --> 00:02:31,140
Podemos ver que dice
"Hello Dwight!"

59
00:02:31,140 --> 00:02:33,310
Si recuerdas, Dwight
estaba en la base de datos

60
00:02:33,310 --> 00:02:35,080
en la colección "names".

61
00:02:35,080 --> 00:02:37,230
Y si hacemos un cambio,
se refleja en la aplicación

62
00:02:37,230 --> 00:02:38,760
web que acabamos de construir.

63
00:02:38,760 --> 00:02:40,400
Vamos a ejecutar
el shell mongo

64
00:02:40,400 --> 00:02:43,070
y a recuperar
el documento

65
00:02:43,070 --> 00:02:44,130
de la colección "names".

66
00:02:44,130 --> 00:02:47,100
Vamos a hacer eso
asignando una variable JavaScript

67
00:02:47,100 --> 00:02:51,416
"j" el resultado de
"db.names.findOne".

68
00:02:51,416 --> 00:02:52,490
Vamos a echar un vistazo a "j".

69
00:02:52,490 --> 00:02:56,220
Vemos que "j" es un documento
con un "_id" asignado

70
00:02:56,220 --> 00:02:59,160
por la base de datos y a
continuación el nombre "Dwight".

71
00:02:59,160 --> 00:03:00,950
Podemos modificar eso
con JavaScript.

72
00:03:00,950 --> 00:03:03,680
Voy a cambiar el
nombre por "Andrew".

73
00:03:03,680 --> 00:03:05,620
Y ahora voy a
actualizar el documento

74
00:03:05,620 --> 00:03:08,870
haciendo
"db.names.save",

75
00:03:08,870 --> 00:03:11,626
pasando el valor de la
variable JavaScript "j".

76
00:03:11,626 --> 00:03:14,580
Bien, la base de datos nos dice
que encontró un documento que

77
00:03:14,580 --> 00:03:16,490
coincide y que modificó
un documento, lo cual

78
00:03:16,490 --> 00:03:20,590
se confirma ahora que todo
está tal como esperamos.

79
00:03:20,590 --> 00:03:23,380
Y podemos ver que hay
un documento en la colección

80
00:03:23,380 --> 00:03:26,840
"names" que tiene
el nombre "Andrew".

81
00:03:26,840 --> 00:03:31,010
Ahora, si volvemos a
nuestro navegador web justo aquí

82
00:03:31,010 --> 00:03:35,100
y lo ejecutamos de nuevo,
cambia a "Andrew".

83
00:03:35,100 --> 00:03:40,190
Ahora puedes ver que tenemos
una aplicación de principio a fin

84
00:03:40,190 --> 00:03:43,650
escrita en Python,
que usa Bottle,

85
00:03:43,650 --> 00:03:47,010
usa PyMongo,
se conecta a la base de datos

86
00:03:47,010 --> 00:03:49,050
y puede responder a
una petición HTTP

87
00:03:49,050 --> 00:03:51,490
y generar una página web.
