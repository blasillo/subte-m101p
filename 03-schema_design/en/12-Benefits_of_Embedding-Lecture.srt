1
00:00:00,000 --> 00:00:00,210

2
00:00:00,210 --> 00:00:03,010
The main benefit of embedding
data from two different

3
00:00:03,010 --> 00:00:05,470
collections and bringing it
together into one collection

4
00:00:05,470 --> 00:00:07,030
is performance.

5
00:00:07,030 --> 00:00:10,450
And the main performance benefit
comes from improved

6
00:00:10,450 --> 00:00:12,140
read performance.

7
00:00:12,140 --> 00:00:14,720
Now, why do we get improved
read performance?

8
00:00:14,720 --> 00:00:17,090
The reason is the nature of
the way these systems are

9
00:00:17,090 --> 00:00:20,640
built, the computer systems are
built, which is they often

10
00:00:20,640 --> 00:00:24,610
have spinning disks, and those
spinning disks have a very

11
00:00:24,610 --> 00:00:28,900
high latency, which means they
take a long time to get to the

12
00:00:28,900 --> 00:00:29,900
first byte.

13
00:00:29,900 --> 00:00:33,100
They often take over one
millisecond to get to the

14
00:00:33,100 --> 00:00:34,170
first byte.

15
00:00:34,170 --> 00:00:37,430
But then, once they get to the
first byte, each additional

16
00:00:37,430 --> 00:00:39,060
byte comes pretty quickly.

17
00:00:39,060 --> 00:00:41,380
So they tend to be pretty
high bandwidth.

18
00:00:41,380 --> 00:00:44,850
So the idea is that, if you can
co-locate the data that

19
00:00:44,850 --> 00:00:47,980
you're going to use together
in the same document, embed

20
00:00:47,980 --> 00:00:53,120
it, then you're going to spin
the disk, find the sector

21
00:00:53,120 --> 00:00:55,210
where you need this information,
and then you're

22
00:00:55,210 --> 00:00:56,540
going to start reading it.

23
00:00:56,540 --> 00:00:57,910
And you're going to get
all the information

24
00:00:57,910 --> 00:00:59,580
you need in one go.

25
00:00:59,580 --> 00:01:03,140
And it also means, if you have
two pieces of data that would

26
00:01:03,140 --> 00:01:06,960
normally be in two collections
or in several relational

27
00:01:06,960 --> 00:01:10,040
tables, but instead they're in
one document, that you avoid

28
00:01:10,040 --> 00:01:12,300
round trips to the database.

29
00:01:12,300 --> 00:01:14,690
Because now, in one round trip,
you can go in, you can

30
00:01:14,690 --> 00:01:16,800
read the data, and you
can get back out.

31
00:01:16,800 --> 00:01:17,840
Same thing with a write.

32
00:01:17,840 --> 00:01:21,305
In one trip, you can go to the
database, you can write the

33
00:01:21,305 --> 00:01:24,210
data you need, which would
normally potentially go into

34
00:01:24,210 --> 00:01:27,200
multiple different parts of the
system and parts of disk,

35
00:01:27,200 --> 00:01:30,260
write one location on the disk,
and then get back out.

36
00:01:30,260 --> 00:01:34,090
And the only real caveat on this
is, as I said earlier, if

37
00:01:34,090 --> 00:01:37,510
a document winds up getting
moved a lot more often because

38
00:01:37,510 --> 00:01:40,890
you've brought the data together
because the document

39
00:01:40,890 --> 00:01:43,940
needs to be expanded, then you
could create a problem.

40
00:01:43,940 --> 00:01:45,810
You could slow down your writes

41
00:01:45,810 --> 00:01:47,000
because of the embedding.

42
00:01:47,000 --> 00:01:49,990
So again, it all comes down to
your access patterns with

43
00:01:49,990 --> 00:01:53,540
MongoDB and trying to design
a schema around the access

44
00:01:53,540 --> 00:01:55,860
patterns that you see in your
actual application.

45
00:01:55,860 --> 00:01:57,110