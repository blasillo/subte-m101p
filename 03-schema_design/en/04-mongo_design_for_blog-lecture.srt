1
00:00:00,000 --> 00:00:00,430

2
00:00:00,430 --> 00:00:03,700
Let's return to the blog project
that we talked about

3
00:00:03,700 --> 00:00:06,840
in previous lessons and look at
the schema that we're going

4
00:00:06,840 --> 00:00:08,990
to use for that.

5
00:00:08,990 --> 00:00:12,560
So this is the blog running
on my local computer.

6
00:00:12,560 --> 00:00:15,820
And I'm looking for the page for
a particular test post I

7
00:00:15,820 --> 00:00:16,850
just put in.

8
00:00:16,850 --> 00:00:20,350
I have a post with the title,
this is a test post.

9
00:00:20,350 --> 00:00:21,720
And this is the body of it.

10
00:00:21,720 --> 00:00:24,030
And it's filed under
these three tags.

11
00:00:24,030 --> 00:00:27,470
And, over here, I can add
a comment if I want.

12
00:00:27,470 --> 00:00:31,570
Now, if I go here, into mongoDB,
what I've done is

13
00:00:31,570 --> 00:00:35,210
I've shown the document
that corresponds

14
00:00:35,210 --> 00:00:36,640
to that blog entry.

15
00:00:36,640 --> 00:00:38,600
And I want to take you through
it real quickly.

16
00:00:38,600 --> 00:00:43,680
And talk about whether or not
it satisfies some of those

17
00:00:43,680 --> 00:00:47,600
goals of normalization in
the relational world.

18
00:00:47,600 --> 00:00:51,990
So each of these documents
has an ID and an author.

19
00:00:51,990 --> 00:00:53,620
I wrote this blog post.

20
00:00:53,620 --> 00:00:56,290
There's a body, this
is a test body.

21
00:00:56,290 --> 00:00:59,960
There's a title that's down
here, this is a test post.

22
00:00:59,960 --> 00:01:02,260
These are ordered in a weird way
because they were put in

23
00:01:02,260 --> 00:01:05,090
by a Python program and it
doesn't keep the dictionaries

24
00:01:05,090 --> 00:01:07,300
ordered in any particular way.

25
00:01:07,300 --> 00:01:10,760
This is the date here that
the blog post was posted.

26
00:01:10,760 --> 00:01:13,050
And this is the slug, the
permalink, that's going to be

27
00:01:13,050 --> 00:01:14,820
used to display the URL.

28
00:01:14,820 --> 00:01:19,630
Here are the tags, which are
an array of different tags

29
00:01:19,630 --> 00:01:21,720
that this post was
filed under.

30
00:01:21,720 --> 00:01:24,110
And then here are the comments
that people left on the blog.

31
00:01:24,110 --> 00:01:29,040
It's an array of documents
with a

32
00:01:29,040 --> 00:01:30,510
body, email, and author.

33
00:01:30,510 --> 00:01:35,530
So the question is, first of
all, is this susceptible to

34
00:01:35,530 --> 00:01:39,330
the type of update anomalies due
to the redundancy of data

35
00:01:39,330 --> 00:01:42,810
that we saw in that denormalized
table from the

36
00:01:42,810 --> 00:01:43,810
relational world.

37
00:01:43,810 --> 00:01:50,150
And the answer is mostly no,
in the sense that my author

38
00:01:50,150 --> 00:01:53,890
user ID appears only once.

39
00:01:53,890 --> 00:01:58,260
And we use this as the ID
for the user's table.

40
00:01:58,260 --> 00:02:03,090
So the assumption in our blog
design is that the author

41
00:02:03,090 --> 00:02:05,890
name, the username,
is immutable.

42
00:02:05,890 --> 00:02:07,560
If we wanted to change that
we'd have to use a

43
00:02:07,560 --> 00:02:09,639
numerical user ID.

44
00:02:09,639 --> 00:02:13,240
Now this looks like it has
some redundancy of data.

45
00:02:13,240 --> 00:02:16,420
And in a sense it does, except
that these users that leave

46
00:02:16,420 --> 00:02:18,640
comments on our blog
are unregistered.

47
00:02:18,640 --> 00:02:20,680
And so, they could leave
whatever email

48
00:02:20,680 --> 00:02:21,430
address they want.

49
00:02:21,430 --> 00:02:23,680
So if the same user left two
comments, he could leave two

50
00:02:23,680 --> 00:02:24,620
different email addresses.

51
00:02:24,620 --> 00:02:26,930
So we're not necessarily
looking to keep these

52
00:02:26,930 --> 00:02:27,520
consistent.

53
00:02:27,520 --> 00:02:30,050
So I would argue that this
is not a redundancy of

54
00:02:30,050 --> 00:02:31,740
data in this case.

55
00:02:31,740 --> 00:02:35,580
And these tags, they sit here
as strings and they're also

56
00:02:35,580 --> 00:02:37,620
not listed redundantly either.

57
00:02:37,620 --> 00:02:41,320
So, in this case, although
we've embedded a bunch of

58
00:02:41,320 --> 00:02:44,270
information that would be in
multiple tables in a third

59
00:02:44,270 --> 00:02:46,000
normalized form in a relational
world, we've

60
00:02:46,000 --> 00:02:48,230
embedded the data into
a single document.

61
00:02:48,230 --> 00:02:52,250
We haven't really violated
that goal of keeping data

62
00:02:52,250 --> 00:02:54,600
consistent by avoiding
redundancies.

63
00:02:54,600 --> 00:02:57,070
Now one of the other goals,
when you're designing a

64
00:02:57,070 --> 00:03:00,070
schema, of course, is that it
optimized the data access

65
00:03:00,070 --> 00:03:02,290
patterns you're going to
see in the application.

66
00:03:02,290 --> 00:03:06,190
And we do that very well, in
this case, because when we

67
00:03:06,190 --> 00:03:09,490
pull the document out of this
collection to display on the

68
00:03:09,490 --> 00:03:13,120
blog, we have just about all
the information we need to

69
00:03:13,120 --> 00:03:15,800
display it to the user.

70
00:03:15,800 --> 00:03:17,260
We have the date
it was posted.

71
00:03:17,260 --> 00:03:18,770
We have their username.

72
00:03:18,770 --> 00:03:19,445
We have the comments.

73
00:03:19,445 --> 00:03:22,400
We have everything we need
right in the same place.

74
00:03:22,400 --> 00:03:24,850
And, by the way, right here at
the bottom, this is what's in

75
00:03:24,850 --> 00:03:27,385
the users collection, which is
just my user entry, which is

76
00:03:27,385 --> 00:03:30,870
an underscore ID of me, my name,
erlichson, and then an

77
00:03:30,870 --> 00:03:32,570
encrypted password over here.

78
00:03:32,570 --> 00:03:35,450
And those are the two main
collections that are used to

79
00:03:35,450 --> 00:03:36,750
organize the blog.

80
00:03:36,750 --> 00:03:38,730
And you're going to be doing
some more work on the blog

81
00:03:38,730 --> 00:03:40,440
this week for your homework,
and this is the way you're

82
00:03:40,440 --> 00:03:41,650
expected to insert the data.

83
00:03:41,650 --> 00:03:44,780
So it's a good idea to take
a look at it here.

84
00:03:44,780 --> 00:03:48,090
So, anyway, what we've done
here, in this design, is we've

85
00:03:48,090 --> 00:03:51,240
created a design where there
is embedding of data within

86
00:03:51,240 --> 00:03:54,160
the document, and we're no
longer using multiple tables.

87
00:03:54,160 --> 00:03:57,760
And you might argue that it is
de-normalized, but it is

88
00:03:57,760 --> 00:04:01,600
de-normalized in a way that does
not violate many of the

89
00:04:01,600 --> 00:04:04,460
advantages of a normalized
design.

90
00:04:04,460 --> 00:04:07,630
We're not going to get these
data anomalies in this design.

91
00:04:07,630 --> 00:04:09,860
All right, so let's
have a quiz.

92
00:04:09,860 --> 00:04:12,410
OK, and here's the quiz.

93
00:04:12,410 --> 00:04:16,850
Which data access pattern is not
well supported by the blog

94
00:04:16,850 --> 00:04:19,230
schema that we've chosen?

95
00:04:19,230 --> 00:04:21,630
And the choices are, collecting
the most recent

96
00:04:21,630 --> 00:04:25,220
blog entries for the blog
homepage, collecting all the

97
00:04:25,220 --> 00:04:28,320
information to display for a
single post, collecting all

98
00:04:28,320 --> 00:04:32,270
comments by a single author,
or providing a table of

99
00:04:32,270 --> 00:04:36,570
contents by tag, which of those
is not well supported by

100
00:04:36,570 --> 00:04:37,820
the current schema.

101
00:04:37,820 --> 00:04:38,510