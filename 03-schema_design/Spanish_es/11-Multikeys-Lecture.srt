1
00:00:00,000 --> 00:00:00,500


2
00:00:00,500 --> 00:00:02,940
Una de las razones por las
que referenciar y embeber

3
00:00:02,940 --> 00:00:06,310
funciona tan bien en MongoDB
es la existencia de una

4
00:00:06,310 --> 00:00:09,580
característica llamada
índices multiclave.

5
00:00:09,580 --> 00:00:11,910
Voy a hablar un poco
acerca de los índices multiclave

6
00:00:11,910 --> 00:00:14,892
y por qué son tan
útiles en MongoDB.

7
00:00:14,892 --> 00:00:18,010
Ahora, supongamos que tienes
un esquema que incluye estudiantes

8
00:00:18,010 --> 00:00:20,880
y profesores. Este es un
esquema que ya hemos visto antes.

9
00:00:20,880 --> 00:00:22,580
Y estos son dos
documentos de ejemplo

10
00:00:22,580 --> 00:00:23,880
de estas colecciones.

11
00:00:23,880 --> 00:00:25,770
La colección "students"
podría tener

12
00:00:25,770 --> 00:00:27,300
un documento distinto
por cada estudiante

13
00:00:27,300 --> 00:00:30,430
con un único "_id", un campo
"name" por cada estudiante,

14
00:00:30,430 --> 00:00:33,590
y una clave "teachers" para
los profesores, donde

15
00:00:33,590 --> 00:00:36,920
el valor es una lista
de los "_id" de todos los

16
00:00:36,920 --> 00:00:38,790
profesores que
tiene el estudiante.

17
00:00:38,790 --> 00:00:41,470
En el otro lado tenemos
esta colección "teachers",

18
00:00:41,470 --> 00:00:43,960
que contiene un documento
por cada profesor

19
00:00:43,960 --> 00:00:45,990
con un único
"_id", un valor entero

20
00:00:45,990 --> 00:00:48,600
y un campo "name" por
cada profesor.

21
00:00:48,600 --> 00:00:50,630
Aquí puedes ver
que Tony Stark es

22
00:00:50,630 --> 00:00:53,120
el único profesor que
hay ahora en la colección.

23
00:00:53,120 --> 00:00:55,710
Y esto por aquí dice que
Andrew ha tenido cuatro profesores

24
00:00:55,710 --> 00:00:58,200
y que uno de
ellos es Tony Stark.

25
00:00:58,200 --> 00:01:00,450
Bien, hay dos
consultas posibles,

26
00:01:00,450 --> 00:01:02,300
o mejor dicho, dos
consultas obvias.

27
00:01:02,300 --> 00:01:04,610
Una es, ¿cómo puedo
encontrar todos los profesores

28
00:01:04,610 --> 00:01:06,380
que ha tenido un
estudiante en concreto?

29
00:01:06,380 --> 00:01:09,660
Y la otra es, ¿cómo puedo
encontrar todos los estudiantes

30
00:01:09,660 --> 00:01:11,307
que han tenido un profesor
en particular?

31
00:01:11,307 --> 00:01:12,890
Analicemos la primera
de ellas,

32
00:01:12,890 --> 00:01:15,690
¿cómo encuentro los profesores
de un estudiante en concreto?

33
00:01:15,690 --> 00:01:18,820
Bien, esa consulta es bastante
sencilla porque puedo simplemente

34
00:01:18,820 --> 00:01:19,820
buscar en esta colección.

35
00:01:19,820 --> 00:01:21,330
Puedo consultar la
colección "students".

36
00:01:21,330 --> 00:01:23,600
Podría hacer "db.students.find".

37
00:01:23,600 --> 00:01:25,850
Puedo especificar el
estudiante que estoy buscando

38
00:01:25,850 --> 00:01:29,210
y luego devolver la clave
"teachers" con sus valores,

39
00:01:29,210 --> 00:01:31,070
y así sabré quiénes
son los profesores.

40
00:01:31,070 --> 00:01:33,000
Pero, ¿cómo encontramos
todos los estudiantes que

41
00:01:33,000 --> 00:01:34,740
han tenido un profesor
en particular?

42
00:01:34,740 --> 00:01:36,290
Esa es una consulta
más difícil.

43
00:01:36,290 --> 00:01:38,860
Esa consulta va a usar nuestros
operadores de conjuntos.

44
00:01:38,860 --> 00:01:41,130
Para que sea eficiente,

45
00:01:41,130 --> 00:01:43,190
necesitamos ser capaces
de usar un índice.

46
00:01:43,190 --> 00:01:46,870
Y esto va a ser posible
gracias a un índice multiclave.

47
00:01:46,870 --> 00:01:50,330
Así que te voy a mostrar
en el shell cómo se hace.

48
00:01:50,330 --> 00:01:50,830
Bien.

49
00:01:50,830 --> 00:01:52,770
Ya tenemos preparadas dos
colecciones diferentes

50
00:01:52,770 --> 00:01:53,560
por aquí.

51
00:01:53,560 --> 00:01:54,790
Tenemos la colección
"students" y

52
00:01:54,790 --> 00:01:55,915
la colección "teachers".

53
00:01:55,915 --> 00:01:58,020
Aquí está la colección
"students" y aquí

54
00:01:58,020 --> 00:01:59,021
la colección "teachers".

55
00:01:59,021 --> 00:02:00,978
Y podemos ver que la
colección "students" contiene

56
00:02:00,978 --> 00:02:02,810
una lista de estudiantes,
incluido yo mismo,

57
00:02:02,810 --> 00:02:04,250
y los profesores que he tenido.

58
00:02:04,250 --> 00:02:05,750
Y aquí en la
colección "teachers",

59
00:02:05,750 --> 00:02:07,489
tenemos una lista de
profesores, que son

60
00:02:07,489 --> 00:02:09,030
los profesores
que estaban enseñando

61
00:02:09,030 --> 00:02:10,310
cuando estuve en Stanford.

62
00:02:10,310 --> 00:02:12,070
Podemos ver que,
por ejemplo,

63
00:02:12,070 --> 00:02:14,990
tuve a los profesores 0
y 1, que son

64
00:02:14,990 --> 00:02:17,100
Mark Horowitz y John Hennessy.

65
00:02:17,100 --> 00:02:20,020
Ahora, si quisiéramos añadir
un índice multiclave sobre esta

66
00:02:20,020 --> 00:02:25,970
clave "teachers", podríamos hacerlo
así, "db.students.ensureIndex"

67
00:02:25,970 --> 00:02:28,140
"({'teachers': 1})".

68
00:02:28,140 --> 00:02:30,470
Aún no hemos analizado
los índices,

69
00:02:30,470 --> 00:02:32,380
pero así es como
los crearías.

70
00:02:32,380 --> 00:02:34,407
Y ahora el shell
devuelve información,

71
00:02:34,407 --> 00:02:35,990
antes había
un índice, que

72
00:02:35,990 --> 00:02:38,530
era el índice sobre "_id"
que existe en cada colección,

73
00:02:38,530 --> 00:02:39,840
y ahora hay dos.

74
00:02:39,840 --> 00:02:41,792
A continuación vamos a
hacer una consulta que

75
00:02:41,792 --> 00:02:43,500
usará ese índice
y será eficiente.

76
00:02:43,500 --> 00:02:45,150
Bien, encontremos todos
los estudiantes que

77
00:02:45,150 --> 00:02:47,380
tuvieron a Mark Horowitz y John
Hennessy como profesores.

78
00:02:47,380 --> 00:02:49,970
Mark Horowitz es el "_id" 0,
y John Hennessy el 1.

79
00:02:49,970 --> 00:02:55,820
Así que haremos "db.students.find
({'teachers': {$all:[0,1]}})".

80
00:02:55,820 --> 00:02:56,630
Ahí vamos.

81
00:02:56,630 --> 00:02:59,110
Ahora hacemos una
consulta, y solicitamos,

82
00:02:59,110 --> 00:03:00,780
encuentra todos los
estudiantes que tuvieron

83
00:03:00,780 --> 00:03:02,850
a 0 y 1 como valor en
su clave "teachers".

84
00:03:02,850 --> 00:03:05,450
Y vemos que somos
yo, Andrew Erlichson,

85
00:03:05,450 --> 00:03:07,410
y también Richard Kreuter.

86
00:03:07,410 --> 00:03:09,399
Él también tiene los valores
0 y 1 en "teachers".

87
00:03:09,399 --> 00:03:11,940
Entonces, la cuestión es, ¿cómo
sabemos que usó un índice?

88
00:03:11,940 --> 00:03:14,148
Bien, hay un pequeño comando
del que no hemos hablado

89
00:03:14,148 --> 00:03:16,000
aún, pero que hace
precisamente esto.

90
00:03:16,000 --> 00:03:18,980
Podemos añadir "explain" al
final de esta consulta.

91
00:03:18,980 --> 00:03:21,230
Si añadimos "explain"
al final de esta consulta,

92
00:03:21,230 --> 00:03:24,490
nos dirá qué hizo cuando
estaba realizando la consulta.

93
00:03:24,490 --> 00:03:26,740
Y si hacemos eso,
podemos ver aquí

94
00:03:26,740 --> 00:03:28,770
que devuelve un
montón de información,

95
00:03:28,770 --> 00:03:32,110
y lo que nos dice es
que usó el índice

96
00:03:32,110 --> 00:03:36,210
"BtreeCursor teachers_1", que
es un índice multiclave.

97
00:03:36,210 --> 00:03:38,170
Y así es como funcionan
los índices multiclave

98
00:03:38,170 --> 00:03:41,030
y por qué hace que referenciar y
embeber sean métodos eficientes

99
00:03:41,030 --> 00:03:45,710
para representar información
en MongoDB cuando haces consultas.
