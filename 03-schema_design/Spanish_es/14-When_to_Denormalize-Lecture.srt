1
00:00:00,000 --> 00:00:00,150

2
00:00:00,150 --> 00:00:04,170
Comenzamos esta unidad hablando
acerca de la tercera forma

3
00:00:04,170 --> 00:00:07,010
normal y la denormalización.

4
00:00:07,010 --> 00:00:12,680
Y si recuerdas, una de las
razones para normalizar tus datos

5
00:00:12,680 --> 00:00:17,250
en el mundo relacional
es porque deseas evitar

6
00:00:17,250 --> 00:00:19,240
las anomalías de modificación
que vienen con la duplicación

7
00:00:19,240 --> 00:00:20,470
de datos.

8
00:00:20,470 --> 00:00:24,890
Y cuando consideramos esto y cómo
está estructurado en MongoDB,

9
00:00:24,890 --> 00:00:28,410
permitiéndonos estos documentos
enriquecidos, es fácil asumir

10
00:00:28,410 --> 00:00:30,810
que estamos denormalizando datos.

11
00:00:30,810 --> 00:00:33,340
Hasta cierto punto, eso es cierto.

12
00:00:33,340 --> 00:00:37,460
Pero mientras no dupliquemos
datos, no nos volvemos vulnerables

13
00:00:37,460 --> 00:00:40,510
a las anomalías de modificación.

14
00:00:40,510 --> 00:00:43,870
Reconsiderando lo que
vimos en esta unidad,

15
00:00:43,870 --> 00:00:46,580
hablamos acerca de
relaciones de uno a uno

16
00:00:46,580 --> 00:00:48,930
y en ese caso es perfectamente
seguro embeber los datos si

17
00:00:48,930 --> 00:00:50,400
lo deseas y no

18
00:00:50,400 --> 00:00:53,030
te vuelves vulnerable
a estas anomalías de

19
00:00:53,030 --> 00:00:55,260
modificación porque no
estás duplicando datos.

20
00:00:55,260 --> 00:00:56,980
Básicamente, estás simplemente
tomando algo que estaría normalmente

21
00:00:56,980 --> 00:01:00,320
en una tabla separada,
y estás plegándolo

22
00:01:00,320 --> 00:01:02,150
en otra tabla y eso

23
00:01:02,150 --> 00:01:05,400
no duplica datos
necesariamente.

24
00:01:05,400 --> 00:01:08,440
Ahora, cuando tienes una relación
de uno a muchos, entonces

25
00:01:08,440 --> 00:01:10,820
embeber puede también funcionar
bien sin duplicación de datos,

26
00:01:10,820 --> 00:01:13,760
siempre y cuando embebas a
"los muchos" en "los unos".

27
00:01:13,760 --> 00:01:17,350
Ahora, si deseas ir desde "los unos"
hacia "los muchos", entonces

28
00:01:17,350 --> 00:01:21,340
relacionar evitaría la
duplicación de datos.

29
00:01:21,340 --> 00:01:24,620
Una vez más, si necesitas
embeber algo por razones de

30
00:01:24,620 --> 00:01:27,100
rendimiento debido a los
patrones de acceso de tu

31
00:01:27,100 --> 00:01:29,300
de tu aplicación, esto
podría tener sentido aun

32
00:01:29,300 --> 00:01:32,850
si causa la duplicación de datos,
especialmente si los datos cambian

33
00:01:32,850 --> 00:01:34,190
o se actualizan raramente.

34
00:01:34,190 --> 00:01:37,160
Sin embargo, puedes evitarlo con
suficiente frecuencia, incluso en

35
00:01:37,160 --> 00:01:40,660
esta relación, si pasas de
"los muchos" a "los unos".

36
00:01:40,660 --> 00:01:44,150
Así, en la relación de
muchos a muchos que vimos

37
00:01:44,150 --> 00:01:47,670
con alumnos y profesores y
autores y libros, ahí, si

38
00:01:47,670 --> 00:01:49,980
deseas evitar las anomalías
de modificación que vienen

39
00:01:49,980 --> 00:01:54,420
con la denormalización, todo lo
que necesitas es relacionar a

40
00:01:54,420 --> 00:01:59,380
través de estos arrays de
ObjectIds en los documentos.

41
00:01:59,380 --> 00:02:01,570
Si es necesario--por razones
de rendimiento o por otras

42
00:02:01,570 --> 00:02:04,490
razones--coincidir algún tipo
de consulta que tienes que hacer

43
00:02:04,490 --> 00:02:07,430
en tu aplicación, entonces
puedes embeber datos.

44
00:02:07,430 --> 00:02:10,410
Pero te das cuenta que podrías
estar duplicando algunos datos.

45
00:02:10,410 --> 00:02:13,070
Y tu responsabilidad como
programador de aplicaciones

46
00:02:13,070 --> 00:02:14,320
es mantener todo actualizado.
