1
00:00:00,000 --> 00:00:00,230

2
00:00:00,230 --> 00:00:03,250
Un problema clásico del mundo
de diseño de esquemas es cómo

3
00:00:03,250 --> 00:00:06,640
representar un árbol dentro
de una base de datos.

4
00:00:06,640 --> 00:00:09,860
Veamos, por ejemplo, el
problema de representar

5
00:00:09,860 --> 00:00:13,160
las categorías de e-commerce en
un sitio e-commerce, tal como

6
00:00:13,160 --> 00:00:16,990
Amazon, donde se puede tener
las categorías casa, aire libre,

7
00:00:16,990 --> 00:00:19,180
invierno, nieve. La idea aquí es
que tienes estos documentos y

8
00:00:19,180 --> 00:00:20,430
están en una colección de productos.

9
00:00:20,430 --> 00:00:21,910
Tienen un nombre de
producto y un montón de

10
00:00:21,910 --> 00:00:23,260
atributos del producto

11
00:00:23,260 --> 00:00:26,880
y tienen alguna categoría,
digamos, categoría siete.

12
00:00:26,880 --> 00:00:30,530
Y tienen otra colección
de categorías, donde

13
00:00:30,530 --> 00:00:32,590
puedes ver la categoría siete,
el nombre de la categoría,

14
00:00:32,590 --> 00:00:34,500
y algunas de las propiedades
acerca de la categoría.

15
00:00:34,500 --> 00:00:38,660
Una manera de modelarlo es que
podrías mantener su ID padre,

16
00:00:38,660 --> 00:00:40,040
justo aquí.

17
00:00:40,040 --> 00:00:42,810
Y eso sería la forma en que
podrías hacerlo en una simple

18
00:00:42,810 --> 00:00:44,140
base de datos relacional.

19
00:00:44,140 --> 00:00:47,740
Pero no significa que sea muy
fácil encontrar todos los padres

20
00:00:47,740 --> 00:00:48,755
de esta categoría.

21
00:00:48,755 --> 00:00:52,190
Tendrías que consultar
interactivamente, encontrar

22
00:00:52,190 --> 00:00:55,180
el padre de ésta, luego encontrar el
padre de aquélla, hasta obtener todas

23
00:00:55,180 --> 00:00:56,500
hacia arriba.

24
00:00:56,500 --> 00:01:00,320
Por lo que una forma alternativa
de hacerlo, en MongoDB, es ser

25
00:01:00,320 --> 00:01:02,890
capaz de listar ancestros o hijos.

26
00:01:02,890 --> 00:01:06,130
Pensemos acerca de esto
y de cómo funcionaría.

27
00:01:06,130 --> 00:01:08,420
Podrías listar todos los

28
00:01:08,420 --> 00:01:11,000
hijos de esta categoría,

29
00:01:11,000 --> 00:01:13,440
pero eso es también bastante
limitante, si quieres poder

30
00:01:13,440 --> 00:01:16,750
buscar y encontrar todo el
sub-árbol que está por encima

31
00:01:16,750 --> 00:01:18,370
de una parte específica del árbol.

32
00:01:18,370 --> 00:01:21,810
En cambio, lo que funciona bastante
bien, una vez más facilitado por la

33
00:01:21,810 --> 00:01:25,870
capacidad de poner
arrays en MongoDB,

34
00:01:25,870 --> 00:01:29,430
es listar los ancestros.

35
00:01:29,430 --> 00:01:33,710
Así que digamos que decidimos listar
todos los ancestros de éste desde

36
00:01:33,710 --> 00:01:35,490
la parte superior, en orden.

37
00:01:35,490 --> 00:01:39,360
Ahora, usando esta información
puedo encontrar todas las

38
00:01:39,360 --> 00:01:42,610
categorías padre
de esta categoría.

39
00:01:42,610 --> 00:01:44,465
Si deseas listar el "breadcrumbs"
y hacer que el usuario pueda

40
00:01:44,465 --> 00:01:46,600
navegar el sitio fácilmente--

41
00:01:46,600 --> 00:01:50,150
y una vez más, la capacidad de
estructurar y expresar datos

42
00:01:50,150 --> 00:01:54,560
enriquecidos es una de las cosas que
hace tan interesante a MongoDB--

43
00:01:54,560 --> 00:01:56,310
sería muy difícil hacerlo

44
00:01:56,310 --> 00:01:57,690
en una base de datos relacional.

45
00:01:57,690 --> 00:02:00,540
En cuanto a la forma de
representar los datos para

46
00:02:00,540 --> 00:02:04,050
algo como una jerarquía de
categoría de productos, una

47
00:02:04,050 --> 00:02:05,300
vez más, depende de tus
patrones de acceso.

48
00:02:05,300 --> 00:02:08,759
Depende de cómo crees que
vas a necesitar mostrar

49
00:02:08,759 --> 00:02:11,150
los datos, acceder a los
datos para el usuario

50
00:02:11,150 --> 00:02:14,140
y luego, en base a eso,
saber cómo modelarlo.

51
00:02:14,140 --> 00:02:16,280
Muy bien, hagamos un
cuestionario sobre la

52
00:02:16,280 --> 00:02:19,420
representación de
árboles en MongoDB.

53
00:02:19,420 --> 00:02:22,400
Dado el siguiente documento
típico de una jerarquía

54
00:02:22,400 --> 00:02:26,030
de categorías e-commerce llamado
"categories" y aquí está el

55
00:02:26,030 --> 00:02:29,660
documento que está en la
colección "categories",

56
00:02:29,660 --> 00:02:32,780
¿cuáles de estas consultas encontrará
todos los descendientes de la categoría

57
00:02:32,780 --> 00:02:34,230
"snorkeling"?

58
00:02:34,230 --> 00:02:36,570
Y ésta es la categoría
"snorkeling", justo aquí.

59
00:02:36,570 --> 00:02:37,820
¿Cuáles de estas consultas?

60
00:02:37,820 --> 00:02:38,670