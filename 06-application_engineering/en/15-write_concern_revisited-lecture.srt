1
00:00:00,000 --> 00:00:00,150

2
00:00:00,150 --> 00:00:02,540
Now that we understand how
replicate sets work, we can

3
00:00:02,540 --> 00:00:06,450
get back to discussing write
concern again, which we

4
00:00:06,450 --> 00:00:08,640
haven't talked about seriously
since we talked about the

5
00:00:08,640 --> 00:00:10,830
single mongod situation.

6
00:00:10,830 --> 00:00:16,079
So the W parameter determines
how many nodes you wait for

7
00:00:16,079 --> 00:00:18,640
before you move on when
you do an insert.

8
00:00:18,640 --> 00:00:20,190
And again, this is accomplished
by calling get

9
00:00:20,190 --> 00:00:22,950
last error by the drivers
with W set.

10
00:00:22,950 --> 00:00:27,270
So in the simple case where
you have three nodes which

11
00:00:27,270 --> 00:00:30,360
we've discussed, three nodes
in a replica set, sitting W

12
00:00:30,360 --> 00:00:35,360
equal to one, if this is the
primary, will just wait for

13
00:00:35,360 --> 00:00:37,500
the primary to acknowledge
the write.

14
00:00:37,500 --> 00:00:40,450
Setting it equal to two, will
wait for the primary and one

15
00:00:40,450 --> 00:00:42,500
other node to acknowledge
the write.

16
00:00:42,500 --> 00:00:45,420
Setting it equal to three, will
wait for all three to

17
00:00:45,420 --> 00:00:47,490
acknowledge the write.

18
00:00:47,490 --> 00:00:50,240
Setting journal equal to one
will wait for the primary to

19
00:00:50,240 --> 00:00:52,620
write it all the way to disk.

20
00:00:52,620 --> 00:00:55,485
Now, how long you wait
is called wtimeout.

21
00:00:55,485 --> 00:00:58,900
So how long are you willing to
wait for your writes to be

22
00:00:58,900 --> 00:01:01,020
acknowledged by the
secondaries?

23
00:01:01,020 --> 00:01:04,900
That's wtimeout which also can
be set in the drivers.

24
00:01:04,900 --> 00:01:07,140
Now these values, collectively,
are

25
00:01:07,140 --> 00:01:08,260
called write concern--

26
00:01:08,260 --> 00:01:09,870
W, J and wtimeout.

27
00:01:09,870 --> 00:01:11,500
And there's actually
three different

28
00:01:11,500 --> 00:01:13,160
places they can be set.

29
00:01:13,160 --> 00:01:16,520
One is that you can set them on
a connection, which is the

30
00:01:16,520 --> 00:01:18,160
way we've been showing them.

31
00:01:18,160 --> 00:01:21,280
You can also set them on a
collection inside the drivers.

32
00:01:21,280 --> 00:01:22,460
I don't think there's much
of a difference there.

33
00:01:22,460 --> 00:01:25,070
I think it's just the semantics
of the driver.

34
00:01:25,070 --> 00:01:26,250
I think either way it's
just the driver

35
00:01:26,250 --> 00:01:27,610
calling get last error.

36
00:01:27,610 --> 00:01:30,380
And the last thing is that when
you actually configure

37
00:01:30,380 --> 00:01:34,870
the replica set, in the
configuration itself you can

38
00:01:34,870 --> 00:01:36,730
set these values.

39
00:01:36,730 --> 00:01:40,200
You can set defaults so that
if no values come in, the

40
00:01:40,200 --> 00:01:42,300
replica set is always
handled this way.

41
00:01:42,300 --> 00:01:45,430
And I think from a system
administration standpoint,

42
00:01:45,430 --> 00:01:47,110
this is probably the
safest thing to do.

43
00:01:47,110 --> 00:01:50,340
Because that way the developers
aren't using a

44
00:01:50,340 --> 00:01:52,530
different default than you're
expecting to be using.

45
00:01:52,530 --> 00:01:56,110
But in any event, you can do
any of the three of them.

46
00:01:56,110 --> 00:01:58,950
There's a couple different other
ways to use W. First one

47
00:01:58,950 --> 00:02:01,730
is that you can say
W majority--

48
00:02:01,730 --> 00:02:02,700
very useful.

49
00:02:02,700 --> 00:02:05,800
And W majority is the one that
will wait for the majority of

50
00:02:05,800 --> 00:02:08,199
the nodes to replicate.

51
00:02:08,199 --> 00:02:12,050
Now, it turns out that W
majority, or W2 if there were

52
00:02:12,050 --> 00:02:17,020
three nodes, is also what you
need to avoid roll backs when

53
00:02:17,020 --> 00:02:19,760
you failover.

54
00:02:19,760 --> 00:02:23,180
If you can imagine if you're
writing to this primary and

55
00:02:23,180 --> 00:02:26,780
you're waiting for the writes
to go here to the secondary,

56
00:02:26,780 --> 00:02:31,210
then in this situation where
the primary steps down this

57
00:02:31,210 --> 00:02:32,480
guy has the writes.

58
00:02:32,480 --> 00:02:35,570
And I believe in that situation
he'll be elected as

59
00:02:35,570 --> 00:02:37,700
primary if he's the
furthest ahead.

60
00:02:37,700 --> 00:02:41,920
Not certain about that, so not
sure it avoids rollbacks in

61
00:02:41,920 --> 00:02:43,180
all those situations.

62
00:02:43,180 --> 00:02:46,890
But that's my understanding,
that W majority is enough to

63
00:02:46,890 --> 00:02:49,530
avoid the rollback case.

64
00:02:49,530 --> 00:02:54,220
It's also important to note that
J, which is wait for a

65
00:02:54,220 --> 00:02:57,945
commit to journal, you're only
waiting for it to commit to

66
00:02:57,945 --> 00:03:00,190
the journal on the
primary node.

67
00:03:00,190 --> 00:03:02,620
You're not waiting for it to
commit to journal on the

68
00:03:02,620 --> 00:03:04,240
secondary nodes.

69
00:03:04,240 --> 00:03:09,290
So there's no guarantee that
it's committed to the journal

70
00:03:09,290 --> 00:03:10,100
in the second node.

71
00:03:10,100 --> 00:03:13,175
So you can imagine some crazy
scenarios where the primary

72
00:03:13,175 --> 00:03:15,540
and the secondary are
both destroyed.

73
00:03:15,540 --> 00:03:17,980
Or maybe this one's destroyed
permanently and this one only

74
00:03:17,980 --> 00:03:18,730
temporarily.

75
00:03:18,730 --> 00:03:21,960
But because you only waited for
W majority and because it

76
00:03:21,960 --> 00:03:24,530
wasn't actually committed all
the way to disk that they

77
00:03:24,530 --> 00:03:28,530
happened simultaneously, then
you might lose that write.

78
00:03:28,530 --> 00:03:31,760
Anyway, so you could set W
majority, you can set W equal

79
00:03:31,760 --> 00:03:33,620
to a number which is the number
of nodes you want to

80
00:03:33,620 --> 00:03:35,350
wait for before you continue.

81
00:03:35,350 --> 00:03:38,470
And then there's also a way to
set W equal to a tag value.

82
00:03:38,470 --> 00:03:40,640
And I'll go into that just
a little bit about

83
00:03:40,640 --> 00:03:41,510
what that might do.

84
00:03:41,510 --> 00:03:45,180
You can label some of these
nodes with tags.

85
00:03:45,180 --> 00:03:47,990
So let's look at the program
that I want to show you.

86
00:03:47,990 --> 00:03:53,370
So this program is setting W
equal to three and if you

87
00:03:53,370 --> 00:03:56,520
recall, one of the nodes
has a delay on it.

88
00:03:56,520 --> 00:04:01,650
And so what should happen is
that it should be pretty slow

89
00:04:01,650 --> 00:04:05,240
to write that when it's waiting
for all three nodes.

90
00:04:05,240 --> 00:04:06,750
And I set a pretty
long time out--

91
00:04:06,750 --> 00:04:08,990
10,000 seconds on that,
and it's only going to

92
00:04:08,990 --> 00:04:09,800
have to wait five.

93
00:04:09,800 --> 00:04:12,060
So let's see what
happens there.

94
00:04:12,060 --> 00:04:19,300

95
00:04:19,300 --> 00:04:23,630
You can see that we're winding
up waiting a full five seconds

96
00:04:23,630 --> 00:04:25,420
between every single write.

97
00:04:25,420 --> 00:04:28,720
And the reason is that the W was
set to three, which means

98
00:04:28,720 --> 00:04:31,590
that all three nodes need to
acknowledge the write.

99
00:04:31,590 --> 00:04:36,740
And because one of the nodes is,
if you remember, running

100
00:04:36,740 --> 00:04:41,280
delayed, he doesn't get the
write for a full five seconds.

101
00:04:41,280 --> 00:04:44,280
You can see it right there.

102
00:04:44,280 --> 00:04:46,860
So one of these guys
is running delayed.

103
00:04:46,860 --> 00:04:48,100
Where is that shown?

104
00:04:48,100 --> 00:04:51,026
Oh, it might only be in
the configuration.

105
00:04:51,026 --> 00:04:52,230
Let's look at the conf--

106
00:04:52,230 --> 00:04:53,560
ah, there we go.

107
00:04:53,560 --> 00:04:57,330
Yes, so in the configuration
rs.conf, you can see that this

108
00:04:57,330 --> 00:05:00,500
one right here is on a
five seconds delay.

109
00:05:00,500 --> 00:05:05,510
Also, just so you know if you
use rs.help you can get a lot

110
00:05:05,510 --> 00:05:09,530
of nice little commands that
deal with replica sets inside

111
00:05:09,530 --> 00:05:11,920
the Mongo shell.

112
00:05:11,920 --> 00:05:14,360
And you can look in the
documentation for all these.

113
00:05:14,360 --> 00:05:17,900
You can Google them and
look on the docs.

114
00:05:17,900 --> 00:05:20,230
All right, so let's do a quiz.

115
00:05:20,230 --> 00:05:22,590
So the question is, if you set
W equal to one and J equal to

116
00:05:22,590 --> 00:05:26,420
one, is it possible to wind up
rolling back a committed write

117
00:05:26,420 --> 00:05:27,960
to the primary on failover.

118
00:05:27,960 --> 00:05:29,210
What's the answer?