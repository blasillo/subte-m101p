1
00:00:00,000 --> 00:00:00,120

2
00:00:00,120 --> 00:00:03,470
OK, let's go over the
implications of replication

3
00:00:03,470 --> 00:00:05,990
for application development.

4
00:00:05,990 --> 00:00:09,210
Now on one hand, the whole idea
of using replica sets is

5
00:00:09,210 --> 00:00:11,850
that they're very transparent
to the developer, and hence

6
00:00:11,850 --> 00:00:14,170
you don't really have to
understand that they're there.

7
00:00:14,170 --> 00:00:17,050
It's supposed to just create
greater availability and fault

8
00:00:17,050 --> 00:00:19,730
tolerance, and not
getting your way.

9
00:00:19,730 --> 00:00:21,260
But there's a few things
you need to remember.

10
00:00:21,260 --> 00:00:24,180
The first one is that
of course, there

11
00:00:24,180 --> 00:00:26,120
are these seed lists.

12
00:00:26,120 --> 00:00:28,500
So you need to remember that
when you're using the drivers,

13
00:00:28,500 --> 00:00:30,560
which are primarily responsible
for [INAUDIBLE]

14
00:00:30,560 --> 00:00:34,590
you to a new node during
failover, after a new primary

15
00:00:34,590 --> 00:00:37,960
is elected, drivers need to know
about at least one member

16
00:00:37,960 --> 00:00:39,080
of the replica set.

17
00:00:39,080 --> 00:00:41,850
So you need to understand
that a seed list exists.

18
00:00:41,850 --> 00:00:43,890
The second is that now that
we're in this distributed

19
00:00:43,890 --> 00:00:46,620
environment, you need to
understand this idea of write

20
00:00:46,620 --> 00:00:50,460
concern, and in particular, the
idea of waiting for some

21
00:00:50,460 --> 00:00:53,880
number of nodes to acknowledge
your writes through the w

22
00:00:53,880 --> 00:00:57,480
parameter, the j parameter,
which lets you wait or not

23
00:00:57,480 --> 00:01:00,700
wait for the primary node to
commit that write to disk.

24
00:01:00,700 --> 00:01:04,599
And also the w timeout
parameter, which is how long

25
00:01:04,599 --> 00:01:07,090
you're going to wait to see that
your write replicated to

26
00:01:07,090 --> 00:01:09,000
other members of the
replica set.

27
00:01:09,000 --> 00:01:13,160
So you have to keep that in
mind, because that is going to

28
00:01:13,160 --> 00:01:15,840
have an implication on the way
you write the applications,

29
00:01:15,840 --> 00:01:18,410
assuming that these defaults
haven't just been put into the

30
00:01:18,410 --> 00:01:20,260
replica set for you.

31
00:01:20,260 --> 00:01:22,800
All right, the next is that
now that there's multiple

32
00:01:22,800 --> 00:01:25,800
nodes for you to potentially
read from, you have to decide

33
00:01:25,800 --> 00:01:27,720
whether or not you want to read
from your primary, which

34
00:01:27,720 --> 00:01:30,530
is the default, most obvious,
and preferred thing to do, or

35
00:01:30,530 --> 00:01:33,310
whether you want to take your
reads from your secondaries.

36
00:01:33,310 --> 00:01:35,210
And if you're going to take your
read from your secondary,

37
00:01:35,210 --> 00:01:37,510
the application has to be
ready to use data that's

38
00:01:37,510 --> 00:01:40,070
potentially stale with respect
to what was written.

39
00:01:40,070 --> 00:01:43,070
And the final idea is that
even though replication

40
00:01:43,070 --> 00:01:47,200
exists, and that you have these
nodes in place to deal

41
00:01:47,200 --> 00:01:51,370
with errors and defaults, and
elect a new primary if needed,

42
00:01:51,370 --> 00:01:53,700
still, errors can
always happen.

43
00:01:53,700 --> 00:01:57,640
And these errors can happen
because of transient

44
00:01:57,640 --> 00:02:00,510
situations like failover
occurring, or they can happen

45
00:02:00,510 --> 00:02:02,760
because there are network
errors that occur.

46
00:02:02,760 --> 00:02:05,220
Or maybe there's actually errors
in terms of violating

47
00:02:05,220 --> 00:02:08,570
the unique key constraints,
or other syntactic things.

48
00:02:08,570 --> 00:02:11,520
And so generally speaking, to
create a robust application,

49
00:02:11,520 --> 00:02:14,470
you need to be checking for
exceptions when you read and

50
00:02:14,470 --> 00:02:17,600
write database to make sure
that if anything comes up,

51
00:02:17,600 --> 00:02:18,370
that you know it.

52
00:02:18,370 --> 00:02:20,910
So that you can make sure you
understand the application of

53
00:02:20,910 --> 00:02:24,040
what data has been committed,
and what data is durable in

54
00:02:24,040 --> 00:02:25,320
your application.

55
00:02:25,320 --> 00:02:27,470
OK, so let's do a short quiz.

56
00:02:27,470 --> 00:02:28,930
And here's the quiz.

57
00:02:28,930 --> 00:02:32,140
So if you sit w equals 4 in a
connection and there are only

58
00:02:32,140 --> 00:02:34,790
three nodes in the replica set,
how long will you wait in

59
00:02:34,790 --> 00:02:36,880
PyMongo for a response
for an insert if you

60
00:02:36,880 --> 00:02:38,220
don't set a time out?

61
00:02:38,220 --> 00:02:39,670
Don't set a w time out?

62
00:02:39,670 --> 00:02:42,310
And I know we haven't gone over
this explicitly, but I

63
00:02:42,310 --> 00:02:45,960
want you to guess what the
answer is based on the fact

64
00:02:45,960 --> 00:02:48,380
that the w timeout controls how
long you're going to wait

65
00:02:48,380 --> 00:02:50,890
for these commits, and there's
only three nodes, and you've

66
00:02:50,890 --> 00:02:52,370
set w equal to four.

67
00:02:52,370 --> 00:02:55,260
How long do you think it'll take
for you to come back and

68
00:02:55,260 --> 00:02:56,260
get some sort of error?

69
00:02:56,260 --> 00:02:58,940
Obviously it's not going to over
commit to four nodes if

70
00:02:58,940 --> 00:03:00,770
there's only three nodes
in the replica set.

71
00:03:00,770 --> 00:03:02,050
So check off the answer.

72
00:03:02,050 --> 00:03:03,300