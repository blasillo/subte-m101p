1
00:00:00,000 --> 00:00:00,190

2
00:00:00,190 --> 00:00:03,040
So as we talked about before,
the default within the drivers

3
00:00:03,040 --> 00:00:07,200
is that you're going to read
from the same node that you do

4
00:00:07,200 --> 00:00:08,680
your writes from.

5
00:00:08,680 --> 00:00:11,150
So if this is your primary and
you're writing here, and this

6
00:00:11,150 --> 00:00:13,230
is the replica set, and there
are five of them, you're going

7
00:00:13,230 --> 00:00:14,570
to read from the same node.

8
00:00:14,570 --> 00:00:19,010
But you can override that by
specifying a read preference.

9
00:00:19,010 --> 00:00:21,370
And the read preference says
that you, let's say might want

10
00:00:21,370 --> 00:00:22,640
to read from the secondaries.

11
00:00:22,640 --> 00:00:25,020
Now, there are several standard
read preferences that

12
00:00:25,020 --> 00:00:27,610
are typically set inside
the drivers.

13
00:00:27,610 --> 00:00:29,890
PyMongo's got four
different ones.

14
00:00:29,890 --> 00:00:32,850
The first one is that
you'd like to always

15
00:00:32,850 --> 00:00:33,940
read from the primary.

16
00:00:33,940 --> 00:00:35,640
And that means pretty obviously
that you want to

17
00:00:35,640 --> 00:00:39,310
read what you wrote, and that
it has to go to the primary.

18
00:00:39,310 --> 00:00:42,100
You could say you always want
to read from the secondary,

19
00:00:42,100 --> 00:00:44,480
which means that if there's no
secondary available, that you

20
00:00:44,480 --> 00:00:46,850
actually wouldn't be
able to do reads.

21
00:00:46,850 --> 00:00:49,830
You could say that you prefer
the secondary, but you'll take

22
00:00:49,830 --> 00:00:52,170
a primary if there's
no secondary.

23
00:00:52,170 --> 00:00:55,260
And you can say you'd prefer
primary, but that if there's

24
00:00:55,260 --> 00:00:57,585
no primary available, you'll
take a secondary.

25
00:00:57,585 --> 00:00:59,590
There's also several different
other things that we're not

26
00:00:59,590 --> 00:01:00,390
going to go into too much.

27
00:01:00,390 --> 00:01:03,580
One is that you can say I want
the nearest, and the drivers

28
00:01:03,580 --> 00:01:05,850
have a notion of what the
nearest is by keeping, they

29
00:01:05,850 --> 00:01:08,670
periodically ping mongod's and
they know how far they are

30
00:01:08,670 --> 00:01:09,940
away from each one of them.

31
00:01:09,940 --> 00:01:11,800
So you can say I want
the nearest.

32
00:01:11,800 --> 00:01:15,510
And there's also some
concepts of tagging.

33
00:01:15,510 --> 00:01:19,180
You can assign tags to each of
these, the hosts inside the

34
00:01:19,180 --> 00:01:20,190
replica set.

35
00:01:20,190 --> 00:01:23,120
And then you could say, oh,
I want my reads to go to a

36
00:01:23,120 --> 00:01:25,400
particular set of
tagged hosts.

37
00:01:25,400 --> 00:01:29,020
So this could be good for, let's
say if the primary is

38
00:01:29,020 --> 00:01:32,060
in, let's say California, but
you've got replicas all over

39
00:01:32,060 --> 00:01:35,750
the United States, and you want
to always read from one

40
00:01:35,750 --> 00:01:37,120
that's close by, you could
say, you know what?

41
00:01:37,120 --> 00:01:39,680
I want to read from the New
York data center because I

42
00:01:39,680 --> 00:01:41,770
know this user has his
data near New York.

43
00:01:41,770 --> 00:01:44,230
Now, that's assuming that you're
OK with the idea that

44
00:01:44,230 --> 00:01:46,030
data might be slightly
out of date.

45
00:01:46,030 --> 00:01:49,790
So you could imagine in a
situation where it's a social

46
00:01:49,790 --> 00:01:51,660
networking system,
and it's a wall.

47
00:01:51,660 --> 00:01:55,900
And you don't really care if I
see an update on my wall, as

48
00:01:55,900 --> 00:01:57,570
long as I see them eventually.

49
00:01:57,570 --> 00:02:00,800
Then you could imagine doing
a read that's closer to me

50
00:02:00,800 --> 00:02:02,310
geographically.

51
00:02:02,310 --> 00:02:05,430
So you look inside the driver
to understand where these

52
00:02:05,430 --> 00:02:08,940
different options, I'll
show them to you here.

53
00:02:08,940 --> 00:02:11,410
So this is the PyMongo pages.

54
00:02:11,410 --> 00:02:14,410
You can see that the choices
only exists if you use the

55
00:02:14,410 --> 00:02:16,100
MongoReplicaSetClient,
which is the

56
00:02:16,100 --> 00:02:17,910
alternative connection class.

57
00:02:17,910 --> 00:02:21,090
And if you do that, then you
can set a bunch of read

58
00:02:21,090 --> 00:02:23,530
preferences at the
database level.

59
00:02:23,530 --> 00:02:27,000
And here they are numerated
inside the driver.

60
00:02:27,000 --> 00:02:30,100
And you just need to look inside
the driver for your

61
00:02:30,100 --> 00:02:32,220
particular language to
understand how to get to the

62
00:02:32,220 --> 00:02:33,670
different read preferences.

63
00:02:33,670 --> 00:02:36,410
Again, it's primary, primary
preferred, secondary,

64
00:02:36,410 --> 00:02:39,190
secondary preferred,
and nearest.

65
00:02:39,190 --> 00:02:41,180
And as I said, there's
also a way to do

66
00:02:41,180 --> 00:02:42,710
some stuff with tags.

67
00:02:42,710 --> 00:02:44,930
So I'm not going to go
into it right now.

68
00:02:44,930 --> 00:02:48,510
Now, one thought is that a lot
of folks automatically assume

69
00:02:48,510 --> 00:02:50,580
that reading from the secondary
scales their

70
00:02:50,580 --> 00:02:53,490
performance of reads, but
it doesn't always work

71
00:02:53,490 --> 00:02:54,420
out all that well.

72
00:02:54,420 --> 00:02:56,510
And in fact, that's the
subject of our quiz.

73
00:02:56,510 --> 00:02:58,020
And so I'll ask you to think
about that, and then we'll

74
00:02:58,020 --> 00:02:59,320
talk about it.

75
00:02:59,320 --> 00:03:00,680
So let's go to the quiz.

76
00:03:00,680 --> 00:03:02,450
All right, so here's the quiz.

77
00:03:02,450 --> 00:03:04,610
So you can configure your
application via the driver to

78
00:03:04,610 --> 00:03:06,920
read from secondary nodes
in the replica set.

79
00:03:06,920 --> 00:03:09,140
What are the reasons that you
might not want to do that?

80
00:03:09,140 --> 00:03:11,010
Check all that apply.

81
00:03:11,010 --> 00:03:12,870
And I'll go through the
reasons with you.

82
00:03:12,870 --> 00:03:14,910
So if your write traffic is
significantly greater than

83
00:03:14,910 --> 00:03:17,200
your read traffic, you may
overwhelm the secondary, which

84
00:03:17,200 --> 00:03:19,760
must process all the rights,
as well as the reads.

85
00:03:19,760 --> 00:03:22,060
Replication lag can result.

86
00:03:22,060 --> 00:03:24,830
You may not read what you
previously wrote to MongoDB if

87
00:03:24,830 --> 00:03:25,890
you read from the secondaries.

88
00:03:25,890 --> 00:03:28,770
If a secondary hardware has
insufficient memory to keep

89
00:03:28,770 --> 00:03:31,640
the read working set memory,
direct reads to it

90
00:03:31,640 --> 00:03:33,040
will likely slow down.

91
00:03:33,040 --> 00:03:35,770
Directing reads to it will
likely slow it down.

92
00:03:35,770 --> 00:03:37,720
And then finally, reading from
secondaries prevents it from

93
00:03:37,720 --> 00:03:39,160
being promoted to a primary.

94
00:03:39,160 --> 00:03:41,620
So check all that apply, and
then we'll discuss the answer.

95
00:03:41,620 --> 00:03:42,870