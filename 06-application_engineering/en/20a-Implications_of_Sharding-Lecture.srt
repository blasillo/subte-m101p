1
00:00:00,000 --> 00:00:00,120

2
00:00:00,120 --> 00:00:02,500
The whole idea of sharding is
that you don't need to think

3
00:00:02,500 --> 00:00:05,400
about it as a developer, in
terms of the collection being

4
00:00:05,400 --> 00:00:07,640
horizontally split amongst
the different nodes.

5
00:00:07,640 --> 00:00:10,150
But the reality is, there are
some things you need to

6
00:00:10,150 --> 00:00:13,070
remember once you're in
a sharded environment.

7
00:00:13,070 --> 00:00:17,810
So the first is that every
document needs to include the

8
00:00:17,810 --> 00:00:19,100
shard key now.

9
00:00:19,100 --> 00:00:21,240
The second is that the shard
key is immutable.

10
00:00:21,240 --> 00:00:24,560
OK, so once you've set the shard
key inside a document,

11
00:00:24,560 --> 00:00:25,800
you can't change it.

12
00:00:25,800 --> 00:00:28,770
So you have to be thoughtful
about where you set it up.

13
00:00:28,770 --> 00:00:31,650
The next is that you need
an index that starts

14
00:00:31,650 --> 00:00:32,940
with the shard key.

15
00:00:32,940 --> 00:00:39,290
So what this means is that if
the shard key is Student ID,

16
00:00:39,290 --> 00:00:41,800
then the index could be student
ID comma class, and

17
00:00:41,800 --> 00:00:42,660
that would be fine.

18
00:00:42,660 --> 00:00:45,064
That would satisfy the criteria
that there needs to

19
00:00:45,064 --> 00:00:47,130
be an index on the shard key.

20
00:00:47,130 --> 00:00:49,870
The index that satisfies
this requirement can't

21
00:00:49,870 --> 00:00:51,410
be a multi key index.

22
00:00:51,410 --> 00:00:53,830
So if it's a multi key index
then you'd need to have a

23
00:00:53,830 --> 00:00:56,260
separate index on the shard key,
or that starts with the

24
00:00:56,260 --> 00:00:59,010
shard key in order to satisfy
that requirement.

25
00:00:59,010 --> 00:01:01,760
When do an update, you have to
specify the shard key or

26
00:01:01,760 --> 00:01:03,410
specify that multi is true.

27
00:01:03,410 --> 00:01:06,640
So shard key has to be
specified or multi.

28
00:01:06,640 --> 00:01:09,680
And, by the way, if you do do
multi, or don't specify the

29
00:01:09,680 --> 00:01:11,740
shard key in the update when you
do multi, then it's going

30
00:01:11,740 --> 00:01:14,090
to send out to all
of the nodes.

31
00:01:14,090 --> 00:01:18,570
And, just generally speaking,
whenever you send a query that

32
00:01:18,570 --> 00:01:20,630
doesn't include the shard key,
it's going to send it across

33
00:01:20,630 --> 00:01:21,440
all the nodes.

34
00:01:21,440 --> 00:01:26,120
So no shard key means scatter
gather operation, which could

35
00:01:26,120 --> 00:01:27,270
be expensive.

36
00:01:27,270 --> 00:01:30,120
So you have to think about it
when you're creating the shard

37
00:01:30,120 --> 00:01:33,040
key and you're sharding the
collection, what is a key that

38
00:01:33,040 --> 00:01:35,630
I'm probably going to
use in most queries?

39
00:01:35,630 --> 00:01:37,160
Because that's the key that
I'd really want to

40
00:01:37,160 --> 00:01:38,600
have in my shard key.

41
00:01:38,600 --> 00:01:40,810
So here's some of the
considerations of sharding on

42
00:01:40,810 --> 00:01:43,090
development that you need
to think about.

43
00:01:43,090 --> 00:01:46,770
Another one, which is maybe not
obvious, is that you can't

44
00:01:46,770 --> 00:01:53,670
have a unique key, no unique
index, unless it's also part

45
00:01:53,670 --> 00:01:54,920
of the shard key.

46
00:01:54,920 --> 00:01:57,670

47
00:01:57,670 --> 00:01:59,650
And the reason is that--

48
00:01:59,650 --> 00:02:01,840
or starts with the shard
key, I should say.

49
00:02:01,840 --> 00:02:04,615
So if the shard key is student
ID comma class, then you could

50
00:02:04,615 --> 00:02:07,100
have a unique index on student
ID comma class comma something

51
00:02:07,100 --> 00:02:09,880
else, which means that basically
its unique on

52
00:02:09,880 --> 00:02:10,820
student ID comma class.

53
00:02:10,820 --> 00:02:14,100
And the reason for this
requirement is that there's no

54
00:02:14,100 --> 00:02:18,020
way for it to enforce the
uniqueness of any index that

55
00:02:18,020 --> 00:02:20,010
doesn't include the shard key
because it doesn't know

56
00:02:20,010 --> 00:02:23,710
whether or not the copies exist
on different shards.

57
00:02:23,710 --> 00:02:26,970
Because the indexes are actually
on each shard.

58
00:02:26,970 --> 00:02:29,410
And so there's no collective
way for the database know

59
00:02:29,410 --> 00:02:32,890
whether that uniqueness would
be satisfied or not.

60
00:02:32,890 --> 00:02:34,570
All right, so these are some
of the implications of

61
00:02:34,570 --> 00:02:37,120
sharding as a developer.

62
00:02:37,120 --> 00:02:39,632
And you need to keep them in
mind as you write queries in a

63
00:02:39,632 --> 00:02:40,400
sharded environment.

64
00:02:40,400 --> 00:02:41,620
Time for a quiz.

65
00:02:41,620 --> 00:02:44,140
Suppose you want to shard the
zip code collection after

66
00:02:44,140 --> 00:02:45,170
importing it.

67
00:02:45,170 --> 00:02:47,420
You want to shard on the
zip code itself.

68
00:02:47,420 --> 00:02:50,065
What index would be required
to allow MongoDB to sort on

69
00:02:50,065 --> 00:02:50,820
the zip code?

70
00:02:50,820 --> 00:02:54,180
So, an index on zip code or
a non-multi-key index that

71
00:02:54,180 --> 00:02:57,580
starts with zip, no index is
required to use a zip as a

72
00:02:57,580 --> 00:03:00,240
shard key, a unique index on
the zip code, or any index

73
00:03:00,240 --> 00:03:01,820
that includes the zip code.

74
00:03:01,820 --> 00:03:03,220
And what do you think
the answer is there?

75
00:03:03,220 --> 00:03:04,470