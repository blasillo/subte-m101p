1
00:00:00,000 --> 00:00:00,260

2
00:00:00,260 --> 00:00:03,800
"Sharding" y replicación casi
siempre se hacen en conjunto.

3
00:00:03,800 --> 00:00:06,400
Así que cuando tengas un
ambiente con "shards"--y

4
00:00:06,400 --> 00:00:11,510
aquí te estoy mostrando tres
"shards", "s0", "s1", "s2" y

5
00:00:11,510 --> 00:00:12,430
un mongos como router--

6
00:00:12,430 --> 00:00:14,890
los "shards" mismos son
conjuntos de réplicas.

7
00:00:14,890 --> 00:00:16,250
Y son conjuntos de
réplicas porque sino,

8
00:00:16,250 --> 00:00:17,840
no serían confiables.

9
00:00:17,840 --> 00:00:20,360
Así que cuando estés
lidiando con un ambiente

10
00:00:20,360 --> 00:00:22,810
con "shards", las mejores
prácticas te dicen que

11
00:00:22,810 --> 00:00:24,790
ésta es la manera en
que lo configurarías.

12
00:00:24,790 --> 00:00:28,180
La siguiente cosa que quiero
resaltar es que el mongos está

13
00:00:28,180 --> 00:00:30,300
haciendo lo que el driver
estaba haciendo antes en el

14
00:00:30,300 --> 00:00:34,130
sentido que está reconectando a los
miembros del conjunto de réplicas.

15
00:00:34,130 --> 00:00:36,160
Porque el mongos probablemente
tiene una conexión con los

16
00:00:36,160 --> 00:00:40,300
nodos primarios del conjunto
de réplicas en cada uno

17
00:00:40,300 --> 00:00:43,950
de estos "shards" y posiblemente
conexiones a los secundarios

18
00:00:43,950 --> 00:00:46,750
si es que está permitiendo
lecturas de los secundarios.

19
00:00:46,750 --> 00:00:50,190
Así que cuando hay una conmutación
por error dentro de un "shard", es

20
00:00:50,190 --> 00:00:52,350
el mongos quien va
a reconectar todo.

21
00:00:52,350 --> 00:00:55,340
Así que el mongos tiene
noción de la lista

22
00:00:55,340 --> 00:00:58,030
de semillas y sabe cuáles de
estos nodos son parte de ella.

23
00:00:58,030 --> 00:01:00,980
Lo siguiente es que deberías
tener en cuenta que todavía

24
00:01:00,980 --> 00:01:03,900
están presentes la concernencia
de escritura y el valor "j" y el

25
00:01:03,900 --> 00:01:07,470
valor "w", y el tiempo de
expiración "w". Todos éstos

26
00:01:07,470 --> 00:01:09,010
van a ser procesados.

27
00:01:09,010 --> 00:01:12,890
Así que si tu aplicación
especifica que requiere

28
00:01:12,890 --> 00:01:17,030
"journaling" "true", digamos,
o la mayoría "w", que una mayoría

29
00:01:17,030 --> 00:01:20,310
de nodos tiene que ver la escritura
antes de que se complete, entonces

30
00:01:20,310 --> 00:01:23,030
tu aplicación va a especificar
eso en el driver, o dentro de

31
00:01:23,030 --> 00:01:24,355
tu aplicación, o al lado

32
00:01:24,355 --> 00:01:26,540
de los drivers de tu aplicación,

33
00:01:26,540 --> 00:01:28,360
y eso va a ir al mongos.

34
00:01:28,360 --> 00:01:30,830
El mongos va a enrutar la
consulta al "shard" apropiado

35
00:01:30,830 --> 00:01:34,700
en el conjunto de réplicas y
luego esa "j" y esa concernencia

36
00:01:34,700 --> 00:01:38,100
de escritura van a ser reflejadas
en la escritura final.

37
00:01:38,100 --> 00:01:40,720
Así que deberías continuar
pensando en tener que especificar

38
00:01:40,720 --> 00:01:43,600
éstas, en el sentido que
es un ambiente replicado

39
00:01:43,600 --> 00:01:45,310
y aún son importantes

40
00:01:45,310 --> 00:01:49,280
y van a aplicar a cada
uno de los nodos.

41
00:01:49,280 --> 00:01:51,280
Ahora, si recibes un
"multi-update", va a

42
00:01:51,280 --> 00:01:54,800
múltiples nodos y en cada
nodo, si dijiste que el valor

43
00:01:54,800 --> 00:01:59,600
"w" sea, digamos 2 y
"j" 1, entonces este

44
00:01:59,600 --> 00:02:01,900
mongos no recibirá una

45
00:02:01,900 --> 00:02:03,640
confirmación de esa escritura.

46
00:02:03,640 --> 00:02:06,720
No la completaría hasta que
todos los nodos diferentes

47
00:02:06,720 --> 00:02:09,180
completen la escritura en
la mayoría de ellos y luego

48
00:02:09,180 --> 00:02:11,290
entre al "journal" del
nodo primario de cada uno

49
00:02:11,290 --> 00:02:13,000
de los conjuntos de réplicas.

50
00:02:13,000 --> 00:02:15,930
Ésas son cosas que deberías
tener en mente mientras que

51
00:02:15,930 --> 00:02:16,940
trabajas en este ambiente.

52
00:02:16,940 --> 00:02:19,190
Y el punto final es que
usualmente mongos es

53
00:02:19,190 --> 00:02:21,770
también un conjunto de réplicas,
así que probablemente hay algunos

54
00:02:21,770 --> 00:02:22,810
de éstos por aquí.

55
00:02:22,810 --> 00:02:26,010
Típicamente los ejecutas en
la misma máquina que contiene

56
00:02:26,010 --> 00:02:28,720
la aplicación, porque
son bien ligeros.

57
00:02:28,720 --> 00:02:32,190
Y el driver es sólo la manera
en que pueden tomar múltiples

58
00:02:32,190 --> 00:02:34,150
nombres de hosts para un
conjunto de réplicas.

59
00:02:34,150 --> 00:02:35,740
Pueden tomar múltiples mongos.

60
00:02:35,740 --> 00:02:39,280
Y si no pueden, por alguna
razón, adjuntarse a un mongos

61
00:02:39,280 --> 00:02:42,580
o conectarse a un mongos,
entonces se van a conectarse

62
00:02:42,580 --> 00:02:46,300
a otro mongos y los drivers
de Python tienen clases

63
00:02:46,300 --> 00:02:48,010
sólo para lidiar con ambientes
con "shards", y las puedes ver

64
00:02:48,010 --> 00:02:49,790
dentro de la documentación
de los drivers.

65
00:02:49,790 --> 00:02:52,730
Eso es lo que quería señalarte
sobre "shard" y replicación

66
00:02:52,730 --> 00:02:53,970
en conjunto.

67
00:02:53,970 --> 00:02:56,680
Tienes estos conjuntos de
réplicas y tienes estos

68
00:02:56,680 --> 00:02:59,250
mongos enfrente y todo lo
que has aprendido antes

69
00:02:59,250 --> 00:03:03,350
sobre disponibilidad y
replicación aún aplica,

70
00:03:03,350 --> 00:03:06,270
simplemente pasa a través
de los varios "shards".

71
00:03:06,270 --> 00:03:08,090
Muy bien. Hagamos un cuestionario.

72
00:03:08,090 --> 00:03:11,740
Supón que quieres ejecutar
múltiples routers mongos

73
00:03:11,740 --> 00:03:12,340
para tener redundancia.

74
00:03:12,340 --> 00:03:15,400
¿Qué nivel de la pila te va
a asegurar que puedas hacer

75
00:03:15,400 --> 00:03:17,810
conmutación por error a otro
mongos desde tu aplicación?

76
00:03:17,810 --> 00:03:21,260
¿Es el mongod, el mongos, los
drivers, o los servidores

77
00:03:21,260 --> 00:03:22,510
"config" del "sharding"?

78
00:03:22,510 --> 00:03:23,240