1
00:00:00,000 --> 00:00:00,120

2
00:00:00,120 --> 00:00:02,950
One thing I want to make clear
is that indexing is not

3
00:00:02,950 --> 00:00:07,320
restricted to the first level
of keys within a document.

4
00:00:07,320 --> 00:00:11,210
So, for example, I've got this
people collection right here,

5
00:00:11,210 --> 00:00:13,760
and [INAUDIBLE] printed
out the contents.

6
00:00:13,760 --> 00:00:18,270
It has a couple of small
documents plus this larger

7
00:00:18,270 --> 00:00:22,800
document down here that has Tim
Johnson and his addresses,

8
00:00:22,800 --> 00:00:25,450
which is an array of addresses,
right here.

9
00:00:25,450 --> 00:00:30,000
And then in the array of
addresses, there's a tag for

10
00:00:30,000 --> 00:00:33,520
what type of address it
is, as well as an

11
00:00:33,520 --> 00:00:35,060
array of phone numbers.

12
00:00:35,060 --> 00:00:37,080
And these are just place
holders, so the numbers one

13
00:00:37,080 --> 00:00:39,080
through five, it's an array.

14
00:00:39,080 --> 00:00:43,590
So, we can actually put an index
on these subparts, these

15
00:00:43,590 --> 00:00:45,120
subarrays, of the document.

16
00:00:45,120 --> 00:00:47,390
So, let me show you what
that looks like.

17
00:00:47,390 --> 00:00:51,250
If you wanted to put in an index
on the address key and

18
00:00:51,250 --> 00:00:53,290
then there's an array underneath
there, and then the

19
00:00:53,290 --> 00:00:56,390
tag in that array you could
do it this way.

20
00:00:56,390 --> 00:01:00,750
And if you wanted to add
one to the phones, you

21
00:01:00,750 --> 00:01:02,350
could do it that way.

22
00:01:02,350 --> 00:01:06,360
And now, if we look at get
index, you'll see there are

23
00:01:06,360 --> 00:01:13,000
these multi key indexes on the
phone's key over here, and the

24
00:01:13,000 --> 00:01:14,600
tag key over here.

25
00:01:14,600 --> 00:01:17,795
So, that's pretty useful if
you're looking to create a

26
00:01:17,795 --> 00:01:19,450
rich document.

27
00:01:19,450 --> 00:01:24,450
And the way it works is Mongo
D will add an index element,

28
00:01:24,450 --> 00:01:28,520
or index point, if you will, for
every item in the array,

29
00:01:28,520 --> 00:01:31,940
and if you change those items
then it would have to change

30
00:01:31,940 --> 00:01:34,780
the pointer in those indexes.

31
00:01:34,780 --> 00:01:37,000
But you don't think much about
it, you just can add the index

32
00:01:37,000 --> 00:01:40,000
in whatever subpart you want and
it will just sort of work

33
00:01:40,000 --> 00:01:41,250
the way you might expect.

34
00:01:41,250 --> 00:01:42,290