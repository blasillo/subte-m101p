1
00:00:00,000 --> 00:00:00,317

2
00:00:00,317 --> 00:00:01,900
Let's talk about
another type of index

3
00:00:01,900 --> 00:00:04,250
that can be very useful
when dealing with text.

4
00:00:04,250 --> 00:00:06,630
It's called a full
text search index.

5
00:00:06,630 --> 00:00:09,160
So why would you use it and
what would you use it for?

6
00:00:09,160 --> 00:00:11,750
Well, let's say you had a
very large piece of text

7
00:00:11,750 --> 00:00:13,980
that was in a document,
something like the US

8
00:00:13,980 --> 00:00:16,900
Constitution, which starts out,
"We, the people of the United

9
00:00:16,900 --> 00:00:19,920
States, in order to form
a more perfect union."

10
00:00:19,920 --> 00:00:23,100
Let's say you had that
document right here in a key

11
00:00:23,100 --> 00:00:26,660
called My Text and you had
the entire preamble to the US

12
00:00:26,660 --> 00:00:29,050
Constitution in
this key, My Text,

13
00:00:29,050 --> 00:00:30,840
and you wanted to search it.

14
00:00:30,840 --> 00:00:34,000
Well, if you searched
just on any given word,

15
00:00:34,000 --> 00:00:36,866
then you wouldn't get
anything back because MongoDB,

16
00:00:36,866 --> 00:00:38,740
when you search on
strings, the entire string

17
00:00:38,740 --> 00:00:39,852
needs to be there.

18
00:00:39,852 --> 00:00:42,060
So as an alternative, you
could put every single word

19
00:00:42,060 --> 00:00:46,700
into an array and then use the
set notation operators to push

20
00:00:46,700 --> 00:00:49,120
things into it and then
search for whether or not

21
00:00:49,120 --> 00:00:51,752
the words are included,
but that's pretty tedious

22
00:00:51,752 --> 00:00:54,210
and there are certain other
features that would be missing.

23
00:00:54,210 --> 00:00:57,820
So instead, what we have is
something called a full text

24
00:00:57,820 --> 00:01:01,050
search index, which is
abbreviated text, which

25
00:01:01,050 --> 00:01:04,260
will index this entire document
and every word much in the way

26
00:01:04,260 --> 00:01:08,320
an array is indexed to allow
you to do queries into the text,

27
00:01:08,320 --> 00:01:10,470
basically applying
the OR operator

28
00:01:10,470 --> 00:01:13,780
and looking for one
of several words.

29
00:01:13,780 --> 00:01:16,110
So let's go look at
now a specific case

30
00:01:16,110 --> 00:01:18,400
and see how it would work.

31
00:01:18,400 --> 00:01:20,300
We've created a collection
called sentences,

32
00:01:20,300 --> 00:01:21,990
and this collection
has got a bunch

33
00:01:21,990 --> 00:01:28,420
of mostly just randomly
inserted words into a words key.

34
00:01:28,420 --> 00:01:30,650
There is no text search
index on this right now.

35
00:01:30,650 --> 00:01:32,490
This is a regular collection.

36
00:01:32,490 --> 00:01:35,540
If I wanted to search for,
let's say, "dog shrub ruby,"

37
00:01:35,540 --> 00:01:38,180
I could do it.

38
00:01:38,180 --> 00:01:39,360
There we go.

39
00:01:39,360 --> 00:01:41,250
So I searched for
"dog shrub ruby"

40
00:01:41,250 --> 00:01:44,620
and I found this document with
the words "dog, shrub, ruby,"

41
00:01:44,620 --> 00:01:45,900
but it's very particular.

42
00:01:45,900 --> 00:01:48,780
If I leave off the period,
it doesn't find it.

43
00:01:48,780 --> 00:01:52,240
If I just do "dog
ruby," doesn't find it,

44
00:01:52,240 --> 00:01:55,170
and if I just do "dog,"
it doesn't find it.

45
00:01:55,170 --> 00:01:58,050
That's not going to work
too well for me to search

46
00:01:58,050 --> 00:02:00,310
on these different words.

47
00:02:00,310 --> 00:02:05,960
So now let's add a text index,
db.sentences.ensureIndex,

48
00:02:05,960 --> 00:02:11,020
and now I want to put an
index on words of type text.

49
00:02:11,020 --> 00:02:11,910
There we go.

50
00:02:11,910 --> 00:02:15,500
And now when I search it,
"dog shrub ruby," it's

51
00:02:15,500 --> 00:02:18,560
going to work a lot
better, so let's do that.

52
00:02:18,560 --> 00:02:21,350
Let's first look at the syntax
for searching a full text

53
00:02:21,350 --> 00:02:22,110
index.

54
00:02:22,110 --> 00:02:24,670
The way it works is
I have to say $text

55
00:02:24,670 --> 00:02:28,470
and then give a
document with $search

56
00:02:28,470 --> 00:02:30,880
and then what I'm looking for.

57
00:02:30,880 --> 00:02:33,680
So we saw that, for instance,
"dog" did not work before.

58
00:02:33,680 --> 00:02:36,950
Let's just look for "dog"
now and see if that works.

59
00:02:36,950 --> 00:02:38,220
There we go.

60
00:02:38,220 --> 00:02:40,090
So now I searched for
just the word "dog"

61
00:02:40,090 --> 00:02:42,700
and I was able to get all
of these back that have "dog

62
00:02:42,700 --> 00:02:44,550
moss ruby," "dog shrub ruby."

63
00:02:44,550 --> 00:02:46,870
And then just to show
you again, when I just

64
00:02:46,870 --> 00:02:50,280
search for "dog" using a
regular search of words,

65
00:02:50,280 --> 00:02:54,547
I don't get anything, but if
I search using a text index,

66
00:02:54,547 --> 00:02:56,380
I'm going to show you
the syntax right here.

67
00:02:56,380 --> 00:03:00,090
I search using a text index
by specifying $text and then

68
00:03:00,090 --> 00:03:03,370
$search and then what
I'm looking for, "dog,"

69
00:03:03,370 --> 00:03:04,372
I do get documents back.

70
00:03:04,372 --> 00:03:06,330
I get all these documents
back because they all

71
00:03:06,330 --> 00:03:07,520
have "dog" in them.

72
00:03:07,520 --> 00:03:13,200
And if I also say "moss," I
get all of these back as well,

73
00:03:13,200 --> 00:03:16,270
and if I say "moss ruby," I'm
going to get all these back,

74
00:03:16,270 --> 00:03:18,320
and it's quite flexible.

75
00:03:18,320 --> 00:03:20,990
Putting in a period
makes no difference.

76
00:03:20,990 --> 00:03:23,690
Capitalization
makes no difference.

77
00:03:23,690 --> 00:03:26,850
It's going to also ignore
certain stop words that are not

78
00:03:26,850 --> 00:03:29,300
considered to be significant
like "a" and "the"

79
00:03:29,300 --> 00:03:30,690
in the English language.

80
00:03:30,690 --> 00:03:32,670
So that's really
very useful if I

81
00:03:32,670 --> 00:03:34,910
want to search for a
bunch of different words

82
00:03:34,910 --> 00:03:38,107
and essentially apply
a logical OR operator.

83
00:03:38,107 --> 00:03:40,190
Now, there's one other
thing I wanted to show you,

84
00:03:40,190 --> 00:03:42,360
which is how you
can get back these

85
00:03:42,360 --> 00:03:45,810
in an order that indicates how
good a match MongoDB believes

86
00:03:45,810 --> 00:03:46,790
there is.

87
00:03:46,790 --> 00:03:48,720
So let's look for one of these.

88
00:03:48,720 --> 00:03:51,950
I'm going to show you
the syntax for this.

89
00:03:51,950 --> 00:03:55,830
So let's look for
"dog tree obsidian."

90
00:03:55,830 --> 00:03:56,790
Dog tree obsidian.

91
00:03:56,790 --> 00:03:59,050
Let me go back and change this.

92
00:03:59,050 --> 00:04:02,000
We can see the document right up
there with "dog tree obsidian."

93
00:04:02,000 --> 00:04:03,850
The best match for
"dog tree obsidian"

94
00:04:03,850 --> 00:04:05,677
should be the dog tree
obsidian document,

95
00:04:05,677 --> 00:04:07,510
but we're going to do
something special now.

96
00:04:07,510 --> 00:04:10,230
We're going to
project a Score field,

97
00:04:10,230 --> 00:04:12,730
and we're going to use
a special $meta operator

98
00:04:12,730 --> 00:04:14,415
and then take the
text score, which

99
00:04:14,415 --> 00:04:16,290
is something that's
internally computed as it

100
00:04:16,290 --> 00:04:18,029
runs through this text search.

101
00:04:18,029 --> 00:04:19,890
We're going to get
that text score out

102
00:04:19,890 --> 00:04:22,261
and then we're going to
sort by that text score.

103
00:04:22,261 --> 00:04:24,010
We're not going to
test you on this syntax

104
00:04:24,010 --> 00:04:26,510
but I want you to know it
exists if you ever need it.

105
00:04:26,510 --> 00:04:29,210
If you do that, you'll
see that now, it's

106
00:04:29,210 --> 00:04:33,390
ranking the documents in
order of their text score

107
00:04:33,390 --> 00:04:36,150
and that, if you're
searching for "dog tree

108
00:04:36,150 --> 00:04:39,670
obsidian," the one with the
highest score, a score of two,

109
00:04:39,670 --> 00:04:41,890
is the document with "dog
tree obsidian," all three

110
00:04:41,890 --> 00:04:45,180
words in it, very
useful if you want

111
00:04:45,180 --> 00:04:47,970
to find the best
match for, let's say,

112
00:04:47,970 --> 00:04:51,070
a document that
contains all the words.

113
00:04:51,070 --> 00:04:54,010
So now it's time for a quiz.

114
00:04:54,010 --> 00:04:56,230
Let's say you create a
text index on the title

115
00:04:56,230 --> 00:04:58,480
field of the movies collection.

116
00:04:58,480 --> 00:05:00,120
Imagine having a
movies collection,

117
00:05:00,120 --> 00:05:03,840
and then perform the following
text search-- db.movies.find

118
00:05:03,840 --> 00:05:06,806
$text $search "Big Lebowski."

119
00:05:06,806 --> 00:05:08,180
Which of these
documents might be

120
00:05:08,180 --> 00:05:09,690
returned if all
of these documents

121
00:05:09,690 --> 00:05:11,520
are in the collection?