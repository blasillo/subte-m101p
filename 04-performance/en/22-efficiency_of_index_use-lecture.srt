1
00:00:00,000 --> 00:00:00,250

2
00:00:00,250 --> 00:00:00,470
OK.

3
00:00:00,470 --> 00:00:02,011
So at this point,
we know quite a bit

4
00:00:02,011 --> 00:00:04,620
about what types of
indexes MongoDB supports,

5
00:00:04,620 --> 00:00:07,300
how to create indexes, and
the importance of indexes

6
00:00:07,300 --> 00:00:10,370
for the efficiency
of our application.

7
00:00:10,370 --> 00:00:13,600
What I'd like to do now is
walk through an example that

8
00:00:13,600 --> 00:00:16,640
gives you an idea of the type
of thinking you need to do when

9
00:00:16,640 --> 00:00:18,270
you're designing your indexes.

10
00:00:18,270 --> 00:00:20,630
The goal is that our
read and write operations

11
00:00:20,630 --> 00:00:22,580
are as efficient as possible.

12
00:00:22,580 --> 00:00:26,020
But as with so many things, this
requires some upfront thinking

13
00:00:26,020 --> 00:00:27,555
and some experimentation.

14
00:00:27,555 --> 00:00:29,930
To be sure you get the right
indexes in place, what you'd

15
00:00:29,930 --> 00:00:34,170
really want to do is test your
indexes under some real world

16
00:00:34,170 --> 00:00:36,887
workloads and make
adjustments from there.

17
00:00:36,887 --> 00:00:38,720
But that's outside the
scope of this course.

18
00:00:38,720 --> 00:00:40,480
What we're going
to look at here is

19
00:00:40,480 --> 00:00:42,130
some of the initial
thinking you can

20
00:00:42,130 --> 00:00:45,770
do to get ready for some
of that real world testing.

21
00:00:45,770 --> 00:00:48,740
So what we're going for here is
the selectivity of our index,

22
00:00:48,740 --> 00:00:51,089
and to what degree for
a given query pattern

23
00:00:51,089 --> 00:00:53,630
the index is going to minimize
the number of records scanned.

24
00:00:53,630 --> 00:00:56,230
And we have to consider this
in a scope of all operations

25
00:00:56,230 --> 00:00:59,730
to satisfy a query, and
sometimes make some trade offs.

26
00:00:59,730 --> 00:01:02,731
So we'll have to consider, for
example, how sorts are handled.

27
00:01:02,731 --> 00:01:03,230
OK.

28
00:01:03,230 --> 00:01:04,985
So let's go through our example.

29
00:01:04,985 --> 00:01:06,360
And again, this
is really the tip

30
00:01:06,360 --> 00:01:08,759
of the iceberg in terms of
designing a set of indexes.

31
00:01:08,759 --> 00:01:10,300
But it gives you an
idea for the type

32
00:01:10,300 --> 00:01:12,258
of thinking you're going
to have to do in order

33
00:01:12,258 --> 00:01:13,680
to get those indexes right.

34
00:01:13,680 --> 00:01:15,660
So to think about
building indexes that

35
00:01:15,660 --> 00:01:17,720
can handle our query
patterns efficiently,

36
00:01:17,720 --> 00:01:19,380
let's return to our
student data set.

37
00:01:19,380 --> 00:01:20,921
Now, in this version
of the data set,

38
00:01:20,921 --> 00:01:22,820
I've added a field
for a final grade.

39
00:01:22,820 --> 00:01:25,770
And we're dealing with
about one million students.

40
00:01:25,770 --> 00:01:27,880
So here's the query
that I want to look at.

41
00:01:27,880 --> 00:01:30,720
And the reason for this is
because it illustrates several

42
00:01:30,720 --> 00:01:33,090
of the issues that we
have to think about

43
00:01:33,090 --> 00:01:35,010
in designing our indexes.

44
00:01:35,010 --> 00:01:36,540
So note that what
we're doing here

45
00:01:36,540 --> 00:01:40,641
is a query for all students with
an ID greater than 500,000--

46
00:01:40,641 --> 00:01:42,140
OK, so that's going
to be about half

47
00:01:42,140 --> 00:01:46,460
the students-- and
records for the class 54.

48
00:01:46,460 --> 00:01:49,420
There's about 500 classes
represented in here.

49
00:01:49,420 --> 00:01:52,600
And then finally, we're going
to sort in ascending order

50
00:01:52,600 --> 00:01:55,490
on student ID, the same
field we're querying on here.

51
00:01:55,490 --> 00:01:57,870
Now, throughout
this example, I'm

52
00:01:57,870 --> 00:02:00,160
going to be running
explain on the cursor

53
00:02:00,160 --> 00:02:03,280
that the query returns
to us and specifying

54
00:02:03,280 --> 00:02:05,970
that I want to see execution
stats so that we get

55
00:02:05,970 --> 00:02:09,490
nice detailed output about
exactly what MongoDB did

56
00:02:09,490 --> 00:02:11,210
in order to satisfy the query.

57
00:02:11,210 --> 00:02:13,210
So let's run this.

58
00:02:13,210 --> 00:02:13,920
OK.

59
00:02:13,920 --> 00:02:16,510
So I want to draw your attention
to a couple different things.

60
00:02:16,510 --> 00:02:19,560
So first, let's take a look
at this-- total keys examined.

61
00:02:19,560 --> 00:02:21,540
This is how many
keys within the index

62
00:02:21,540 --> 00:02:25,720
MongoDB walked through in order
to generate the results set.

63
00:02:25,720 --> 00:02:28,800
The results set, on the other
hand, is only 10,000 documents.

64
00:02:28,800 --> 00:02:31,280
So we had to look at
a lot more index keys

65
00:02:31,280 --> 00:02:34,370
then we really needed to in
order to find the documents.

66
00:02:34,370 --> 00:02:36,000
What this means
is that the index

67
00:02:36,000 --> 00:02:38,120
that was used in order
to satisfy this query

68
00:02:38,120 --> 00:02:39,300
wasn't very selective.

69
00:02:39,300 --> 00:02:41,260
And you remember
that selectivity

70
00:02:41,260 --> 00:02:43,950
is one of our key goals when
we're designing an index.

71
00:02:43,950 --> 00:02:45,950
So let's see if we can
figure out what happened.

72
00:02:45,950 --> 00:02:46,450
OK.

73
00:02:46,450 --> 00:02:48,384
Now, when you move
above executionStats

74
00:02:48,384 --> 00:02:50,550
in the explain output, the
thing you're going to see

75
00:02:50,550 --> 00:02:52,380
is the output from
the query planner.

76
00:02:52,380 --> 00:02:54,537
So starting from the top
and working your way down,

77
00:02:54,537 --> 00:02:55,620
you've got a winning plan.

78
00:02:55,620 --> 00:02:58,520
And then you also get a chance
to see the rejected plans.

79
00:02:58,520 --> 00:03:04,560
So this is in JSON form a
specific outcome for this ID

80
00:03:04,560 --> 00:03:07,200
here, racing a couple
of different query plans

81
00:03:07,200 --> 00:03:08,310
against one another.

82
00:03:08,310 --> 00:03:09,210
OK.

83
00:03:09,210 --> 00:03:13,230
So what happened here
is that the winning plan

84
00:03:13,230 --> 00:03:16,150
used a compound index based
on student ID and class ID.

85
00:03:16,150 --> 00:03:19,390
And the losing plan--
there's only one other--

86
00:03:19,390 --> 00:03:23,070
would have used an
index based on class ID,

87
00:03:23,070 --> 00:03:26,460
but then it would have had
to do an in memory sort.

88
00:03:26,460 --> 00:03:29,550
That's what this component
of this particular query plan

89
00:03:29,550 --> 00:03:30,050
means.

90
00:03:30,050 --> 00:03:33,890
Any time you see a sort
stage in a query plan,

91
00:03:33,890 --> 00:03:35,940
it means that
MongoDB was or would

92
00:03:35,940 --> 00:03:38,780
have been unable to sort
the results set according

93
00:03:38,780 --> 00:03:41,920
to the sort specified by the
query in the database itself.

94
00:03:41,920 --> 00:03:45,100
Rather, it would have had
to do an in memory sort.

95
00:03:45,100 --> 00:03:48,480
So what happened here is
that the index that won

96
00:03:48,480 --> 00:03:50,950
is one that was able to
return sorted output.

97
00:03:50,950 --> 00:03:53,480
So it only had to get to
that certain threshold

98
00:03:53,480 --> 00:03:56,150
number of returned results,
which is, I believe,

99
00:03:56,150 --> 00:03:58,720
101 returned documents.

100
00:03:58,720 --> 00:04:01,579
First is, if you
remember, 10,000 documents

101
00:04:01,579 --> 00:04:03,870
would have to have been
returned by any query plan that

102
00:04:03,870 --> 00:04:06,250
was unable to do a sort
within the database.

103
00:04:06,250 --> 00:04:09,690
Because we actually were able to
identify 10,000 documents that

104
00:04:09,690 --> 00:04:12,350
matched the query
parameters stipulated here.

105
00:04:12,350 --> 00:04:14,290
Again, the issue is
one of selectivity.

106
00:04:14,290 --> 00:04:16,760
And the problem
here is that we're

107
00:04:16,760 --> 00:04:20,880
specifying a range query that
just isn't very selective.

108
00:04:20,880 --> 00:04:23,810
And so we end up
touching every single key

109
00:04:23,810 --> 00:04:28,600
in this index that has a student
ID value greater than 500,000.

110
00:04:28,600 --> 00:04:31,200
So that's about half
of the records here.

111
00:04:31,200 --> 00:04:33,200
Now, I'm sure you can see
where I'm headed here.

112
00:04:33,200 --> 00:04:35,330
It's this query,
the point query,

113
00:04:35,330 --> 00:04:38,360
that's going to be considerably
more selective for us.

114
00:04:38,360 --> 00:04:39,040
OK.

115
00:04:39,040 --> 00:04:42,160
So as I said, there's
only about 500 classes

116
00:04:42,160 --> 00:04:44,180
represented in this data set.

117
00:04:44,180 --> 00:04:45,930
And now, granted,
there's lots of students

118
00:04:45,930 --> 00:04:47,250
taking those classes.

119
00:04:47,250 --> 00:04:49,220
But this is going to
constrain our results set.

120
00:04:49,220 --> 00:04:51,678
And this is really what leads
to those 10,000 records being

121
00:04:51,678 --> 00:04:55,280
returned as opposed to the
850,000 that were identified.

122
00:04:55,280 --> 00:04:57,870
So what would better,
given the indexes we have,

123
00:04:57,870 --> 00:05:01,770
is if, in fact, we use
this particular index.

124
00:05:01,770 --> 00:05:04,210
Because this is going to be
substantially more selective.

125
00:05:04,210 --> 00:05:05,750
So let's do that.

126
00:05:05,750 --> 00:05:09,760
Now, MongoDB does provide a
way of forcing the database

127
00:05:09,760 --> 00:05:11,105
to use a particular index.

128
00:05:11,105 --> 00:05:12,730
I can't stress strongly
enough that you

129
00:05:12,730 --> 00:05:14,120
should use this with caution.

130
00:05:14,120 --> 00:05:15,860
It's not something
you should necessarily

131
00:05:15,860 --> 00:05:17,120
make part of your deployment.

132
00:05:17,120 --> 00:05:19,120
But it is a way
of overriding what

133
00:05:19,120 --> 00:05:20,870
would be the outcome
of the query planner.

134
00:05:20,870 --> 00:05:22,871
So that is called Hint.

135
00:05:22,871 --> 00:05:23,370
OK.

136
00:05:23,370 --> 00:05:25,932
And with Hint, we can
specify a particular index

137
00:05:25,932 --> 00:05:28,140
that we'd like to use, either
by specifying its shape

138
00:05:28,140 --> 00:05:29,527
or its actual name.

139
00:05:29,527 --> 00:05:31,610
In this case, I'm just
going to specify its shape.

140
00:05:31,610 --> 00:05:33,750
And what I'm going to do
here is I'm going to say,

141
00:05:33,750 --> 00:05:36,610
OK, I want to use
the class ID index.

142
00:05:36,610 --> 00:05:37,140
OK.

143
00:05:37,140 --> 00:05:40,580
So let's see what
happened with this query.

144
00:05:40,580 --> 00:05:41,450
OK.

145
00:05:41,450 --> 00:05:45,880
We're now down from having
scanned 850,000 index keys

146
00:05:45,880 --> 00:05:48,590
to just about 20,000
in order to get

147
00:05:48,590 --> 00:05:50,990
to our results set of 10,000.

148
00:05:50,990 --> 00:05:51,490
OK.

149
00:05:51,490 --> 00:05:55,360
And the execution time is
only 79 milliseconds as

150
00:05:55,360 --> 00:05:57,690
opposed to the 2,600
milliseconds we

151
00:05:57,690 --> 00:06:00,160
saw before using other index.

152
00:06:00,160 --> 00:06:00,750
OK.

153
00:06:00,750 --> 00:06:03,200
Now, the fact is, what
we'd really like to see

154
00:06:03,200 --> 00:06:06,560
is that nReturned
is, in fact, very

155
00:06:06,560 --> 00:06:08,820
close to total keys examined.

156
00:06:08,820 --> 00:06:13,320
So one way of addressing this
is to design a better index.