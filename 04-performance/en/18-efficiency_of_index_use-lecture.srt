1
00:00:00,000 --> 00:00:00,140

2
00:00:00,140 --> 00:00:03,520
OK, now you have most of the
tools you'll need to

3
00:00:03,520 --> 00:00:05,390
understand the use of indexes.

4
00:00:05,390 --> 00:00:09,030
But before we go on, I want to
point out that just because

5
00:00:09,030 --> 00:00:11,900
you use an index doesn't mean
it's used efficiently.

6
00:00:11,900 --> 00:00:15,150
So certain types of operators,
for instance dollar greater

7
00:00:15,150 --> 00:00:19,110
than and dollar less than, may
use an index but not use it

8
00:00:19,110 --> 00:00:22,000
efficiently because they may
still require the inspection

9
00:00:22,000 --> 00:00:23,720
of a lot of documents.

10
00:00:23,720 --> 00:00:29,610
So you can say dollar greater
than three, and maybe that's

11
00:00:29,610 --> 00:00:31,200
half the collection.

12
00:00:31,200 --> 00:00:34,390
And so it uses the index, but
it's still very slow.

13
00:00:34,390 --> 00:00:36,930
Other things that might not use
the index or if they use

14
00:00:36,930 --> 00:00:40,140
it use it efficiently are
not equals or not

15
00:00:40,140 --> 00:00:42,430
in or doesn't exist.

16
00:00:42,430 --> 00:00:45,310
All of these negative operators
are difficult

17
00:00:45,310 --> 00:00:47,450
because they need to inspect
every element to see if it

18
00:00:47,450 --> 00:00:50,530
satisfies the criteria, and
they might have returned a

19
00:00:50,530 --> 00:00:51,660
large result.

20
00:00:51,660 --> 00:00:55,080
Also when you're searching on
regexes, if you don't give

21
00:00:55,080 --> 00:00:57,980
something that is stemmed
on the left part of

22
00:00:57,980 --> 00:00:59,580
the field, it's slow.

23
00:00:59,580 --> 00:01:04,739
So if you say I want to search
for /abcd/, that really can't

24
00:01:04,739 --> 00:01:09,240
use the index because we don't
have a way to do that full

25
00:01:09,240 --> 00:01:10,060
text search.

26
00:01:10,060 --> 00:01:15,370
If on other hand, you say stem
it /^abcd/ on the left most

27
00:01:15,370 --> 00:01:20,230
part of the string, then it can
use it and it will use it.

28
00:01:20,230 --> 00:01:22,310
Let me give you an example
where the first order

29
00:01:22,310 --> 00:01:24,550
information may be a little
bit misleading.

30
00:01:24,550 --> 00:01:27,050
Let's go back to our students
collection.

31
00:01:27,050 --> 00:01:28,250
I built two of these
collections.

32
00:01:28,250 --> 00:01:31,810
This one has 10 million
documents in it and quite a

33
00:01:31,810 --> 00:01:33,260
few indexes on it.

34
00:01:33,260 --> 00:01:34,830
That's a document in
the collection.

35
00:01:34,830 --> 00:01:36,560
You can see it's got
a student ID and a

36
00:01:36,560 --> 00:01:38,470
class ID and some scores.

37
00:01:38,470 --> 00:01:42,460
And there's more than one
record for each student.

38
00:01:42,460 --> 00:01:45,050
There's a record
for each class.

39
00:01:45,050 --> 00:01:48,080
Let's look at the
indexes on it.

40
00:01:48,080 --> 00:01:48,760
Oops.

41
00:01:48,760 --> 00:01:50,820
When we look at the indexes on
it, we see there's a healthy

42
00:01:50,820 --> 00:01:52,160
number of indexes on it.

43
00:01:52,160 --> 00:01:56,393
We have one on _id; one on
class_id; one on student_id;

44
00:01:56,393 --> 00:01:59,920
one on student_id, class_ID--

45
00:01:59,920 --> 00:02:01,010
all good.

46
00:02:01,010 --> 00:02:05,590
Now, let's do a query that is
reasonably selective but isn't

47
00:02:05,590 --> 00:02:06,590
going to be very fast.

48
00:02:06,590 --> 00:02:09,880
And in particular, let's look
at finding all the students

49
00:02:09,880 --> 00:02:13,770
with a student ID greater than
500 who are in class 20.

50
00:02:13,770 --> 00:02:14,930
There isn't that many
documents that

51
00:02:14,930 --> 00:02:16,450
satisfy this criteria.

52
00:02:16,450 --> 00:02:19,520
And then let's sort it by
student ID and explain it.

53
00:02:19,520 --> 00:02:24,070
And if we do that, we can see
that it's pretty slow.

54
00:02:24,070 --> 00:02:26,130
Took 3.6 seconds.

55
00:02:26,130 --> 00:02:29,600
It used the
student_id_1_class_id_1 index.

56
00:02:29,600 --> 00:02:34,120
Now that turns out to be not the
best choice because even

57
00:02:34,120 --> 00:02:38,060
though it only returned 20,000
documents, it had to scan, it

58
00:02:38,060 --> 00:02:44,260
looks like, 1.3 million index
items, and that is a lot.

59
00:02:44,260 --> 00:02:46,340
So it did not use the most
efficient index.

60
00:02:46,340 --> 00:02:47,660
And you can understand why.

61
00:02:47,660 --> 00:02:50,870
If you use the student_id index,
and I deliberately

62
00:02:50,870 --> 00:02:53,330
choose a student ID that was
somewhere in the middle, half

63
00:02:53,330 --> 00:02:55,810
the records had student IDs
is greater than that.

64
00:02:55,810 --> 00:02:59,140
And so it was going to be very
inefficient to do that.

65
00:02:59,140 --> 00:03:02,672
But on the other hand, if I hint
it and I say, you know

66
00:03:02,672 --> 00:03:04,940
what, use the class_id index.

67
00:03:04,940 --> 00:03:06,950
And I know there aren't that
many students in each class

68
00:03:06,950 --> 00:03:08,940
because I built this data set,
so I have information it

69
00:03:08,940 --> 00:03:10,680
doesn't necessarily have.

70
00:03:10,680 --> 00:03:12,270
And it's the same query.

71
00:03:12,270 --> 00:03:13,790
It's going to use the
class_id data set.

72
00:03:13,790 --> 00:03:15,730
And then, it's going to have
to just manually figure out

73
00:03:15,730 --> 00:03:18,930
which ones are the student ID
that are greater than 500, but

74
00:03:18,930 --> 00:03:21,240
it's still going to
be a lot better.

75
00:03:21,240 --> 00:03:23,000
Wow, that was a lot better.

76
00:03:23,000 --> 00:03:28,060
So you can see here it took
133 milliseconds, and it

77
00:03:28,060 --> 00:03:31,260
scanned 20,000 objects here.

78
00:03:31,260 --> 00:03:34,770
And you don't see any number
bigger than that here, so the

79
00:03:34,770 --> 00:03:37,510
index entries number of scanned
looks like it was

80
00:03:37,510 --> 00:03:38,530
about the same.

81
00:03:38,530 --> 00:03:43,070
So much more efficient to use
this class_id index even

82
00:03:43,070 --> 00:03:46,000
though the class and the student
ID was specified.

83
00:03:46,000 --> 00:03:48,610
And the reason is that the way
we were using that student_id

84
00:03:48,610 --> 00:03:51,950
index was with one of these
operators, greater than 500.

85
00:03:51,950 --> 00:03:52,750
Greater than--

86
00:03:52,750 --> 00:03:55,850
not a particularly efficient
operator to use with an index.

87
00:03:55,850 --> 00:03:59,790
So just keep in mind when you're
thinking about indexing

88
00:03:59,790 --> 00:04:03,870
and whether or not it's using
an index that you have to

89
00:04:03,870 --> 00:04:06,180
consider more than just whether
an index was used, but

90
00:04:06,180 --> 00:04:07,550
also how it was used.

91
00:04:07,550 --> 00:04:09,180
Was it only used for the sort?

92
00:04:09,180 --> 00:04:11,410
Was it used in an inefficient
manner that caused the

93
00:04:11,410 --> 00:04:13,430
database to still look through
millions of records?

94
00:04:13,430 --> 00:04:15,890
All these things are important
when it comes to final

95
00:04:15,890 --> 00:04:17,140
performance.

96
00:04:17,140 --> 00:04:17,440