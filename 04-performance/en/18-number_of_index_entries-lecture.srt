1
00:00:00,000 --> 00:00:03,540
Let's talk for a moment about
index cardinality, which is

2
00:00:03,540 --> 00:00:06,990
how many index points are there
for each different type

3
00:00:06,990 --> 00:00:10,180
of index that MongoDB
supports.

4
00:00:10,180 --> 00:00:13,940
Now in a regular index, for
every single key that you put

5
00:00:13,940 --> 00:00:15,190
in the index, there's
certainly going

6
00:00:15,190 --> 00:00:17,300
to be an index point.

7
00:00:17,300 --> 00:00:20,650
And in addition, if there is no
key, then there's going to

8
00:00:20,650 --> 00:00:23,080
be an index point under
the null entry.

9
00:00:23,080 --> 00:00:26,650
So essentially, you get about
one to one relative to the

10
00:00:26,650 --> 00:00:29,210
number of documents in the
collection in terms of index

11
00:00:29,210 --> 00:00:30,640
cardinality.

12
00:00:30,640 --> 00:00:31,990
And that makes the index
a certain size.

13
00:00:31,990 --> 00:00:35,270
And it's proportional to the
collection size in terms of

14
00:00:35,270 --> 00:00:37,770
its end pointers to documents.

15
00:00:37,770 --> 00:00:41,820
In a sparse index, when a
document is missing the key

16
00:00:41,820 --> 00:00:45,920
being indexed, it's not in the
index because it's a null and

17
00:00:45,920 --> 00:00:49,280
we don't keep nulls in the
index for a sparse index.

18
00:00:49,280 --> 00:00:52,790
So here, we're going to have
index points that could be

19
00:00:52,790 --> 00:00:56,610
potentially less than or equal
to the number of documents.

20
00:00:56,610 --> 00:00:59,750
And finally, here in a multikey
index, which is an

21
00:00:59,750 --> 00:01:02,520
index on an array value--

22
00:01:02,520 --> 00:01:05,660
and an index becomes a multikey
index as soon as you

23
00:01:05,660 --> 00:01:11,720
have at least one value inside
any document that is an array.

24
00:01:11,720 --> 00:01:13,970
Then there may be
multiple index

25
00:01:13,970 --> 00:01:15,830
points for each document.

26
00:01:15,830 --> 00:01:19,190
For instance, if there's some
sort of tags array in a

27
00:01:19,190 --> 00:01:26,480
document, and it's got three
or five or four tags, then

28
00:01:26,480 --> 00:01:29,780
there's going to be an index
point for every single one of

29
00:01:29,780 --> 00:01:31,040
these keys.

30
00:01:31,040 --> 00:01:34,770
And so it could be greater than
the number of documents.

31
00:01:34,770 --> 00:01:36,450
And it could be significantly
greater than

32
00:01:36,450 --> 00:01:38,100
the number of documents.

33
00:01:38,100 --> 00:01:41,430
And this comes up because
indexes need to be maintained.

34
00:01:41,430 --> 00:01:43,330
There's a cost of maintaining
them.

35
00:01:43,330 --> 00:01:47,510
And if anything causes the
index to have to get

36
00:01:47,510 --> 00:01:48,170
rewritten--

37
00:01:48,170 --> 00:01:50,210
For example, let's say
a document moves.

38
00:01:50,210 --> 00:01:53,170
When a document moves-- and it
might move because you just

39
00:01:53,170 --> 00:01:55,070
added something to it that makes
it too large to fit in

40
00:01:55,070 --> 00:01:57,760
the space that the database
has for it on disk, so it

41
00:01:57,760 --> 00:01:59,230
needs to move it to
a new location.

42
00:01:59,230 --> 00:02:02,910
Every single index point that
points to that document needs

43
00:02:02,910 --> 00:02:04,860
to be updated.

44
00:02:04,860 --> 00:02:08,030
Now, if the key is null for a
particular index, well then

45
00:02:08,030 --> 00:02:11,530
there is no update that needs
to happen to the index.

46
00:02:11,530 --> 00:02:14,110
If it's a regular index, well
then yeah, one index point

47
00:02:14,110 --> 00:02:15,590
needs to get updated for sure.

48
00:02:15,590 --> 00:02:20,130
And if it's a multikey index,
and there's 100 or 200 or 300

49
00:02:20,130 --> 00:02:22,690
items in an array, then
they all need to get

50
00:02:22,690 --> 00:02:25,440
updated inside the index.

51
00:02:25,440 --> 00:02:27,990
All right, time for a quiz.

52
00:02:27,990 --> 00:02:29,970
Let's say you update a document
with a key called

53
00:02:29,970 --> 00:02:32,540
tags and that update causes the
document to need to get

54
00:02:32,540 --> 00:02:33,950
moved on disk.

55
00:02:33,950 --> 00:02:36,830
If the document has 100 tags in
it, and if the tags array

56
00:02:36,830 --> 00:02:39,970
is indexed with a multikey
index, how many index points

57
00:02:39,970 --> 00:02:42,830
need to be updated in the index
to accommodate the move?

58
00:02:42,830 --> 00:02:44,080
Put just the number below.

59
00:02:44,080 --> 00:02:45,240