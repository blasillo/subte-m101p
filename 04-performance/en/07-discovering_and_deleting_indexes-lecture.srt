1
00:00:00,000 --> 00:00:00,500

2
00:00:00,500 --> 00:00:02,840
OK, now we know how to create
indexes on a collection.

3
00:00:02,840 --> 00:00:04,800
How would you discover
what indexes are already

4
00:00:04,800 --> 00:00:05,970
on the collection?

5
00:00:05,970 --> 00:00:08,887
Well, we can do that with
the get indexes command.

6
00:00:08,887 --> 00:00:10,720
So I'm going to start
the Mongo shell again.

7
00:00:10,720 --> 00:00:13,790
And once again, I'm going
to use the school database.

8
00:00:13,790 --> 00:00:16,175
And then I'm going to call
db.students.getIndexes.

9
00:00:16,175 --> 00:00:19,136

10
00:00:19,136 --> 00:00:20,760
Students is the name
of the collection.

11
00:00:20,760 --> 00:00:22,384
And as you remember,
in the last lesson

12
00:00:22,384 --> 00:00:25,040
we just added an index
to it for student ID.

13
00:00:25,040 --> 00:00:26,490
We're going to
call it getIndexes.

14
00:00:26,490 --> 00:00:28,880
And if we do that we
get back this result,

15
00:00:28,880 --> 00:00:30,440
which is a document.

16
00:00:30,440 --> 00:00:32,520
Actually, it's an
array of two documents.

17
00:00:32,520 --> 00:00:34,890
And the first one
tells you that there

18
00:00:34,890 --> 00:00:37,090
is an index on underscore id.

19
00:00:37,090 --> 00:00:38,840
Now, this index exists
on all collections.

20
00:00:38,840 --> 00:00:41,050
And you can't delete it.

21
00:00:41,050 --> 00:00:43,830
There's also an
index on student_id.

22
00:00:43,830 --> 00:00:46,510
And that's the index
we just created.

23
00:00:46,510 --> 00:00:49,020
And if we wanted to
get rid of that index,

24
00:00:49,020 --> 00:00:53,630
we would call
db.students.dropIndex

25
00:00:53,630 --> 00:00:56,590
and provide this
exact same signature

26
00:00:56,590 --> 00:00:57,610
as when we created it.

27
00:00:57,610 --> 00:00:59,600
So here we're
calling drop index.

28
00:00:59,600 --> 00:01:02,970
And we're giving the same
signature, student_id:1,

29
00:01:02,970 --> 00:01:04,695
that we gave when we
created the index.

30
00:01:04,695 --> 00:01:07,830
And if we do that we
should be able to drop it.

31
00:01:07,830 --> 00:01:09,070
And there you go.

32
00:01:09,070 --> 00:01:11,330
[? Num ?] indexes was
two, and now it's one.

33
00:01:11,330 --> 00:01:15,880
And if we get indexes again
we'll see that in fact,

34
00:01:15,880 --> 00:01:18,514
there is only one
index-- perfect.

35
00:01:18,514 --> 00:01:20,180
All right, one last
point I want to make

36
00:01:20,180 --> 00:01:24,030
is that this call,
getIndexes, is a call

37
00:01:24,030 --> 00:01:28,210
that you use in
MongoDB 3.0 and will

38
00:01:28,210 --> 00:01:31,150
work on both WiredTiger
and [? Mapv1 ?].

39
00:01:31,150 --> 00:01:33,290
And in earlier versions
of the database

40
00:01:33,290 --> 00:01:36,900
you could look at a
special collection system

41
00:01:36,900 --> 00:01:39,580
that indexes to see
what indexes existed.

42
00:01:39,580 --> 00:01:42,120
That does not work
in WiredTiger.

43
00:01:42,120 --> 00:01:43,840
And so the preferred
way to figure out

44
00:01:43,840 --> 00:01:45,400
what indexes are
in a collection is

45
00:01:45,400 --> 00:01:48,220
to do this, to call
db.students.getIndexes,

46
00:01:48,220 --> 00:01:52,240
and again, is a
change in MongoDB 3.0.