1
00:00:00,000 --> 00:00:00,180

2
00:00:00,180 --> 00:00:03,200
We started out this unit by
talking about the importance

3
00:00:03,200 --> 00:00:06,380
of being algorithmically
efficient by using indexes to

4
00:00:06,380 --> 00:00:08,210
resolve our queries.

5
00:00:08,210 --> 00:00:10,630
Now the next level of
optimization is that we want

6
00:00:10,630 --> 00:00:13,580
those indexes to be in memory.

7
00:00:13,580 --> 00:00:16,390
Because if our index is not in
memory-- if our index is on

8
00:00:16,390 --> 00:00:19,100
disk, and if we're using almost
all of it, then we're

9
00:00:19,100 --> 00:00:19,770
going to find that the

10
00:00:19,770 --> 00:00:21,500
performance is severely impacted.

11
00:00:21,500 --> 00:00:24,020
Even though algorithmically it's
much faster than, let's

12
00:00:24,020 --> 00:00:26,790
say, traversing the entire
collection to get the answer,

13
00:00:26,790 --> 00:00:30,030
it still isn't going to be super
fast if we have to go to

14
00:00:30,030 --> 00:00:32,860
disk to access our index.

15
00:00:32,860 --> 00:00:34,530
So there's a question-- and
we're going to talk more about

16
00:00:34,530 --> 00:00:37,890
this in the rest of the unit--
about working set and how do

17
00:00:37,890 --> 00:00:40,830
we keep the most important parts
of the data in memory.

18
00:00:40,830 --> 00:00:43,190
But even more important in
keeping the data in memory is

19
00:00:43,190 --> 00:00:45,140
going to be keeping the
index in memory.

20
00:00:45,140 --> 00:00:46,660
So the first question
you might have is,

21
00:00:46,660 --> 00:00:48,200
how big is an index?

22
00:00:48,200 --> 00:00:51,770
Let's go back and look at this
student's collection that I

23
00:00:51,770 --> 00:00:53,000
created earlier.

24
00:00:53,000 --> 00:00:57,840
And if you recall, it has 10
million student records in it.

25
00:00:57,840 --> 00:01:00,200
So if we look at that
collection, we

26
00:01:00,200 --> 00:01:01,496
can get it's stats.

27
00:01:01,496 --> 00:01:05,190

28
00:01:05,190 --> 00:01:06,970
And it just says
db.students.stats.

29
00:01:06,970 --> 00:01:10,360
And you can see that the average
object in this is 232

30
00:01:10,360 --> 00:01:14,490
bytes and that overall this
thing is using almost 3

31
00:01:14,490 --> 00:01:16,220
gigabytes on disk.

32
00:01:16,220 --> 00:01:19,550
And we may not have a computer
with 3 gigabytes of memory,

33
00:01:19,550 --> 00:01:21,110
but we might have a computer
that's big

34
00:01:21,110 --> 00:01:22,340
enough to hold our index.

35
00:01:22,340 --> 00:01:25,250
So the next question is, well
how big is the index?

36
00:01:25,250 --> 00:01:28,840
And the answer is, that
if we run the command

37
00:01:28,840 --> 00:01:32,310
totalIndexSize,
db.students.totalIndexSize, we

38
00:01:32,310 --> 00:01:35,330
will find out the size of
the indexes on disk.

39
00:01:35,330 --> 00:01:38,380
And the answer is
that our index--

40
00:01:38,380 --> 00:01:40,990
and we only have one index in
this collection if I recall--

41
00:01:40,990 --> 00:01:42,030
well I'm not sure about that.

42
00:01:42,030 --> 00:01:43,180
I'll check in a second.

43
00:01:43,180 --> 00:01:48,340
Our indexes are 543 megabytes.

44
00:01:48,340 --> 00:01:52,520
And now let's look at how many
indexes are on this thing.

45
00:01:52,520 --> 00:01:57,470
Yeah there's only one index that
we added, which is this

46
00:01:57,470 --> 00:01:58,960
index of student_ID.

47
00:01:58,960 --> 00:02:05,380
So overall, 543 megabytes of
space spent on indexes.

48
00:02:05,380 --> 00:02:09,699
And if we're curious about how
much of that is spent on the

49
00:02:09,699 --> 00:02:13,150
_ID one, I guess what we can do
is just drop the index that

50
00:02:13,150 --> 00:02:16,100
we created and run it together
and find out-- this is

51
00:02:16,100 --> 00:02:16,490
interesting.

52
00:02:16,490 --> 00:02:17,740
I don't know the answer.

53
00:02:17,740 --> 00:02:23,270
So I'm just going to remove
the index on student_ID.

54
00:02:23,270 --> 00:02:27,650
We drop the index, and now
you can see it's gone.

55
00:02:27,650 --> 00:02:30,510
And let's get our index size.

56
00:02:30,510 --> 00:02:35,830
And it dropped by not quite
about half, to 292 megabytes.

57
00:02:35,830 --> 00:02:39,210
So you can see that it looks
like for every index that we

58
00:02:39,210 --> 00:02:42,050
add to this collection, we'll
have to have over 200

59
00:02:42,050 --> 00:02:45,260
megabytes of available memory
if we want to keep all the

60
00:02:45,260 --> 00:02:46,350
indexes in memory--

61
00:02:46,350 --> 00:02:47,870
or at least the ones
we're going to use.

62
00:02:47,870 --> 00:02:49,650
This is important to keep in
mind when you're designing

63
00:02:49,650 --> 00:02:50,590
your system.

64
00:02:50,590 --> 00:02:52,710
Think about, well hmm, how large
is my collection going

65
00:02:52,710 --> 00:02:54,680
to be and how large are my
indexes going to be?

66
00:02:54,680 --> 00:02:56,920
It's kind of a system
administrator topic or

67
00:02:56,920 --> 00:02:58,160
database administrator topic.

68
00:02:58,160 --> 00:03:00,830
But it's good as a developer
to just keep it in mind and

69
00:03:00,830 --> 00:03:03,050
realize that indexes are
not entirely free.

70
00:03:03,050 --> 00:03:04,340
And that you're going to want
to keep them in memory and

71
00:03:04,340 --> 00:03:06,320
they can get kind of large.

72
00:03:06,320 --> 00:03:08,810
They are the single most
important determining factor

73
00:03:08,810 --> 00:03:11,270
in terms of whether or not you
get good performance from a

74
00:03:11,270 --> 00:03:13,600
query, or whether or not
those are in memory.

75
00:03:13,600 --> 00:03:15,830
All right, it's time for quiz.

76
00:03:15,830 --> 00:03:18,250
Is it more important that
your index or your

77
00:03:18,250 --> 00:03:20,700
data fit into memory?

78
00:03:20,700 --> 00:03:21,950
Check one.

79
00:03:21,950 --> 00:03:22,630