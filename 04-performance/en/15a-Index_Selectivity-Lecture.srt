1
00:00:00,000 --> 00:00:00,200

2
00:00:00,200 --> 00:00:02,680
When designing your indexes,
you want them to be as

3
00:00:02,680 --> 00:00:04,740
selective as possible.

4
00:00:04,740 --> 00:00:07,360
And this is a concept that is
really no different than the

5
00:00:07,360 --> 00:00:08,640
world of relational.

6
00:00:08,640 --> 00:00:10,840
But when you're choosing a
compound index, if you don't

7
00:00:10,840 --> 00:00:13,170
choose something that's
selective, then there isn't a

8
00:00:13,170 --> 00:00:15,980
lot of value to specifying
that field.

9
00:00:15,980 --> 00:00:17,690
So here's an example.

10
00:00:17,690 --> 00:00:20,100
Let's say you were doing some
logging and there were only

11
00:00:20,100 --> 00:00:23,872
three different types
of log operations.

12
00:00:23,872 --> 00:00:30,180
There was a save, and there
was an open, and a run--

13
00:00:30,180 --> 00:00:33,750
I'm just imagining logging
operations you might see--

14
00:00:33,750 --> 00:00:35,740
and a put, and a get.

15
00:00:35,740 --> 00:00:37,820
And we had hundreds of millions
of these logging

16
00:00:37,820 --> 00:00:38,760
operations.

17
00:00:38,760 --> 00:00:43,610
And each of them has a date and
time, or say a timestamp.

18
00:00:43,610 --> 00:00:48,950
So would you rather have an
index that was the timestamp

19
00:00:48,950 --> 00:00:54,570
comma the opcode, where these
are the opcodes, or would it

20
00:00:54,570 --> 00:00:59,850
make sense to do the opcode
comma the timestamp?

21
00:00:59,850 --> 00:01:02,660
Now, the answer is that it would
make a lot more sense to

22
00:01:02,660 --> 00:01:04,160
do the timestamp first.

23
00:01:04,160 --> 00:01:07,230
And the reason is that if you
typically know the range of

24
00:01:07,230 --> 00:01:11,290
time that you're looking for an
operation, and you specify

25
00:01:11,290 --> 00:01:13,180
an opcode, well there's only
five of these opcodes.

26
00:01:13,180 --> 00:01:15,890
And so by specifying
one you're only

27
00:01:15,890 --> 00:01:17,960
eliminating 4/5 of the data.

28
00:01:17,960 --> 00:01:19,570
There's a tremendous amount
of data that you

29
00:01:19,570 --> 00:01:21,470
still need to go through.

30
00:01:21,470 --> 00:01:23,750
And if you just had an index
on opcode for instance, it

31
00:01:23,750 --> 00:01:26,300
wouldn't be a lot different
than doing a

32
00:01:26,300 --> 00:01:28,190
full collection scan.

33
00:01:28,190 --> 00:01:31,290
Whereas, if there was an index
on timestamp comma opcode, and

34
00:01:31,290 --> 00:01:35,340
you did know the times when
you wanted to query the

35
00:01:35,340 --> 00:01:39,190
opcode, the time interval, then
it would be pretty fast.

36
00:01:39,190 --> 00:01:41,330
Because it would be a very
small percentage

37
00:01:41,330 --> 00:01:43,100
of the total log.

38
00:01:43,100 --> 00:01:48,360
And after that, once you narrow
it down by 99%, then

39
00:01:48,360 --> 00:01:50,300
searching for the opcode would
be efficient and there

40
00:01:50,300 --> 00:01:51,690
wouldn't be that
many operations

41
00:01:51,690 --> 00:01:53,380
in that time interval.

42
00:01:53,380 --> 00:01:57,430
This idea of trying to choose
an index with selectivity is

43
00:01:57,430 --> 00:01:59,650
universally true in databases,
it's true in relational

44
00:01:59,650 --> 00:02:01,900
databases, and it's
true in MongoDB.

45
00:02:01,900 --> 00:02:03,830
So just keep that in mind when
you're creating your indexes,

46
00:02:03,830 --> 00:02:07,030
that you'd like to have them be
very selective if you can.

47
00:02:07,030 --> 00:02:09,720
, Otherwise, there's just not a
lot of value to having them.

48
00:02:09,720 --> 00:02:13,400
If you just want to search on
just the opcode, well then

49
00:02:13,400 --> 00:02:15,460
fine, but it's going to be
almost all the data every

50
00:02:15,460 --> 00:02:17,190
single time you look at it.

51
00:02:17,190 --> 00:02:19,220
All right, so time for quiz.

52
00:02:19,220 --> 00:02:21,360
Given the following attributes
of automobiles--

53
00:02:21,360 --> 00:02:24,850
color, weight, manufacture, and
odometer mileage, which

54
00:02:24,850 --> 00:02:27,950
index is likely to be the most
selective, provided you can

55
00:02:27,950 --> 00:02:29,840
provide all four attributes
on a search?

56
00:02:29,840 --> 00:02:32,200
So which of these is going to
be the most selective to

57
00:02:32,200 --> 00:02:34,160
narrowing down the number
of automobiles?

58
00:02:34,160 --> 00:02:35,410