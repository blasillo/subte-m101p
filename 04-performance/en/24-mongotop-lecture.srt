1
00:00:00,000 --> 00:00:00,200

2
00:00:00,200 --> 00:00:01,840
Let's review what we've
learned so far.

3
00:00:01,840 --> 00:00:04,610
We've learned that indexes are
critical to performance inside

4
00:00:04,610 --> 00:00:06,670
a database and inside MongoDB.

5
00:00:06,670 --> 00:00:09,760
We learned how to use the
Explain command to look at

6
00:00:09,760 --> 00:00:12,850
what the database is doing for
any particular query in terms

7
00:00:12,850 --> 00:00:14,670
of how it's using its indexes.

8
00:00:14,670 --> 00:00:17,200
We've learned how to use the
Hint command to instruct the

9
00:00:17,200 --> 00:00:19,880
database to use a particular
index for a query.

10
00:00:19,880 --> 00:00:22,070
And we've learned how to turn
on profiling and look at the

11
00:00:22,070 --> 00:00:24,720
profiling information to
figure out which of our

12
00:00:24,720 --> 00:00:28,030
queries are slow so that we can
use the Explain command,

13
00:00:28,030 --> 00:00:31,420
possibly use the Hint command,
possibly create new indexes.

14
00:00:31,420 --> 00:00:33,980
But if I want to look at the
high level inside a program

15
00:00:33,980 --> 00:00:37,320
and figure out what it's doing,
how would I do that?

16
00:00:37,320 --> 00:00:38,800
Now, we have some tools
to do that.

17
00:00:38,800 --> 00:00:41,170
And I'm going to show
those to you next.

18
00:00:41,170 --> 00:00:44,560
The first one I'd like to
show you is Mongtop .

19
00:00:44,560 --> 00:00:48,710
Now, Mongtop is named after
the Unix Top command.

20
00:00:48,710 --> 00:00:51,920
It's going to give you a high
level view of where Mongo is

21
00:00:51,920 --> 00:00:53,210
spending its time.

22
00:00:53,210 --> 00:00:56,510
And to show you how that could
be interesting, let me bring

23
00:00:56,510 --> 00:01:00,890
you through two programs
that I wrote.

24
00:01:00,890 --> 00:01:04,430
The first program I call
stress_students.

25
00:01:04,430 --> 00:01:08,690
Now stress_students, which is
right here, is a small program

26
00:01:08,690 --> 00:01:10,970
that connects to the database
and is going to look up a

27
00:01:10,970 --> 00:01:13,600
million student records in
my students collection.

28
00:01:13,600 --> 00:01:16,520
My students collection has
no index, and this

29
00:01:16,520 --> 00:01:18,640
is going to be slow.

30
00:01:18,640 --> 00:01:21,970
So let's run that.

31
00:01:21,970 --> 00:01:23,710
Now here it is, chugging
through these different

32
00:01:23,710 --> 00:01:24,280
student records.

33
00:01:24,280 --> 00:01:26,900
It looks like it's talking
almost a second per record.

34
00:01:26,900 --> 00:01:30,135
And then in this window, I'm
going to run Mongtop.

35
00:01:30,135 --> 00:01:32,960
And I'll run it every
three seconds--

36
00:01:32,960 --> 00:01:34,600
mongotop 3.

37
00:01:34,600 --> 00:01:36,585
Anyway, let's look at that
output together.

38
00:01:36,585 --> 00:01:38,440
I'm going to stop it.

39
00:01:38,440 --> 00:01:42,340
Now what it's saying is that--
and I'm not sure exactly why

40
00:01:42,340 --> 00:01:44,210
it's above three seconds
when the sampling

41
00:01:44,210 --> 00:01:45,510
interval's three seconds--

42
00:01:45,510 --> 00:01:50,650
but it's saying that all the
time is spent in the students

43
00:01:50,650 --> 00:01:51,190
collection.

44
00:01:51,190 --> 00:01:55,630
You'll notice this a row for
each collection that it's

45
00:01:55,630 --> 00:01:56,530
looking at.

46
00:01:56,530 --> 00:01:59,740
And this is great because at a
high level, if I've got lots

47
00:01:59,740 --> 00:02:01,800
of collections, I want to
know where the thing's

48
00:02:01,800 --> 00:02:02,800
spending its time.

49
00:02:02,800 --> 00:02:06,470
And then it's telling me my read
time and my write time.

50
00:02:06,470 --> 00:02:10,229
And it's very clearly dominated
by time spent

51
00:02:10,229 --> 00:02:13,180
reading in the students
collection.

52
00:02:13,180 --> 00:02:15,680
So that tells me that that's
were I should look, right?

53
00:02:15,680 --> 00:02:19,540
And I have profiling turned on,
if I went to the profiler,

54
00:02:19,540 --> 00:02:22,090
I would find there's a lot of
slow queries and that I could

55
00:02:22,090 --> 00:02:24,910
work on this right
off the bat.

56
00:02:24,910 --> 00:02:28,250
So let's look at a different
program which should be

57
00:02:28,250 --> 00:02:30,380
running much more efficiently
because it uses indexes and

58
00:02:30,380 --> 00:02:32,390
see what results we get there.

59
00:02:32,390 --> 00:02:33,480
So I'm going to go back here.

60
00:02:33,480 --> 00:02:35,610
I'm going to stop
this program.

61
00:02:35,610 --> 00:02:41,110
And now, I'm going to show you
a very similar program called

62
00:02:41,110 --> 00:02:43,090
stress_students2.py.

63
00:02:43,090 --> 00:02:47,230
Now, this connects to my school2
database, and there's

64
00:02:47,230 --> 00:02:50,430
another students collection
in there which also has 10

65
00:02:50,430 --> 00:02:51,110
million records.

66
00:02:51,110 --> 00:02:52,960
But they're broken up slightly
differently by class and

67
00:02:52,960 --> 00:02:56,470
student id, and so as a result,
I have to loop.

68
00:02:56,470 --> 00:02:59,920
But every one of these queries
that looks up a student by its

69
00:02:59,920 --> 00:03:02,150
class id is going to hit an
index because I have a

70
00:03:02,150 --> 00:03:05,540
student_id, class_id index on
that in that collection.

71
00:03:05,540 --> 00:03:07,650
And it's nicely selective,
and their student

72
00:03:07,650 --> 00:03:08,750
id is right in there.

73
00:03:08,750 --> 00:03:10,700
So we should expect to get good

74
00:03:10,700 --> 00:03:12,690
performance from this program.

75
00:03:12,690 --> 00:03:16,710
And let's see what the results
are when we run it.

76
00:03:16,710 --> 00:03:18,190
Well, I mean the first thing
you note is that it's just

77
00:03:18,190 --> 00:03:20,860
flying by, so you could just
feel that it's running a lot

78
00:03:20,860 --> 00:03:22,420
more quickly through
the database.

79
00:03:22,420 --> 00:03:26,220
But now I'm going to just run
Mongtop for three seconds and

80
00:03:26,220 --> 00:03:27,850
see what it says.

81
00:03:27,850 --> 00:03:32,420
And it says that in the
interval, 850 milliseconds of

82
00:03:32,420 --> 00:03:36,270
the three seconds, the 3000
milliseconds, are spent in the

83
00:03:36,270 --> 00:03:40,750
school2.students collection,
and it's all on read.

84
00:03:40,750 --> 00:03:42,540
But that's only a small fraction
of the sampling

85
00:03:42,540 --> 00:03:44,320
interval of three seconds.

86
00:03:44,320 --> 00:03:47,100
And what that would leave me to
believe is that this thing

87
00:03:47,100 --> 00:03:51,060
is not even bound by its
performance through Mongo.

88
00:03:51,060 --> 00:03:54,480
And if I look at the activity
monitor on my Mac-- and this

89
00:03:54,480 --> 00:03:57,300
is probably a little small
for you to see--

90
00:03:57,300 --> 00:03:59,920
you can see that there's as much
time spent in Python as

91
00:03:59,920 --> 00:04:00,950
there is in Mongo.

92
00:04:00,950 --> 00:04:04,300
Because of all the I/O and the
loops in there, it's accessing

93
00:04:04,300 --> 00:04:05,760
Mongo very quickly.

94
00:04:05,760 --> 00:04:08,280
And this would tell me that
this program is actually

95
00:04:08,280 --> 00:04:09,320
performing pretty well.

96
00:04:09,320 --> 00:04:14,240
Now if I went and looked in the
profiling logs, I wouldn't

97
00:04:14,240 --> 00:04:17,019
see any slow queries because
there really aren't any for

98
00:04:17,019 --> 00:04:18,690
this particular program.

99
00:04:18,690 --> 00:04:19,940
So that is Mongtop.

100
00:04:19,940 --> 00:04:21,149