1
00:00:00,000 --> 00:00:00,200

2
00:00:00,200 --> 00:00:04,270
I want to show you how to use
the hint command in PyMongo.

3
00:00:04,270 --> 00:00:06,770
It's pretty similar to the way
you use it in the Mongo shell,

4
00:00:06,770 --> 00:00:09,470
but there is one small
subtlety that's

5
00:00:09,470 --> 00:00:10,830
worth pointing out.

6
00:00:10,830 --> 00:00:14,620
So this is a small program I
wrote called using_hint.py.

7
00:00:14,620 --> 00:00:17,620
It looks a lot like all the
other programs that we've used

8
00:00:17,620 --> 00:00:18,980
in this class.

9
00:00:18,980 --> 00:00:21,360
We connect to the Mongo
database, and we connect to

10
00:00:21,360 --> 00:00:24,550
the test database in particular,
and then to the

11
00:00:24,550 --> 00:00:25,870
foo collection.

12
00:00:25,870 --> 00:00:30,160
And we're going to do a query on
A, B, and C keys all having

13
00:00:30,160 --> 00:00:31,950
the value of 40,000.

14
00:00:31,950 --> 00:00:34,060
And we're going to do that
query right here and then

15
00:00:34,060 --> 00:00:36,830
we're going to append this
hint command on it.

16
00:00:36,830 --> 00:00:40,920
But what I want to point out
is that, just like when you

17
00:00:40,920 --> 00:00:45,770
want to sort by a particular
index in Python, you can't

18
00:00:45,770 --> 00:00:48,570
just give a dictionary
to specify the index.

19
00:00:48,570 --> 00:00:51,090
You have to give an array
of these tuples.

20
00:00:51,090 --> 00:00:53,670
And so this is an array
of tuples where--

21
00:00:53,670 --> 00:00:56,050
this is not a compound index,
it's a simple index.

22
00:00:56,050 --> 00:00:57,770
But if it was a compound index,
there'd be multiple

23
00:00:57,770 --> 00:00:58,960
tuples here.

24
00:00:58,960 --> 00:01:02,255
And you see the tuple is
parentheses C comma PyMongo.

25
00:01:02,255 --> 00:01:06,110
And if there was another element
to the index then

26
00:01:06,110 --> 00:01:08,040
you'd have a common there
and another element.

27
00:01:08,040 --> 00:01:11,800
And the reason is that the
dictionaries themselves inside

28
00:01:11,800 --> 00:01:13,150
Python are not ordered.

29
00:01:13,150 --> 00:01:17,230
And so in order to send an
ordered list of things to

30
00:01:17,230 --> 00:01:22,640
Mongo D, you have to actually
use this array of tuples.

31
00:01:22,640 --> 00:01:24,730
So it's a slightly different
syntax then you see in the

32
00:01:24,730 --> 00:01:27,960
shell due to the dictionaries
in Python not being ordered.

33
00:01:27,960 --> 00:01:29,700
They are ordered
in JavaScript.

34
00:01:29,700 --> 00:01:32,290
All right, so if we do that--
and I actually called

35
00:01:32,290 --> 00:01:34,810
"explain" at the end just so
we see what we get, just to

36
00:01:34,810 --> 00:01:36,190
confirm that it works.

37
00:01:36,190 --> 00:01:38,350
And I'm just going to run that
query and I'm going to print

38
00:01:38,350 --> 00:01:39,370
what I get.

39
00:01:39,370 --> 00:01:40,750
I'm going to iterate
through what I get.

40
00:01:40,750 --> 00:01:43,150
I'm going to get a document from
the explain command and

41
00:01:43,150 --> 00:01:44,620
I'm just going to
go through it.

42
00:01:44,620 --> 00:01:48,100
So let's do that and
see what we get.

43
00:01:48,100 --> 00:01:49,500
And it's basically
what we expect.

44
00:01:49,500 --> 00:01:51,120
It's the output of an
explain command.

45
00:01:51,120 --> 00:01:53,510
It printed out in Python.

46
00:01:53,510 --> 00:01:56,660
The order of these different
keys are not necessarily the

47
00:01:56,660 --> 00:01:58,540
same as you saw them in the
Mongo shell, again because

48
00:01:58,540 --> 00:02:00,200
Python doesn't keep
them ordered.

49
00:02:00,200 --> 00:02:02,660
But if you look for the cursor,
you can see that it's

50
00:02:02,660 --> 00:02:06,420
using the index on just C
to satisfy this query.

51
00:02:06,420 --> 00:02:07,670
So the hint command worked.

52
00:02:07,670 --> 00:02:08,690