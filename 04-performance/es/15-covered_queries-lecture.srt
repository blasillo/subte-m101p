1
00:00:00,000 --> 00:00:00,500

2
00:00:00,500 --> 00:00:03,480
OK, now I want to talk to you
about the concept of a covered

3
00:00:03,480 --> 00:00:04,720
query.

4
00:00:04,720 --> 00:00:07,340
Now, a covered
query is not a query

5
00:00:07,340 --> 00:00:10,260
that is covered by a
house, but instead it's

6
00:00:10,260 --> 00:00:15,230
a query where the query itself
can be satisfied entirely

7
00:00:15,230 --> 00:00:16,260
with an index.

8
00:00:16,260 --> 00:00:18,750
And hence, zero
documents need to be

9
00:00:18,750 --> 00:00:21,040
inspected to satisfy the query.

10
00:00:21,040 --> 00:00:24,870
Now, if you can satisfy a
query entirely from the index,

11
00:00:24,870 --> 00:00:27,530
that's going to make
the query a lot faster.

12
00:00:27,530 --> 00:00:30,920
Let's go through an example in
the shell to see how it works.

13
00:00:30,920 --> 00:00:35,790
All right, I have a collection
that I call Numbers that

14
00:00:35,790 --> 00:00:38,270
has a million documents in it.

15
00:00:38,270 --> 00:00:42,500
And it was just put in here with
a nested loop of i, j, and k,

16
00:00:42,500 --> 00:00:44,160
so pretty straightforward.

17
00:00:44,160 --> 00:00:48,670
And if we look at Numbers and we
see what the indexes are on it,

18
00:00:48,670 --> 00:00:51,670
we see that there are,
in fact, two indexes.

19
00:00:51,670 --> 00:00:56,740
There's index on underscore ID
and there's an index on ijk.

20
00:00:56,740 --> 00:00:58,350
Those are the only indexes.

21
00:00:58,350 --> 00:01:00,530
So let's see how we
would create a query

22
00:01:00,530 --> 00:01:03,300
and find out whether
it's covered.

23
00:01:03,300 --> 00:01:06,610
So I'm going to create an
explainable object-- var

24
00:01:06,610 --> 00:01:09,040
exp equals db.numbers.explain.

25
00:01:09,040 --> 00:01:11,550

26
00:01:11,550 --> 00:01:15,240
And I'm going to use
the execution stats

27
00:01:15,240 --> 00:01:17,970
level of output.

28
00:01:17,970 --> 00:01:21,010
Now we're going to use
that object to called find,

29
00:01:21,010 --> 00:01:25,400
and we're going to look for
something where i is 45,

30
00:01:25,400 --> 00:01:29,740
j is 23, and that's it.

31
00:01:29,740 --> 00:01:32,270
And let's see what
that produces.

32
00:01:32,270 --> 00:01:34,060
So this is our explain output.

33
00:01:34,060 --> 00:01:35,610
Actually, before
we look at that,

34
00:01:35,610 --> 00:01:38,410
let's just go back and see
what the actual result would

35
00:01:38,410 --> 00:01:39,490
be of that.

36
00:01:39,490 --> 00:01:41,190
Give it a little
bit more context.

37
00:01:41,190 --> 00:01:42,940
You can see that if
we gave that query,

38
00:01:42,940 --> 00:01:46,830
we get a bunch of documents i,
j, and k, and underscore ID.

39
00:01:46,830 --> 00:01:49,280
And looking at
the explain output

40
00:01:49,280 --> 00:01:52,380
and going up into the
execution stats part,

41
00:01:52,380 --> 00:01:55,790
we see that there were 100
documents that were returned.

42
00:01:55,790 --> 00:01:57,610
And that's right here.

43
00:01:57,610 --> 00:02:00,350
And you can see that there
were 100 documents examined,

44
00:02:00,350 --> 00:02:02,930
and you can see there
were 100 keys examined.

45
00:02:02,930 --> 00:02:04,430
So if documents
were examined, that

46
00:02:04,430 --> 00:02:06,120
doesn't sound like
a covered index.

47
00:02:06,120 --> 00:02:09,639
And the question is since
there was an index in ijk,

48
00:02:09,639 --> 00:02:12,320
and since we only
asked to see ijk,

49
00:02:12,320 --> 00:02:16,450
why is it that this query had to
actually look at the documents?

50
00:02:16,450 --> 00:02:18,030
Doesn't make a lot of sense.

51
00:02:18,030 --> 00:02:20,310
And you can see that it
did use an index scan here

52
00:02:20,310 --> 00:02:23,430
in that it use the ijk index.

53
00:02:23,430 --> 00:02:27,830
And the reason is that we also
asked to see underscore ID.

54
00:02:27,830 --> 00:02:29,880
And underscore ID is not
included in that index.

55
00:02:29,880 --> 00:02:32,050
And so it had to
go to the documents

56
00:02:32,050 --> 00:02:34,480
to actually return the result.

57
00:02:34,480 --> 00:02:36,390
Let's change the
query little bit

58
00:02:36,390 --> 00:02:43,560
and specifically project out
underscore ID zero, i1, j1.

59
00:02:43,560 --> 00:02:47,060
Now we're saying we want
to see the i and j values,

60
00:02:47,060 --> 00:02:50,000
and we don't want to see
the underscore ID value.

61
00:02:50,000 --> 00:02:51,340
We can also see the k value.

62
00:02:51,340 --> 00:02:53,980
It won't change the
result in this case,

63
00:02:53,980 --> 00:02:56,450
because this is an index on ijk.

64
00:02:56,450 --> 00:02:59,320
And if we did that query and we
looked at the executions stats

65
00:02:59,320 --> 00:03:03,270
again in this explain output,
we see that once again we

66
00:03:03,270 --> 00:03:04,850
got 100 documents out.

67
00:03:04,850 --> 00:03:09,010
But this time, the number of
total keys examined is 100,

68
00:03:09,010 --> 00:03:12,270
but the number of total
documents examined is zero.

69
00:03:12,270 --> 00:03:14,820
And when the number of total
document examined is zero

70
00:03:14,820 --> 00:03:17,067
and we use an index and
we returned results--

71
00:03:17,067 --> 00:03:18,650
we have a number of
documents returned

72
00:03:18,650 --> 00:03:21,230
that's greater than zero--
that's a covered query.

73
00:03:21,230 --> 00:03:25,190
And this query was covered
by that index entirely.

74
00:03:25,190 --> 00:03:30,620
And if we ran the query without
the explain, db.numbers.find,

75
00:03:30,620 --> 00:03:33,080
we would see that we're turning
only the results for i, j,

76
00:03:33,080 --> 00:03:36,040
and k, and no
underscore ID values.

77
00:03:36,040 --> 00:03:40,080
And therefore, we can satisfy
this entirely with the index.

78
00:03:40,080 --> 00:03:42,270
Now here's a slightly
surprising result,

79
00:03:42,270 --> 00:03:45,530
which is that if we call
this query like this, where

80
00:03:45,530 --> 00:03:48,330
we suppress the
underscore ID, right here,

81
00:03:48,330 --> 00:03:51,690
and a silent on the other
options, we get pretty much

82
00:03:51,690 --> 00:03:54,200
the exact same output.

83
00:03:54,200 --> 00:03:56,220
This is exactly the same output.

84
00:03:56,220 --> 00:03:58,599
But if you do an
explain of this query--

85
00:03:58,599 --> 00:04:00,390
I'm going to find on
the explainable object

86
00:04:00,390 --> 00:04:03,410
with the same query,
where i and j is specified

87
00:04:03,410 --> 00:04:05,820
and the underscore
ID is suppressed--

88
00:04:05,820 --> 00:04:09,270
we're going to find
that, in fact, if we go

89
00:04:09,270 --> 00:04:11,070
to the top of the
execution stats,

90
00:04:11,070 --> 00:04:14,970
100 documents were examined
and 100 keys were examined,

91
00:04:14,970 --> 00:04:16,981
and 100 documents were returned.

92
00:04:16,981 --> 00:04:17,980
So what's going on here?

93
00:04:17,980 --> 00:04:19,110
That seems kind of weird.

94
00:04:19,110 --> 00:04:20,839
And it's a little
subtle, but the issue

95
00:04:20,839 --> 00:04:24,620
is that with this query, when we
suppress underscore ID but are

96
00:04:24,620 --> 00:04:27,350
silent on what we want
to do with the other keys

97
00:04:27,350 --> 00:04:31,110
in the document, MongoDB needs
to inspect every document,

98
00:04:31,110 --> 00:04:32,990
because it doesn't
know if there's

99
00:04:32,990 --> 00:04:34,440
another key in a document.

100
00:04:34,440 --> 00:04:37,090
There could be an l or
a p key in a document.

101
00:04:37,090 --> 00:04:40,700
It doesn't know for sure that
it could satisfy this query

102
00:04:40,700 --> 00:04:43,190
with just the ijk index.

103
00:04:43,190 --> 00:04:45,350
Only in the case
where you project

104
00:04:45,350 --> 00:04:48,860
exactly what's in the index-- or
I should say a subset of what's

105
00:04:48,860 --> 00:04:51,210
in the index-- and if it's
an index that doesn't include

106
00:04:51,210 --> 00:04:54,590
underscore ID, then underscore
ID has to be suppressed,

107
00:04:54,590 --> 00:04:56,840
it's only in the case where
the index could completely

108
00:04:56,840 --> 00:04:59,914
satisfy the query with
certainty that it's covered

109
00:04:59,914 --> 00:05:02,080
and the database can avoid
looking at the documents.

110
00:05:02,080 --> 00:05:03,750
If there's any
possibility of having

111
00:05:03,750 --> 00:05:06,680
to present the value for a
key that's not in the index,

112
00:05:06,680 --> 00:05:09,400
then it can't just
stick with the index.

113
00:05:09,400 --> 00:05:11,090
It has to go to the documents.

114
00:05:11,090 --> 00:05:13,710
All right, now It
is time for a quiz.

115
00:05:13,710 --> 00:05:16,380
We'd like to perform a
covered query on the example

116
00:05:16,380 --> 00:05:17,110
collection.

117
00:05:17,110 --> 00:05:19,920
And this example collection
is called example,

118
00:05:19,920 --> 00:05:20,880
and it's right here.

119
00:05:20,880 --> 00:05:22,410
It has these indexes.

120
00:05:22,410 --> 00:05:25,340
Which of the following is
likely to be a covered query?

121
00:05:25,340 --> 00:05:27,840
Check all that apply.