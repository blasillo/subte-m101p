1
00:00:00,000 --> 00:00:00,500

2
00:00:00,500 --> 00:00:03,140
Now I'd like to tell you
about the Mongostat command.

3
00:00:03,140 --> 00:00:06,130
The Mongostat command is a
performance tuning command,

4
00:00:06,130 --> 00:00:09,540
and it is somewhat similar
to the iostat command

5
00:00:09,540 --> 00:00:12,370
from the Unix world, if
you're familiar with that.

6
00:00:12,370 --> 00:00:14,880
What it will do is it will
sample the database in one

7
00:00:14,880 --> 00:00:18,130
second increments and give you a
bunch of information about what

8
00:00:18,130 --> 00:00:20,657
is going on during
that one second.

9
00:00:20,657 --> 00:00:23,240
For instance, it will give you
the number of inserts, queries,

10
00:00:23,240 --> 00:00:25,002
updates, and deletes.

11
00:00:25,002 --> 00:00:26,710
It'll also give you
different information

12
00:00:26,710 --> 00:00:32,060
depending on whether you're
running Wired Tiger or MMAP V1

13
00:00:32,060 --> 00:00:33,330
as a storage engine.

14
00:00:33,330 --> 00:00:34,870
So let's take a
look at Mongostat

15
00:00:34,870 --> 00:00:36,134
in a running database.

16
00:00:36,134 --> 00:00:37,550
Now, I've got both
storage engines

17
00:00:37,550 --> 00:00:41,310
currently running on
this computer, both Wired

18
00:00:41,310 --> 00:00:43,790
Tiger and MMAP V1.

19
00:00:43,790 --> 00:00:47,230
And I'm currently creating
the student collection,

20
00:00:47,230 --> 00:00:51,130
which is a million students, 10
classes for each student, so 10

21
00:00:51,130 --> 00:00:53,010
million documents,
and that's going on

22
00:00:53,010 --> 00:00:58,180
in parallel for both the Wired
Tiger and the MMAP V1 storage

23
00:00:58,180 --> 00:00:58,830
engine.

24
00:00:58,830 --> 00:01:02,300
Two different mongods, and one
of them is running at 27017

25
00:01:02,300 --> 00:01:05,440
and the other one
is running at 27018.

26
00:01:05,440 --> 00:01:08,030
So if I wanted to
see how it's going,

27
00:01:08,030 --> 00:01:11,800
I could run Mongo, use
the school database,

28
00:01:11,800 --> 00:01:16,760
and count the number of students
that are currently here,

29
00:01:16,760 --> 00:01:20,800
and you can see there's
about 850,000 in this one.

30
00:01:20,800 --> 00:01:24,750
And if I wanted to see what's
going on in the Wired Tiger

31
00:01:24,750 --> 00:01:28,850
one, which is running at
27018, I could do that as well,

32
00:01:28,850 --> 00:01:32,320
and you can see there are
793,000 students in that one.

33
00:01:32,320 --> 00:01:33,886
And every time I
run it, that number

34
00:01:33,886 --> 00:01:36,260
will be a little bit higher
because it's actually running

35
00:01:36,260 --> 00:01:37,670
a script in the background.

36
00:01:37,670 --> 00:01:41,460
Now, if I wanted to look at
this and see what's happening,

37
00:01:41,460 --> 00:01:44,490
I can run Mongostat
and I'll run it

38
00:01:44,490 --> 00:01:48,690
without a port number, which
will run it against 27017.

39
00:01:48,690 --> 00:01:51,990
And if I do that, you
can see a bunch of data.

40
00:01:51,990 --> 00:01:54,590
Unfortunately, it's
wrapping on the screen

41
00:01:54,590 --> 00:01:56,470
so it's a little
hard to read, but you

42
00:01:56,470 --> 00:02:00,640
can see the number of inserts,
queries, updates, and deletes,

43
00:02:00,640 --> 00:02:04,830
and you can see that, for
the 27017 server, which

44
00:02:04,830 --> 00:02:09,139
is the default port server,
I'm running about 4,000 inserts

45
00:02:09,139 --> 00:02:10,140
every second.

46
00:02:10,140 --> 00:02:11,640
There's a bunch of
other information

47
00:02:11,640 --> 00:02:14,050
here that we'll go
over in a moment.

48
00:02:14,050 --> 00:02:18,300
Now, if I want to then look
at the other storage engine,

49
00:02:18,300 --> 00:02:23,740
I could do that, and you can
see that that's also running

50
00:02:23,740 --> 00:02:26,480
about 4,000 inserts per second.

51
00:02:26,480 --> 00:02:28,870
Now, let's stress it just
a little bit further.

52
00:02:28,870 --> 00:02:31,455
So it's running this
large insert script

53
00:02:31,455 --> 00:02:33,920
that's going to insert all
these different student records,

54
00:02:33,920 --> 00:02:37,050
but now let's also run this.

55
00:02:37,050 --> 00:02:41,450
So I've written a small script
called stress_students.py,

56
00:02:41,450 --> 00:02:42,910
and it doesn't do much.

57
00:02:42,910 --> 00:02:46,620
What it does is it
goes through and looks

58
00:02:46,620 --> 00:02:49,630
in the range of
400,000 to 500,000

59
00:02:49,630 --> 00:02:51,909
and it tries to look up
the student by student ID,

60
00:02:51,909 --> 00:02:54,200
and there is an index on
student ID for this collection

61
00:02:54,200 --> 00:02:55,950
on both storage engines.

62
00:02:55,950 --> 00:03:00,470
And every 1,000 or so, it just
says, I did 1,000 searches.

63
00:03:00,470 --> 00:03:02,990
So let's run that,
and while we're

64
00:03:02,990 --> 00:03:05,620
running that, let's go back.

65
00:03:05,620 --> 00:03:09,850
And now, once again,
let's run Mongostat.

66
00:03:09,850 --> 00:03:12,670
And now we see the results
are slightly different.

67
00:03:12,670 --> 00:03:15,450
We can see that not only
are we doing some inserts,

68
00:03:15,450 --> 00:03:17,030
and actually, the
insert rate has now

69
00:03:17,030 --> 00:03:19,730
gone down to about
3,000 per second,

70
00:03:19,730 --> 00:03:21,570
but we're also doing
a bunch of queries.

71
00:03:21,570 --> 00:03:24,990
We're doing about 3,000 to
4,000 queries per second.

72
00:03:24,990 --> 00:03:26,920
So you can see how
this data changes,

73
00:03:26,920 --> 00:03:29,450
depending on the
workload in the database.

74
00:03:29,450 --> 00:03:32,670
So let's go over a few more
of these different columns

75
00:03:32,670 --> 00:03:34,370
and talk about what they do.

76
00:03:34,370 --> 00:03:36,280
I'm not going to go
through all of them.

77
00:03:36,280 --> 00:03:38,390
Insert, query,
update, and delete

78
00:03:38,390 --> 00:03:41,610
are just these different query
operations and deletions.

79
00:03:41,610 --> 00:03:43,070
Those are pretty obvious.

80
00:03:43,070 --> 00:03:44,710
Getmore is how many
getmore commands

81
00:03:44,710 --> 00:03:46,050
we're running every second.

82
00:03:46,050 --> 00:03:48,680
Getmore is the way you
get more from a cursor

83
00:03:48,680 --> 00:03:52,210
if you're doing a query
that has a large result.

84
00:03:52,210 --> 00:03:55,040
This is the number of commands
that are running per second,

85
00:03:55,040 --> 00:03:58,400
things like create
index and get indexes.

86
00:03:58,400 --> 00:03:59,820
These are commands.

87
00:03:59,820 --> 00:04:01,430
I'm not going to
talk about flushes.

88
00:04:01,430 --> 00:04:02,971
It has to do with
the number of times

89
00:04:02,971 --> 00:04:05,367
that it flushes out
the disk per second,

90
00:04:05,367 --> 00:04:07,200
but I'm not going to
talk too much about it.

91
00:04:07,200 --> 00:04:09,440
Mapped is the amount
of mapped memory

92
00:04:09,440 --> 00:04:11,980
that exists in the
MMAP V1 storage engine.

93
00:04:11,980 --> 00:04:14,070
You can see we're
mapping a lot of memory,

94
00:04:14,070 --> 00:04:17,010
but you can see that we only
have about 4.2 gigabytes

95
00:04:17,010 --> 00:04:17,986
resident.

96
00:04:17,986 --> 00:04:19,360
This is the number
of page faults

97
00:04:19,360 --> 00:04:21,329
that we're causing
every second, and that's

98
00:04:21,329 --> 00:04:24,900
an important number in MMAP
V1 because page faults mean

99
00:04:24,900 --> 00:04:27,280
that you're getting
more I/O, and more I/O

100
00:04:27,280 --> 00:04:30,530
means a slower database.

101
00:04:30,530 --> 00:04:33,070
Now finally, this right here--
and these are all wrapped,

102
00:04:33,070 --> 00:04:35,810
it's hard to read these-- but
these are the queue lengths

103
00:04:35,810 --> 00:04:37,640
for a number of
sockets, I believe,

104
00:04:37,640 --> 00:04:41,610
that are requested or waiting
for read and for write,

105
00:04:41,610 --> 00:04:45,670
and this is the number of active
readers and active writers,

106
00:04:45,670 --> 00:04:47,180
and then this is
the amount that was

107
00:04:47,180 --> 00:04:49,420
sent into the database
and out of the database

108
00:04:49,420 --> 00:04:51,400
during this time frame.

109
00:04:51,400 --> 00:04:56,200
Now, let's run Mongostat for
the Wired Tiger storage engine

110
00:04:56,200 --> 00:04:57,880
and look at the differences.

111
00:04:57,880 --> 00:05:00,970
Now again, Wired Tiger
is running at 27018 port,

112
00:05:00,970 --> 00:05:02,444
so let me connect to it there.

113
00:05:02,444 --> 00:05:04,610
Now, you can see for the
Wired Tiger storage engine,

114
00:05:04,610 --> 00:05:06,360
I'm not seeing any
queries because I'm not

115
00:05:06,360 --> 00:05:09,027
running that stress test against
the Wired Tiger storage engine.

116
00:05:09,027 --> 00:05:11,568
If I wanted to change that and
run it against the Wired Tiger

117
00:05:11,568 --> 00:05:12,960
storage engine, I could do that.

118
00:05:12,960 --> 00:05:20,300
Let's change that stress
test.py to connect to 27018,

119
00:05:20,300 --> 00:05:21,850
and now let's run that.

120
00:05:21,850 --> 00:05:23,660
So now we're going
to run that, and then

121
00:05:23,660 --> 00:05:25,201
while we're running
that, we're going

122
00:05:25,201 --> 00:05:28,530
to run our Mongostat
against 27018.

123
00:05:28,530 --> 00:05:29,560
Let's do that.

124
00:05:29,560 --> 00:05:31,304
Great.

125
00:05:31,304 --> 00:05:32,720
So I'll let that
run a little bit.

126
00:05:32,720 --> 00:05:33,634
Then I'll stop it.

127
00:05:33,634 --> 00:05:36,050
The first thing you notice is
that the Wired Tiger storage

128
00:05:36,050 --> 00:05:38,630
engine is actually
managing a few more reads.

129
00:05:38,630 --> 00:05:41,340
We're getting reads in
the 5,000 range per second

130
00:05:41,340 --> 00:05:45,590
while we're still doing about
4,000 inserts per second,

131
00:05:45,590 --> 00:05:48,120
so we're seeing better
performance out of the Wired

132
00:05:48,120 --> 00:05:49,400
Tiger storage engine.

133
00:05:49,400 --> 00:05:51,300
This is not the best
performance test.

134
00:05:51,300 --> 00:05:53,174
I've got two different
mongod servers running

135
00:05:53,174 --> 00:05:55,955
on the same box, but it is an
interesting stat nonetheless.

136
00:05:55,955 --> 00:05:59,820
Now, you'll notice here that we
still have this getmore column

137
00:05:59,820 --> 00:06:01,764
and we have this command
column, but then we

138
00:06:01,764 --> 00:06:03,180
have a bunch of
different columns.

139
00:06:03,180 --> 00:06:05,790
First of all, the MMAP column
is gone because we're not

140
00:06:05,790 --> 00:06:07,430
mapping memory anymore.

141
00:06:07,430 --> 00:06:10,590
Instead, we have the
%dirty and the %used,

142
00:06:10,590 --> 00:06:13,650
and this refers to the
percentage of the Wired Tiger

143
00:06:13,650 --> 00:06:16,680
cache that is dirty, meaning
that it's written and will need

144
00:06:16,680 --> 00:06:20,080
to be written back to disk if
we want to reuse the space,

145
00:06:20,080 --> 00:06:23,240
and the %used is a percentage
of total cache size that

146
00:06:23,240 --> 00:06:26,210
we're using, and you can see
that that's 10% and that very

147
00:06:26,210 --> 00:06:28,125
little of this cache is dirty.

148
00:06:28,125 --> 00:06:30,250
And then we can see that
we have about 1.6 gigabyte

149
00:06:30,250 --> 00:06:32,500
resident in the storage engine.

150
00:06:32,500 --> 00:06:35,430
And then the queue lengths
are again very close to zero,

151
00:06:35,430 --> 00:06:39,260
and the active clients
are-- it says one.

152
00:06:39,260 --> 00:06:41,110
Maybe two is Mongostat
attaching to it.

153
00:06:41,110 --> 00:06:42,220
I'm not sure.

154
00:06:42,220 --> 00:06:44,670
Or potentially, maybe that's
our stress test, actually.

155
00:06:44,670 --> 00:06:46,835
It could be our stress
test connecting to it.

156
00:06:46,835 --> 00:06:47,460
Now, let's see.

157
00:06:47,460 --> 00:06:49,165
In terms of the
resident size, I'm

158
00:06:49,165 --> 00:06:51,850
just going to go back
and see what this was.

159
00:06:51,850 --> 00:06:55,430
The resident size before
in MMAP was 4.2 gigs

160
00:06:55,430 --> 00:06:58,650
and the resident size
here was 1.6 gigs,

161
00:06:58,650 --> 00:07:01,180
so it looks like the resident
size is a lot smaller

162
00:07:01,180 --> 00:07:03,290
on Wired Tiger.

163
00:07:03,290 --> 00:07:06,830
That gives you a taste
of what these stats are.

164
00:07:06,830 --> 00:07:10,180
Now, obviously, you're most
interested in the stats that

165
00:07:10,180 --> 00:07:12,340
indicate both the users
of the database and also

166
00:07:12,340 --> 00:07:15,020
how much I/O you're doing.

167
00:07:15,020 --> 00:07:17,399
For the MMAP V1 storage engine,
the number of page faults

168
00:07:17,399 --> 00:07:19,940
is a pretty good indicator of
the amount of I/O you're doing.

169
00:07:19,940 --> 00:07:22,530
Of course, you could also
find that out from I/O stat.

170
00:07:22,530 --> 00:07:25,180
And for the Wired
Tiger storage engine,

171
00:07:25,180 --> 00:07:29,220
I don't see anything that's a
clear indicator of the amount

172
00:07:29,220 --> 00:07:31,514
of I/O you're
doing, although you

173
00:07:31,514 --> 00:07:33,180
can tell by the
percentage of your cache

174
00:07:33,180 --> 00:07:36,220
that you're using how
close you are to seeing

175
00:07:36,220 --> 00:07:37,792
some pressure on that cache.

176
00:07:37,792 --> 00:07:39,750
Obviously, if you're not
using the whole cache,

177
00:07:39,750 --> 00:07:41,624
you're probably not
seeing very much pressure

178
00:07:41,624 --> 00:07:42,907
at all on its size.

179
00:07:42,907 --> 00:07:44,990
Now, if you want to find
out more about Mongostat,

180
00:07:44,990 --> 00:07:46,890
of course, the
best way to do that

181
00:07:46,890 --> 00:07:50,580
is by looking in the manual.

182
00:07:50,580 --> 00:07:53,990
Right here, I'm just
googling "mongostat MongoDB,"

183
00:07:53,990 --> 00:07:56,300
and if I look here,
the first link

184
00:07:56,300 --> 00:07:57,560
tells me all about Mongostat.

185
00:07:57,560 --> 00:07:59,470
I know it's a little
bit small here.

186
00:07:59,470 --> 00:08:01,360
These are the command
line options to run it.

187
00:08:01,360 --> 00:08:02,910
I'm not going to get into that.

188
00:08:02,910 --> 00:08:05,150
And then finally at
the bottom, we've

189
00:08:05,150 --> 00:08:07,185
got the fields, which
pretty much follow along

190
00:08:07,185 --> 00:08:08,935
with what I just talked
about, telling you

191
00:08:08,935 --> 00:08:11,630
the number of inserts,
queries, updates

192
00:08:11,630 --> 00:08:14,180
per second that are
happening, and then explaining

193
00:08:14,180 --> 00:08:17,250
some of the more esoteric ones
and which ones also exist only

194
00:08:17,250 --> 00:08:20,570
for Wired Tiger, or what
they mean in Wired Tiger

195
00:08:20,570 --> 00:08:21,501
versus in MMAP.

196
00:08:21,501 --> 00:08:23,500
So for instance, flushes
has a different meaning

197
00:08:23,500 --> 00:08:25,550
in Wired Tiger versus MMAP.

198
00:08:25,550 --> 00:08:28,340
Dirty, as I said, is a
Wired Tiger only term.

199
00:08:28,340 --> 00:08:31,070
It's about percentage of
the cache that's dirty.

200
00:08:31,070 --> 00:08:33,590
Mapped is an MMAP
V1 storage term.

201
00:08:33,590 --> 00:08:36,794
Size is actually-- I
didn't see a size output,

202
00:08:36,794 --> 00:08:39,210
I saw a vsize output, which
why I haven't talked about it.

203
00:08:39,210 --> 00:08:41,689
Documentation seems to be
slightly off with respect

204
00:08:41,689 --> 00:08:43,230
to this column, and
I filed a ticket,

205
00:08:43,230 --> 00:08:45,640
so you might see this
as changed or more clear

206
00:08:45,640 --> 00:08:47,680
when you watch this video.

207
00:08:47,680 --> 00:08:50,030
Resident is the amount
of resident memory used

208
00:08:50,030 --> 00:08:55,710
in both cases, and faults, of
course, is an MMAP V1 concept.

209
00:08:55,710 --> 00:08:59,620
So those are the major parts
of the Mongostat command,

210
00:08:59,620 --> 00:09:01,680
and you should use
the Mongostat command

211
00:09:01,680 --> 00:09:04,410
if you're curious what
the database is doing,

212
00:09:04,410 --> 00:09:06,620
so that's Mongostat.

213
00:09:06,620 --> 00:09:09,230
Now it's time for a
quiz on Mongostat.

214
00:09:09,230 --> 00:09:11,350
Which of the following
statements about Mongostat

215
00:09:11,350 --> 00:09:12,320
output are true?

216
00:09:12,320 --> 00:09:13,630
Check all that apply.

217
00:09:13,630 --> 00:09:16,870
The MMAP column field appears
for all storage engines,

218
00:09:16,870 --> 00:09:19,570
the getmore column concerns
the number of requests

219
00:09:19,570 --> 00:09:22,460
per time interval to get
additional data from a cursor,

220
00:09:22,460 --> 00:09:24,010
only the Wired
Tiger storage engine

221
00:09:24,010 --> 00:09:26,770
reports the resident memory
size of the database,

222
00:09:26,770 --> 00:09:30,990
the faults column appears
only in the MMAP V1 output,

223
00:09:30,990 --> 00:09:33,520
and by default, Mongostat
provides information

224
00:09:33,520 --> 00:09:35,860
in 100 millisecond increments.