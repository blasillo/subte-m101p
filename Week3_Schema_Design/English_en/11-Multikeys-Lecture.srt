1
00:00:00,000 --> 00:00:00,500
 

2
00:00:00,500 --> 00:00:02,940
One of the reasons that
linking and embedding works

3
00:00:02,940 --> 00:00:06,310
so well within MongoDB is
because of the existence

4
00:00:06,310 --> 00:00:09,580
of a feature called
multikey indexes.

5
00:00:09,580 --> 00:00:11,910
I'm going to talk a little
bit about multikey indexes

6
00:00:11,910 --> 00:00:14,892
and why they're so
useful within MongoDB.

7
00:00:14,892 --> 00:00:18,010
Now, let's say you had a
schema that included students

8
00:00:18,010 --> 00:00:20,880
and teachers, and this is a
schema that we've seen before.

9
00:00:20,880 --> 00:00:22,580
And these are two
example documents

10
00:00:22,580 --> 00:00:23,880
from these collections.

11
00:00:23,880 --> 00:00:25,770
The students
collection might have

12
00:00:25,770 --> 00:00:27,300
a separate document
for each student

13
00:00:27,300 --> 00:00:30,430
with a unique underscore
ID, a name for each student,

14
00:00:30,430 --> 00:00:33,590
and a key for the
teachers, where

15
00:00:33,590 --> 00:00:36,920
the value is a list of the
underscore ID values for all

16
00:00:36,920 --> 00:00:38,790
the teachers that
the student has.

17
00:00:38,790 --> 00:00:41,470
And on the other side, we
have this teachers collection,

18
00:00:41,470 --> 00:00:43,960
which has a document
for each teacher

19
00:00:43,960 --> 00:00:45,990
with a unique underscore
ID, an integer

20
00:00:45,990 --> 00:00:48,600
value, and a name
for each teacher.

21
00:00:48,600 --> 00:00:50,630
And here you can see
we have Tony Stark is

22
00:00:50,630 --> 00:00:53,120
the only teacher in the
collection right now.

23
00:00:53,120 --> 00:00:55,710
And so this says right here that
Andrew has had four teachers

24
00:00:55,710 --> 00:00:58,200
and that one of
them is Tony Stark.

25
00:00:58,200 --> 00:01:00,450
Now, there are two
possible queries,

26
00:01:00,450 --> 00:01:02,300
or I should say two
obvious queries.

27
00:01:02,300 --> 00:01:04,610
And one is, how can I
find all the teachers

28
00:01:04,610 --> 00:01:06,380
that a particular
student has had?

29
00:01:06,380 --> 00:01:09,660
And the other is, how can
I find all the students who

30
00:01:09,660 --> 00:01:11,307
have had a particular teacher?

31
00:01:11,307 --> 00:01:12,890
Now, let's go over
the first one which

32
00:01:12,890 --> 00:01:15,690
is, how do I find the teachers
for a particular student?

33
00:01:15,690 --> 00:01:18,820
Now, that one is straightforward
because I can simply

34
00:01:18,820 --> 00:01:19,820
search this collection.

35
00:01:19,820 --> 00:01:21,330
I can query the
students collection.

36
00:01:21,330 --> 00:01:23,600
I could do db.students.find.

37
00:01:23,600 --> 00:01:25,850
I can specify the
student I'm looking for,

38
00:01:25,850 --> 00:01:29,210
and then return the teacher's
key with its values,

39
00:01:29,210 --> 00:01:31,070
and then I'll know the teachers.

40
00:01:31,070 --> 00:01:33,000
But what about finding
all the students who

41
00:01:33,000 --> 00:01:34,740
have had a particular teacher?

42
00:01:34,740 --> 00:01:36,290
That's a more difficult query.

43
00:01:36,290 --> 00:01:38,860
That query is going to
use our set operators.

44
00:01:38,860 --> 00:01:41,130
And in order for
that to be efficient,

45
00:01:41,130 --> 00:01:43,190
we need to be able
to use an index.

46
00:01:43,190 --> 00:01:46,870
And it's going to be a multikey
index that makes this possible.

47
00:01:46,870 --> 00:01:50,330
So let me show you in
the shell how this looks.

48
00:01:50,330 --> 00:01:50,830
All right.

49
00:01:50,830 --> 00:01:52,770
So we have two different
collections already

50
00:01:52,770 --> 00:01:53,560
set up here.

51
00:01:53,560 --> 00:01:54,790
We have a students
collection, and we

52
00:01:54,790 --> 00:01:55,915
have a teachers collection.

53
00:01:55,915 --> 00:01:58,020
Here's the students
collection, and here's

54
00:01:58,020 --> 00:01:59,021
the teachers collection.

55
00:01:59,021 --> 00:02:00,978
And we can see that the
students collection has

56
00:02:00,978 --> 00:02:02,810
a list of students,
including myself,

57
00:02:02,810 --> 00:02:04,250
and the teachers that I had.

58
00:02:04,250 --> 00:02:05,750
And here in the
teachers collection,

59
00:02:05,750 --> 00:02:07,489
we have a list of
professors, and these

60
00:02:07,489 --> 00:02:09,030
are the professors
that were teaching

61
00:02:09,030 --> 00:02:10,310
when I was at Stanford.

62
00:02:10,310 --> 00:02:12,070
And we can see that,
for instance, I

63
00:02:12,070 --> 00:02:14,990
had the teacher 0
and 1, which are

64
00:02:14,990 --> 00:02:17,100
Mark Horowitz and John Hennessy.

65
00:02:17,100 --> 00:02:20,020
Now, if we wanted to add a
multikey index on this teachers

66
00:02:20,020 --> 00:02:25,970
key, we could do it as follows,
db.students.ensureIndex

67
00:02:25,970 --> 00:02:28,140
'teachers' 1.

68
00:02:28,140 --> 00:02:30,470
And we haven't gone
over indexes yet,

69
00:02:30,470 --> 00:02:32,380
but this is how
you'd create them.

70
00:02:32,380 --> 00:02:34,407
And now the shell
returns information

71
00:02:34,407 --> 00:02:35,990
that before there
was one index, which

72
00:02:35,990 --> 00:02:38,530
was the index on underscore ID
which is in every collection,

73
00:02:38,530 --> 00:02:39,840
and now there are two.

74
00:02:39,840 --> 00:02:41,792
And now we're going
to do a query that's

75
00:02:41,792 --> 00:02:43,500
going to use that
index and be efficient.

76
00:02:43,500 --> 00:02:45,150
So let's find all
the students who

77
00:02:45,150 --> 00:02:47,380
had Mark Horowitz and John
Hennessy as professors.

78
00:02:47,380 --> 00:02:49,970
So Mark Horowitz is 0,
and John Hennessy 1.

79
00:02:49,970 --> 00:02:55,820
So we'll db.students.find
'teachers," now we're all.

80
00:02:55,820 --> 00:02:56,630
There we go.

81
00:02:56,630 --> 00:02:59,110
So now, we do a
query, and we ask,

82
00:02:59,110 --> 00:03:00,780
find me all the
students that had

83
00:03:00,780 --> 00:03:02,850
both 0 and 1 in their
teacher's value.

84
00:03:02,850 --> 00:03:05,450
And we find that it's
me, Andrew Erlichson,

85
00:03:05,450 --> 00:03:07,410
and it's also Richard Kreuter.

86
00:03:07,410 --> 00:03:09,399
He has also 0 and 1 in
the teacher's value.

87
00:03:09,399 --> 00:03:11,940
Now, the question is, how do we
know that that used an index?

88
00:03:11,940 --> 00:03:14,148
Well, there's a little
command that we haven't talked

89
00:03:14,148 --> 00:03:16,000
about yet, but it
works like this.

90
00:03:16,000 --> 00:03:18,980
We can append explain at
the end of this query.

91
00:03:18,980 --> 00:03:21,230
And if we append explain
at the end of this query,

92
00:03:21,230 --> 00:03:24,490
it will tell us what it did when
it was performing the query.

93
00:03:24,490 --> 00:03:26,740
And if we do that,
we can see here

94
00:03:26,740 --> 00:03:28,770
that it returns a
bunch of information,

95
00:03:28,770 --> 00:03:32,110
but what it tells us is
that it used the BtreeCursor

96
00:03:32,110 --> 00:03:36,210
teachers underscore 1 index,
which is a multikey index.

97
00:03:36,210 --> 00:03:38,170
And that's how
multikey indexes work

98
00:03:38,170 --> 00:03:41,030
and why they make linking and
embedding an efficient way

99
00:03:41,030 --> 00:03:45,710
to represent information within
MongoDB when you query it.

